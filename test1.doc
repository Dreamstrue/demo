第1级：controller
第2级：IndustryEntityController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.guangfan.zxt.common.AnnexFileUpLoad;
import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.common.entity.Annex;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;
import com.guangfan.zxt.surveymanage.service.IndustryEntityService;
import com.guangfan.zxt.util.DataUtil;
import com.guangfan.zxt.util.PropertiesFileUtil;

import dk.controller.BaseController;
import dk.model.DataGrid;
import dk.model.RequestPage;

/**
 * @description 行业实体管理控制类
 * @author zhaopengfei
 * @createtime 2015-12-15 下午03:55:13
 */
@Controller
@RequestMapping("/industryEntityManage")
public class IndustryEntityController extends BaseController {

	private static final String PREFIX = "surveymanage/industryEntityManage";  // 页面目录（路径前缀）

	@Resource
	private IndustryEntityService industryEntityService;
	/**
	 * 功能描述：转到信息列表页面
	 * 创建时间:2015-12-18上午9:26:31
	 * 创建人: pengfei zhao
	 * @return
	 */
	@RequestMapping("/manage") 
	public String manage() {
		return PREFIX + "/manage"; // /manage.jsp
	}
	
	
	@RequestMapping("/checkAndSaveIntity")
	@ResponseBody
	public Map<String, Object> checkAndSaveIntity(
			@RequestParam(value="objectId",required=false) String objectId,
			@RequestParam(value="objectType",required=false) String objectType,
			@RequestParam(value="objectName",required=false) String objectName, HttpSession session,
			HttpServletRequest request, Model model) {
		IndustryEntity induEntity=new IndustryEntity();
		if(!objectId.equals("")&&objectId!=null){
			boolean istrue=industryEntityService.checkEntity(objectId);
			if(!istrue){
				induEntity.setCcomtypcode("");
				// 设置创建人、创建时间、审核人、审核时间
				Long curUserId = (Long)session.getAttribute("userId");
				induEntity.setCreateid(curUserId);
				induEntity.setCreatetime(new Date());
				induEntity.setCauditstatus("0");
				induEntity.setValid("1");
				industryEntityService.save(induEntity);
			}
		}
		return success("操作成功", induEntity);
	}
	
	
	
	/**
	  * 方法名称：toEntInfoEdit
	  * 功能描述：转到实体信息编辑页面
	  * 创建时间:2015年12月21日下午4:15:01
	  * 创建人: pengfei Zhao
	  * @param @param entInfoId
	  * @param @param model
	  * @param @return 
	  * @return String
	 */
	@RequestMapping("/toEntityInfoEdit")
	public String toEntityInfoEdit(@RequestParam(value = "entInfoId", required = false) Long entInfoId, Model model){
		IndustryEntity induEntity = null;
		
		// 当entInfoId不为空时，说明是编辑操作
		if(entInfoId != null){
			induEntity = industryEntityService.get(entInfoId);
		}else{
			induEntity = new IndustryEntity();
			induEntity.setId(entInfoId);
		}
		
		model.addAttribute("induEntity", induEntity);
		return PREFIX+"/edit";
	} 
    /**
      * 方法名称：updateEntInfo
      * 功能描述：更新实体信息
      * 创建时间:2015年12月21日下午4:44:30
      * 创建人: pengfei Zhao
      * @param @param session
      * @param @param request
      * @param @param model
      * @param @return 
      * @return Map<String,Object>
     */
	@RequestMapping("/updateEntityInfo")
	@ResponseBody
	public Map<String, Object> updateEntityInfo(
			@ModelAttribute("induEntity") IndustryEntity induEntity,
			HttpSession session, MultipartHttpServletRequest request,
			Model model) {
		
		if(induEntity == null){
			return error("操作失败");
		}
		// 登记注册类型分类 代码的处理
		String companyTypeCode = StringUtils.EMPTY;
		String[] regTypes = request.getParameterValues("regType");
		for (int i = 0; i < regTypes.length; i++) {
			if(!regTypes[i].equals("")){
				if(i==0){
					companyTypeCode += regTypes[i];
				}else{
					companyTypeCode += "_"+regTypes[i];					
				}
			}
		}
		induEntity.setCcomtypcode(companyTypeCode);
		
		// 设置创建人、创建时间、审核人、审核时间
		Long curUserId = (Long)session.getAttribute("userId");
		induEntity.setCreateid(curUserId);
		induEntity.setCauditstatus("0");
		induEntity.setValid("1");
		industryEntityService.saveOrUpdate(induEntity);
		// 返回信息
		return success("操作成功", induEntity);
	}
	

	@RequestMapping("/delEntityInfo")
	@ResponseBody
	public Map<String, Object> delEntityInfo(Model model,@RequestParam("entInfoId") Long entInfoId){
		IndustryEntity induEntity = industryEntityService.get(entInfoId);
		if(induEntity == null){
			return error("删除失败");
		}
		industryEntityService.delEntInfo(induEntity);
		return success("删除成功");
	}
	/**
	  * 方法名称：checkEntity
	  * 功能描述：实体信息审核操作
	  * 创建时间:2015年12月21日下午5:13:39
	  * 创建人: pengfei Zhao
	  * @param @param request
	  * @param @return 
	  * @return Object
	 */
    @RequestMapping({"/checkEntity.action"})
    @ResponseBody
    public Object checkEntity(HttpServletRequest request)
    {
      String ids = request.getParameter("ids");
      String status = request.getParameter("checktype");
      industryEntityService.checkEntity(ids, status);
      return success("审核成功！");
    }

	
	@RequestMapping("parentIndustryList")
	@ResponseBody
	public List<SurveyIndustry> getParentIndustryList(){
		List list = industryEntityService.getParentIndustryList();
		return list;
		
	}
}
第2级：JavaConnOracle.java
package com.guangfan.zxt.surveymanage.controller;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;

import org.apache.log4j.Logger;

import com.guangfan.zxt.util.PropertiesFileUtil;

/**
 * @description 问卷统计调用 Oracle 存储过程
 * @author 燕珂
 * @createtime 2014-4-16 上午10:07:02
 */
public class JavaConnOracle {
	private static final Logger logger = Logger.getLogger(JavaConnOracle.class);
	private final static String jdbc_url = new PropertiesFileUtil().findValue("jdbc_url");
	private final static String jdbc_username = new PropertiesFileUtil().findValue("jdbc_username");
	private final static String jdbc_password = new PropertiesFileUtil().findValue("jdbc_password");
	
	JavaConnOracle(Long surveyId, Long relationObjectId) throws Exception
    {
        Class.forName("oracle.jdbc.driver.OracleDriver");
        //Connection conn=DriverManager.getConnection("jdbc:oracle:thin:@192.168.1.100:1521:orcl","zxt","zxt");
        Connection conn=DriverManager.getConnection(jdbc_url, jdbc_username, jdbc_password);
        boolean tmp = conn.getAutoCommit(); // 获取当前 connection 的 autocommit 属性（是否自动提交）
        //System.out.println(conn.getAutoCommit());
        conn.setAutoCommit(false); // 先把自动提交给设为 false 
        //System.out.println(conn.getAutoCommit());
       
        String procedure = "{call Proc_CreateTmpReportData(?,?,?)}"; // 这个存储过程中有往临时表插入数据的操作，上面把自动提交设为 false，本次会话关闭后，临时表的数据就不会保存了
        CallableStatement cstmt = conn.prepareCall(procedure);
        cstmt.setLong(1, 302);   //给第一个参数赋值（输入参数）
        cstmt.setLong(2, 2);   //给第一个参数赋值（输入参数）
        cstmt.registerOutParameter(3,oracle.jdbc.OracleTypes.INTEGER); // 输出参数
        cstmt.execute();
        int status = cstmt.getInt(3); // 获取存储过程返回值（即输出参数）
        if (status == 0)
        	System.out.println("存储过程调用成功");
        else if (status == -1)
        	System.out.println("编号为【" + surveyId + "】的问卷不存在");
        else if (status == -2)
        	System.out.println("获取调查问卷问题列表失败");
        else
        	System.out.println("sql异常错误，oracle错误码：" + status);
        
        
        if (conn != null) {  
            //conn.commit();//先前把自动提交给设为了false;  
        	conn.setAutoCommit(tmp); // 改回默认值  
        	//System.out.println(conn.getAutoCommit());
        }  
        //取出第二个参数的值.
        //System.out.println("bbb  "+cstmt.getInt(2));
        cstmt.close();  
        // sess.close();  
        conn.close(); // 连接关闭会自动提交事务
    }
	
    public static void main(String args[])throws Exception {
        new JavaConnOracle(123L, 123L);
    }
}
第2级：QuestionController.java
package com.guangfan.zxt.surveymanage.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.Option;
import com.guangfan.zxt.surveymanage.entity.Question;
import com.guangfan.zxt.surveymanage.service.OptionService;
import com.guangfan.zxt.surveymanage.service.QuestionService;
import com.guangfan.zxt.surveymanage.service.SurveyService;

import dk.controller.BaseController;
import dk.model.DataGrid;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：燕珂
 * <p/>创建日期：2013-11-7
 * <p/>创建时间：下午5:18:13
 * <p/>功能描述：问卷题目表Controller
 * <p/>===========================================================
 */
@Controller
@RequestMapping("/questionManage")
public class QuestionController extends BaseController{
	
	private final String PREFIX="enterprisemanage/newpage/surveymanage";
	
	@Resource
	private QuestionService questionService;
	
	@Resource
	private SurveyService surveService;
	@Resource
	private OptionService optionService;
	
	
	/**
	 * 所有RequestMapping方法调用前的Model准备方法, 实现Struts2 Preparable二次部分绑定的效果,先根据form的id从数据库查出Task对象,再把Form提交的内容绑定到该对象上。
	 * 因为仅update()方法的form中有id属性，因此仅在update时实际执行.
	 */
	@ModelAttribute
	public void getQuestion(@RequestParam(value = "id", defaultValue = "-1") Long id, Model model) {
		if (id !=null && id != -1) {
			model.addAttribute("question", questionService.get(id));
		}
	}

	/**
	 * 功能描述：跳转至问题列表
	 * 创建时间:2013-11-8下午2:33:43
	 * 创建人: 燕珂
	 * 
	 * @param surveyid 投票问卷信息表ID
	 * @return
	 */
	@RequestMapping("/toQuestionList")
	public String toSurveyList(@RequestParam("surveyid") Long surveyid, Model model){
		model.addAttribute("survey", surveService.get(surveyid));
		return PREFIX + "/questionList";
	}
	
	/**
	 * 功能描述：问题信息列表数据加载
	 * 创建时间:2013-11-8下午2:33:43
	 * 创建人: 燕珂
	 * 
	 * @param surveyid 投票问卷信息表ID
	 * @return
	 */
	@RequestMapping("/listQuestion")
	@ResponseBody
	public DataGrid listQuestion(@RequestParam("surveyid") String surveyid){
		return questionService.datagrid(surveyid);
	}
	
	/**
	 * 功能描述：进入问题添加页面
	 * 创建时间:2013-11-8下午4:47:39
	 * 创建人: 燕珂
	 * 
	 * @param surveyid 问卷ID
	 * @return
	 */
	@RequestMapping("/toQuestionAdd")
	public String toQuestionAdd(@RequestParam("questiontype") String questiontype, @RequestParam("surveyid") Long surveyid, Model model){
		model.addAttribute("surveyid", surveyid);
		model.addAttribute("survey", surveService.get(surveyid));
		
		// 获取该问卷的问题的最大序号
		List<Question> questionList = questionService.listQuestion(surveyid);
		int maxSort = 0;
		if(questionList != null){
			maxSort = questionList.size() + 1;
		}
		model.addAttribute("maxSort", maxSort);
		
		String returnJsp = "";
		if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT.equals(questiontype)) 
			returnJsp = "addQuestion4Select";
		else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT.equals(questiontype)) 
			returnJsp = "addQuestion4CombinationSelect";
		else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questiontype)) 
			returnJsp = "addQuestion4Score";
		else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questiontype)) 
			returnJsp = "addQuestion4CombinationScore";
		else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SORT.equals(questiontype)) 
			returnJsp = "addQuestion4Sort";
		else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN.equals(questiontype)) 
			returnJsp = "addQuestion4Open";
		return PREFIX + "/" + returnJsp;
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4Select")
	@ResponseBody
	public Map<String,Object> saveQuestion4Select(Question question, @RequestParam("optionText") String[] optionTextArray, @RequestParam(value = "optionRequireInput") String optionRequireInput, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		// 再保存选项
		String[] optionRequireInputArray = optionRequireInput.split(",");
		
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput(optionRequireInputArray[i]);
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4CombinationSelect")
	@ResponseBody
	public Map<String,Object> saveQuestion4CombinationSelect(Question question, @RequestParam("optionText1") String[] optionText1Array, @RequestParam("optionText2") String[] optionText2Array, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		// 再保存选项
		
		int count = 0;
		for (int i = 0; i < optionText1Array.length; i++) {
			Option option = new Option();
			String optionText = optionText1Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setOptiontype("1"); // 组合选择题显示在左侧的选项
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 再保存选项
		int count2 = 0;
		for (int i = 0; i < optionText2Array.length; i++) {
			Option option = new Option();
			String optionText = optionText2Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count2 ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count2);
				option.setRequireinput("0");
				option.setOptiontype("2"); // 组合选择题显示在顶部的选项
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4Score")
	@ResponseBody
	public Map<String,Object> saveQuestion4Score(Question question, @RequestParam("optionText") String[] optionTextArray, @RequestParam("score") int[] scoreArray, @RequestParam(value = "optionRequireInput") String optionRequireInput, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		// 再保存选项
		String[] optionRequireInputArray = optionRequireInput.split(",");
		
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput(optionRequireInputArray[i]);
				option.setScore(scoreArray[i]);
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4CombinationScore")
	@ResponseBody
	public Map<String,Object> saveQuestion4CombinationScore(Question question, @RequestParam("optionText1") String[] optionText1Array, @RequestParam("optionText2") String[] optionText2Array, @RequestParam("score") int[] scoreArray, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		// 再保存选项
		
		int count = 0;
		for (int i = 0; i < optionText1Array.length; i++) {
			Option option = new Option();
			String optionText = optionText1Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setOptiontype("1"); // 组合选择题显示在左侧的选项
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 再保存选项
		int count2 = 0;
		for (int i = 0; i < optionText2Array.length; i++) {
			Option option = new Option();
			String optionText = optionText2Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count2 ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count2);
				option.setRequireinput("0");
				option.setOptiontype("2"); // 组合选择题显示在顶部的选项
				option.setScore(scoreArray[i]);
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4Sort")
	@ResponseBody
	public Map<String,Object> saveQuestion4Sort(Question question, @RequestParam("optionText") String[] optionTextArray, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		// 再保存选项
		
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setCreateid(curUserId);		
				option.setCreatetime(new Date());
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：保存问题及问题选项
	 * 创建时间:2013-11-11上午11:12:45
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/saveQuestion4Open")
	@ResponseBody
	public Map<String,Object> saveQuestion4Open(Question question, HttpSession session){
		// 先保存问题
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(curUserId);		
		question.setCreatetime(new Date());
		question.setValid(SystemCommon_Constant.VALID_STATUS_1); //初始化  1-可用
		questionService.save(question);
		
		return success("保存成功", question);
	}
	
	/**
	 * 功能描述：进入问题编辑页面
	 * 创建时间:2013-11-8下午1:49:39
	 * 创建人: 燕珂
	 * 
	 * @param questionId 问题Id
	 * @param model
	 * @return
	 */
	@RequestMapping("/toQuestionEdit")
	public String toQuestionEdit(@RequestParam("questiontype") String questiontype, @RequestParam(value = "questionid") Long questionid, Model model) {
		Question question = questionService.get(questionid);
		model.addAttribute("questionId", questionid);
		model.addAttribute("question", question);
		
		List<Option> optionList = optionService.listOption(questionid);
		model.addAttribute("optionList", optionList);
		
		String returnJsp = "";
		if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT.equals(questiontype)) {
			returnJsp = "editQuestion4Select";
		} else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT.equals(questiontype)) {
			List<Option> optionList1 = new ArrayList<Option>(); // 左侧选项
			List<Option> optionList2 = new ArrayList<Option>(); // 上侧选项
			for (int i = 0; i < optionList.size(); i++) {
				Option option = optionList.get(i);
				if ("1".equals(option.getOptiontype()))
					optionList1.add(option);
				else if ("2".equals(option.getOptiontype()))
					optionList2.add(option);
			}
			model.addAttribute("optionList1", optionList1);
			model.addAttribute("optionList2", optionList2);
			returnJsp = "editQuestion4CombinationSelect";
		} else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questiontype)) {
			returnJsp = "editQuestion4Score";
		} else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questiontype)) {
			List<Option> optionList1 = new ArrayList<Option>(); // 左侧选项
			List<Option> optionList2 = new ArrayList<Option>(); // 上侧选项
			for (int i = 0; i < optionList.size(); i++) {
				Option option = optionList.get(i);
				if ("1".equals(option.getOptiontype()))
					optionList1.add(option);
				else if ("2".equals(option.getOptiontype()))
					optionList2.add(option);
			}
			model.addAttribute("optionList1", optionList1);
			model.addAttribute("optionList2", optionList2);
			returnJsp = "editQuestion4CombinationScore";
		} else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SORT.equals(questiontype)) {
			returnJsp = "editQuestion4Sort";
		} else if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN.equals(questiontype)) {
			returnJsp = "editQuestion4Open";
		}
		return PREFIX + "/" + returnJsp;
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4Select")
	@ResponseBody
	public Map<String, Object> updateQuestion4Select(@ModelAttribute("question") Question question, @RequestParam("optionText") String[] optionTextArray, @RequestParam(value = "optionRequireInput") String optionRequireInput, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 再保存选项（删除旧的、添加新的）
		optionService.deleteOldRoleOptionByQuestionId(question.getId());
		String[] optionRequireInputArray = optionRequireInput.split(",");
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput(optionRequireInputArray[i]);
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4CombinationSelect")
	@ResponseBody
	public Map<String, Object> updateQuestion4CombinationSelect(Question question, @RequestParam("optionText1") String[] optionText1Array, @RequestParam("optionText2") String[] optionText2Array, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 再保存选项（删除旧的、添加新的）
		optionService.deleteOldRoleOptionByQuestionId(question.getId());

		
		int count = 0;
		for (int i = 0; i < optionText1Array.length; i++) {
			Option option = new Option();
			String optionText = optionText1Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setOptiontype("1"); // 组合选择题显示在左侧的选项
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 再保存选项
		int count2 = 0;
		for (int i = 0; i < optionText2Array.length; i++) {
			Option option = new Option();
			String optionText = optionText2Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count2 ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count2);
				option.setRequireinput("0");
				option.setOptiontype("2"); // 组合选择题显示在顶部的选项
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4Score")
	@ResponseBody
	public Map<String, Object> updateQuestion4Score(@ModelAttribute("question") Question question, @RequestParam("optionText") String[] optionTextArray, @RequestParam("score") int[] scoreArray, @RequestParam(value = "optionRequireInput") String optionRequireInput, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 再保存选项（删除旧的、添加新的）
		optionService.deleteOldRoleOptionByQuestionId(question.getId());
		String[] optionRequireInputArray = optionRequireInput.split(",");
		
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput(optionRequireInputArray[i]);
				option.setScore(scoreArray[i]);
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4CombinationScore")
	@ResponseBody
	public Map<String, Object> updateQuestion4CombinationScore(Question question, @RequestParam("optionText1") String[] optionText1Array, @RequestParam("optionText2") String[] optionText2Array, @RequestParam("score") int[] scoreArray, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 再保存选项（删除旧的、添加新的）
		optionService.deleteOldRoleOptionByQuestionId(question.getId());

		
		int count = 0;
		for (int i = 0; i < optionText1Array.length; i++) {
			Option option = new Option();
			String optionText = optionText1Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setOptiontype("1"); // 组合选择题显示在左侧的选项
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 再保存选项
		int count2 = 0;
		for (int i = 0; i < optionText2Array.length; i++) {
			Option option = new Option();
			String optionText = optionText2Array[i];
			if (StringUtils.isNotBlank(optionText)) {
				count2 ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count2);
				option.setRequireinput("0");
				option.setOptiontype("2"); // 组合选择题显示在顶部的选项
				option.setScore(scoreArray[i]);
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4Sort")
	@ResponseBody
	public Map<String, Object> updateQuestion4Sort(@ModelAttribute("question") Question question, @RequestParam("optionText") String[] optionTextArray, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 再保存选项（删除旧的、添加新的）
		optionService.deleteOldRoleOptionByQuestionId(question.getId());
		
		int count = 0;
		for (int i = 0; i < optionTextArray.length; i++) {
			Option option = new Option();
			String optionText = optionTextArray[i];
			if (StringUtils.isNotBlank(optionText)) {
				count ++;
				option.setQuestionid(question.getId());
				option.setOptionText(optionText);
				option.setSort(count);
				option.setRequireinput("0");
				option.setCreateid(questionTemp.getCreateid());	// 创建人和时间就取问题的	
				option.setCreatetime(questionTemp.getCreatetime());
				question.setModifyid(curUserId); // 修改人
				question.setModifytime(new Date());  // 修改时间
				option.setValid(SystemCommon_Constant.VALID_STATUS_1);
				optionService.save(option);
			}
		}
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：更新问题信息
	 * 创建时间:2013-11-8下午4:14:03
	 * 创建人: 燕珂
	 * 
	 * @param question
	 * @return
	 */
	@RequestMapping("/updateQuestion4Open")
	@ResponseBody
	public Map<String, Object> updateQuestion4Open(@ModelAttribute("question") Question question, HttpSession session){
		if(question == null){
			return error("操作失败");
		}
		
		// 先保存问题
		Question questionTemp = questionService.get(question.getId());
		
		Long curUserId = (Long)session.getAttribute("userId");
		question.setCreateid(questionTemp.getCreateid()); // 创建人
		question.setCreatetime(questionTemp.getCreatetime()); // 创建时间
		question.setModifyid(curUserId); // 修改人
		question.setModifytime(new Date());  // 修改时间
		question.setValid(questionTemp.getValid()); // 是否有效
		questionService.saveOrUpdate(question);
		
		// 返回信息
		return success("修改成功", question);
	}
	
	/**
	 * 功能描述：删除问题
	 * 创建时间:2013-11-11下午2:03:01
	 * 创建人: 燕珂
	 * 
	 * @param questionId
	 * @return
	 */
	@RequestMapping("/deleteQuestion")
	@ResponseBody
	public Map<String, Object> deleteQuestion(@RequestParam(value = "questionId") Long questionId) {
		questionService.delete(questionId);
		optionService.deleteOldRoleOptionByQuestionId(questionId);
		return success("删除成功");
	}
	
}
第2级：SurveyCategoryController.java
package com.guangfan.zxt.surveymanage.controller;

import java.util.Date;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.SurveyCategory;
import com.guangfan.zxt.surveymanage.service.SurveyCategoryService;

import dk.controller.BaseController;
import dk.model.DataGrid;
import dk.model.RequestPage;

/**
 * @description 问卷调查类别控制类
 * @author 燕珂
 * @createtime 2014-3-6 上午11:03:04
 */
@Controller
@RequestMapping("/surveyCategoryManage")
public class SurveyCategoryController extends BaseController {

	private static final String PREFIX = "enterprisemanage";  // 页面目录（路径前缀）

	@Resource
	private SurveyCategoryService surveyCategoryService;
	
	/**
	 * 跳转至列表页
	 */
	@RequestMapping("/manage") 
	public String manage() {
		return PREFIX + "/manage"; // 返回 menu/manage.jsp
	}
	
	@RequestMapping("/datagrid") 
	@ResponseBody
	public DataGrid datagrid(RequestPage page) {
		return surveyCategoryService.datagrid(page);
	}

	
	/**
	 * 跳转至添加页
	 */
	@RequestMapping("toAdd")
	public String toAdd() {
		return PREFIX + "/add";
	}

	/**
	 * 添加
	 */
	@RequestMapping("/insert")
	@ResponseBody
	public Map<String, Object> insert(SurveyCategory surveyCategory, HttpSession session) {
		surveyCategory.setCreateid((Long) session.getAttribute("userId"));
		surveyCategory.setCreatetime(new Date());
		surveyCategory.setValid(SystemCommon_Constant.VALID_STATUS_1);
		surveyCategoryService.insert(surveyCategory);
		return success("添加成功！", surveyCategory);
	}
	
	/**
	 * 跳转至修改页
	 */
	@RequestMapping("toEdit")
	public String toEdit(Model model, @RequestParam(value = "id") Long id) {
		model.addAttribute("vo", surveyCategoryService.get(id));
		return PREFIX + "/edit";
	}

	/**
	 * 修改
	 */
	@RequestMapping("/update")
	@ResponseBody
	public Map update(SurveyCategory surveyCategory, HttpSession session) {
		SurveyCategory surveyCategoryTemp = surveyCategoryService.get(surveyCategory.getId());
		
		surveyCategory.setCreateid(surveyCategoryTemp.getCreateid()); // 创建人
		surveyCategory.setCreatetime(surveyCategoryTemp.getCreatetime()); // 创建时间
		surveyCategory.setModifyid((Long)session.getAttribute("userId")); // 修改人
		surveyCategory.setModifytime(new Date());  // 修改时间
		surveyCategory.setValid(surveyCategoryTemp.getValid()); // 是否有效
		
		surveyCategoryService.update(surveyCategory);
		return success("修改成功！", surveyCategory);
	}

	/**
	 * 删除
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Map delete(String ids)
	{
		if (StringUtils.isNotEmpty(ids))
		{
			for (int i = 0; i < ids.split(",").length; i++) {
				surveyCategoryService.delete(Long.valueOf(ids.split(",")[i]));
			}
			return success("删除成功！");
		} else
		{
			return error("请选择要删除的类别");
		}
	}
}
第2级：SurveyChartsController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.JsonArray;
import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.common.entity.CObject;
import com.guangfan.zxt.common.service.CObjectService;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.membermanage.service.MembermanageService;
import com.guangfan.zxt.prizemanage.entity.PrizeInfo;
import com.guangfan.zxt.prizemanage.entity.WinPrizeInfo;
import com.guangfan.zxt.prizemanage.service.PrizeInfoService;
import com.guangfan.zxt.prizemanage.service.WinPrizeInfoService;
import com.guangfan.zxt.sendMsg.entity.Checkcode;
import com.guangfan.zxt.sendMsg.service.CheckCodeService;
import com.guangfan.zxt.surveymanage.entity.SurveyCharts;
import com.guangfan.zxt.surveymanage.entity.SurveyPartakeUser;
import com.guangfan.zxt.surveymanage.model.EchartDataBean;
import com.guangfan.zxt.surveymanage.model.SeriesBean;
import com.guangfan.zxt.surveymanage.service.EntityCategoryService;
import com.guangfan.zxt.surveymanage.service.SurveyChartsService;
import com.guangfan.zxt.surveymanage.service.SurveyPartakeUserService;
import com.guangfan.zxt.surveymanage.service.VoteRecordService;
import com.guangfan.zxt.tagManage.service.TagSNBaseService;

import dk.controller.BaseController;

/**
 * @description 参与评价的图标统计信息
 * @author zhaopengfei
 * @createtime 2015-12-15 下午03:55:13
 */
@Controller
@RequestMapping("/SurveyChartsController")
public class SurveyChartsController extends BaseController {
    private static final Logger logger = LoggerFactory.getLogger(SurveyChartsController.class);
	@Resource
	private CObjectService cObjectService;
	private static final String PREFIX = "surveymanage/surveyCharts";  // 页面目录（路径前缀）
	@Resource
	private SurveyPartakeUserService sueryPartakeService;
	@Resource
	private WinPrizeInfoService winPrizeInfoService;
	@Resource
	private VoteRecordService voteRecordService;
	@Resource
	private EntityCategoryService entityCategoryService;
	@Resource
	private SurveyChartsService surveyChartsService;
	

    @RequestMapping("/line_data")
    @ResponseBody
    public EchartDataBean lineData(@RequestParam(value="startDate",required=true) String startDate,@RequestParam(value="endDate",required=true) String endDate) {
        logger.info("lineData....");
        List<String> legend = new ArrayList<String>(Arrays.asList(new String[]{"总评价","会员评价","匿名评价"}));//数据分组
        List lDate=new ArrayList<String>();
        List[] listcount= surveyChartsService.getSurveyCountList(startDate, endDate);
//        List<String> category = new ArrayList<String>(Arrays.asList(new String []{"周一","周二","周三","周四","周五","周六","周日"}));//横坐标
        List<String> category1=listcount[0];
        List<SeriesBean> series = new ArrayList<SeriesBean>();//纵坐标
//        series.add(new SeriesBean("总评价", "line", 
//                        new ArrayList<Integer>(Arrays.asList(
//                                21,23,28,26,21,33,44))));
        series.add(new SeriesBean("总评价", "line", listcount[1]));
        series.add(new SeriesBean("会员评价", "line", listcount[2]));
        series.add(new SeriesBean("匿名评价", "line", listcount[3]));
        EchartDataBean data=new EchartDataBean(legend, category1, series);
        return data;
    }
    
    @RequestMapping("/toSuveyChart.action")
    public String toSuveyChart(Model model) {
    	int totalVote=voteRecordService.getVoteTotalNum(null,false,false);//总数量
    	int totalmemberVote=voteRecordService.getVoteTotalNum(null,true,false);//会员评价总数量
    	int totalanonymousVote=voteRecordService.getVoteTotalNum(null,false,true);//匿名评价总数量
    	int total1Vote=voteRecordService.getVoteNumForToday(null,false,false);//当天数量
    	int total7Vote=voteRecordService.getVoteNumForWeek(null,false,false);//7天数量
    	int total30Vote=voteRecordService.getVoteNumForMonth(null,false,false);//30天数量
      	int totalmember1Vote=voteRecordService.getVoteNumForToday(null,true,false);//当天会员评价数量
    	int totalmember7Vote=voteRecordService.getVoteNumForWeek(null,true,false);//7天会员数量
    	int totalmember30Vote=voteRecordService.getVoteNumForMonth(null,true,false);//30天会员数量
      	int totalanonymous1Vote=voteRecordService.getVoteNumForToday(null,false,true);//当天匿名数量
    	int totalanonymous7Vote=voteRecordService.getVoteNumForWeek(null,false,true);//7天匿名数量
    	int totalanonymous30Vote=voteRecordService.getVoteNumForMonth(null,false,true);//30天匿名数量
    	model.addAttribute("totalVote", totalVote);
    	model.addAttribute("totalmemberVote", totalmemberVote);
    	model.addAttribute("totalanonymousVote", totalanonymousVote);
    	model.addAttribute("total1Vote", total1Vote);
    	model.addAttribute("total7Vote", total7Vote);
    	model.addAttribute("total30Vote", total30Vote);
    	model.addAttribute("totalmember1Vote", totalmember1Vote);
    	model.addAttribute("totalmember7Vote", totalmember7Vote);
    	model.addAttribute("totalmember30Vote", totalmember30Vote);
    	model.addAttribute("totalanonymous1Vote", totalanonymous1Vote);
    	model.addAttribute("totalanonymous7Vote", totalanonymous7Vote);
    	model.addAttribute("totalanonymous30Vote", totalanonymous30Vote);
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();  
        c.add(Calendar.DATE, - 7);  
        Date monday = c.getTime();
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.DATE,-1);
        Date enddate = cal.getTime();
        model.addAttribute("newdate",sdf.format(enddate));
        model.addAttribute("pre7date",sdf.format(monday));
    	return PREFIX + "/surveyCharts";
    }
   /**
     * 方法名称：findDates
     * 功能描述：获取两个时间间的所有时间段
     * 创建时间:2016年5月26日下午6:17:02
     * 创建人: pengfei Zhao
     * @return Date[]
    */
    public List<String> findDates(Date dBegin, Date dEnd) {  
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
        List lDate = new ArrayList();  
        lDate.add(sdf.format(dBegin));  
        Calendar calBegin = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calBegin.setTime(dBegin);  
        Calendar calEnd = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calEnd.setTime(dEnd);  
        // 测试此日期是否在指定日期之后    
        while (dEnd.after(calBegin.getTime())) {  
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量    
            calBegin.add(Calendar.DAY_OF_MONTH, 1);  
            lDate.add(sdf.format(calBegin.getTime()));  
        }  
        return lDate;  
    }  
    
    
    /**
      * 方法名称：GetDepartment
      * 功能描述：根据页码和每页记录数，以及查询条件动态加载销售记录 
      * 创建时间:2016年6月1日上午10:32:10
      * 创建人: pengfei Zhao
      * @return JSONObject
     */
   @RequestMapping("/GetDepartment.action")
   @ResponseBody
   public void GetDepartment(HttpServletRequest request,  
           HttpServletResponse response) throws IOException {  
	   
	   response.setCharacterEncoding("utf-8");  
       PrintWriter pw = response.getWriter();  
       //得到客户端传递的页码和每页记录数，并转换成int类型  
       int pageSize = Integer.parseInt(request.getParameter("pageSize"));  
       int pageNumber = Integer.parseInt(request.getParameter("pageNumber"));  
       String search = String.valueOf(request.getParameter("search"));  
       String path="http://"+request.getServerName()+":"+request.getServerPort()+"/zxt-manage";
       //分页查找商品销售记录，需判断是否有带查询条件  
       List<SurveyCharts> lstRes = null;  
       lstRes = surveyChartsService.getSurveyList(pageNumber, pageSize, search);  
         
       JSONArray jsonArray = new JSONArray();
	   	for(int i=0;i<lstRes.size();i++){
	   	    SurveyCharts oModel = new SurveyCharts();
	   		oModel=lstRes.get(i);
	   		JSONObject json =new JSONObject();
	   		json.put("countTime", oModel.getCountTime().toString());
	   		json.put("todayMnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+oModel.getCountTime().toString()+"&isMember=1  target=\"_parent\">"+oModel.getTodayMnum().toString()+ "</a>");
	   		json.put("todayNnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+oModel.getCountTime().toString()+"&isMember=2  target=\"_parent\">"+oModel.getTodayNnum().toString()+ "</a>");
	   		json.put("todayTnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+oModel.getCountTime().toString()+"&isMember=0  target=\"_parent\">"+oModel.getTodayTnum().toString()+ "</a>");
	   		jsonArray.add(json);
	   	}
	    String sellRecordJson=jsonArray.toString();
       //得到总记录数  
       int total = surveyChartsService.getSurveyCount(search);;  
         
       //需要返回的数据有总记录数和行数据  
       String json = "{\"total\":" + total + ",\"rows\":" + sellRecordJson + "}";  
       pw.print(json);  
       
   }
   
   /**
    * 方法名称：dumpHistoryforAllSurvey
    * 功能描述：所有历史数据转储
    * 创建时间:2016年6月1日上午10:32:10
    * 创建人: pengfei Zhao
    * @return JSONObject
   */
 @RequestMapping("/dumpHistoryforAllSurvey.action")
 @ResponseBody
 public Map<String, Object> dumpHistoryforAllSurvey(HttpServletRequest request,  
         HttpServletResponse response) throws IOException {  
	 try{
		 String startDate="2016-01-01";
		 surveyChartsService.DeleteTable();
		 voteRecordService.dumpHistoryforAllSurvey(startDate,new Date());
	   }catch(Exception ex){
		 ex.getStackTrace();
	  }
	return success("初始化成功"); 
 }
   
}
第2级：SurveyChartsForSurveyEntityController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.common.service.CObjectService;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.prizemanage.service.WinPrizeInfoService;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.SurveyChartsForSurveyEntity;
import com.guangfan.zxt.surveymanage.model.EchartDataBean;
import com.guangfan.zxt.surveymanage.model.SeriesBean;
import com.guangfan.zxt.surveymanage.service.EntityCategoryService;
import com.guangfan.zxt.surveymanage.service.IndustryEntityService;
import com.guangfan.zxt.surveymanage.service.SurveyChartsForSurveyEntityService;
import com.guangfan.zxt.surveymanage.service.SurveyPartakeUserService;
import com.guangfan.zxt.surveymanage.service.VoteRecordService;
import com.guangfan.zxt.tagManage.entity.SNBase;
import com.guangfan.zxt.tagManage.entity.SNBatch;

import dk.controller.BaseController;
import dk.util.MD5;

/**
 * @description 参与评价的图标统计信息
 * @author zhaopengfei
 * @createtime 2015-12-15 下午03:55:13
 */
@Controller
@RequestMapping("/SurveyChartsForSurveyEntityController")
public class SurveyChartsForSurveyEntityController extends BaseController {
    private static final Logger logger = LoggerFactory.getLogger(SurveyChartsForSurveyEntityController.class);
	@Resource
	private CObjectService cObjectService;
	private static final String PREFIX = "surveymanage/surveyCharts";  // 页面目录（路径前缀）
	@Resource
	private SurveyPartakeUserService sueryPartakeService;
	@Resource
	private WinPrizeInfoService winPrizeInfoService;
	@Resource
	private VoteRecordService voteRecordService;
	@Resource
	private EntityCategoryService entityCategoryService;
	@Resource
	private SurveyChartsForSurveyEntityService surveyChartsForSurveyEntityService;
	@Resource
	private IndustryEntityService industryEntityService;

    @RequestMapping("/line_data")
    @ResponseBody
    public EchartDataBean lineData(@RequestParam(value="startDate",required=true) String startDate,@RequestParam(value="endDate",required=true) String endDate,
    		@RequestParam(value="entityId",required=true) String entityId,@RequestParam(value="surveyId",required=true) Long surveyId) throws ParseException {
        logger.info("lineData....");
        List<String> legend = new ArrayList<String>(Arrays.asList(new String[]{"总评价","会员评价","匿名评价"}));//数据分组
        List lDate=new ArrayList<String>();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
        List listDate = findDates(sdf.parse(startDate), sdf.parse(endDate));
        List[] listcount= surveyChartsForSurveyEntityService.getSurveyCountList(listDate,entityId,surveyId);
//        List<String> category = new ArrayList<String>(Arrays.asList(new String []{"周一","周二","周三","周四","周五","周六","周日"}));//横坐标
        List<String> category1=listcount[0];
        List<SeriesBean> series = new ArrayList<SeriesBean>();//纵坐标
//        series.add(new SeriesBean("总评价", "line", 
//                        new ArrayList<Integer>(Arrays.asList(
//                                21,23,28,26,21,33,44))));
        series.add(new SeriesBean("总评价", "line", listcount[1]));
        series.add(new SeriesBean("会员评价", "line", listcount[2]));
        series.add(new SeriesBean("匿名评价", "line", listcount[3]));
        EchartDataBean data=new EchartDataBean(legend, category1, series);
        return data;
    }
    @RequestMapping("/toSuveyChart.action")
    public String toSuveyChart(Model model,@RequestParam(value="entityId",required=false) String entityId,
    		                   @RequestParam(value="surveyId",required=false) Long surveyId,
    		                   @RequestParam(value="beginTime",required=false) String beginTime,
    		                   @RequestParam(value="endTime",required=false) String endTime) {
    	String objectId="";
    	String entityIds="";
    	if(entityId!=null && !"".equals(entityId) && !entityId.contains(",")){
    		String cobjectId = industryEntityService.get(Long.valueOf(entityId)).getObjectId();
    	    objectId=cobjectId;
    	    entityIds=entityId;
    	}
    	if(entityId.contains(",")){
    		String[] entityids=entityId.split(",");
    		for(int i=0;i<entityids.length;i++){
    			String entId=entityids[i];
    			IndustryEntity insentity = industryEntityService.get(Long.valueOf(entId));
    			String cobjectId = insentity.getObjectId();
    			objectId+=cobjectId+",";
    			entityIds+=insentity.getId()+",";
    			if(i==(entityids.length-1)){
    				objectId=objectId.substring(0, objectId.length()-1);
    				entityIds=entityIds.substring(0, entityIds.length()-1);
    			}
    		}
    	}
    	int totalVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityIds,surveyId,false,false,beginTime,endTime);//总数量
    	int totalmemberVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityIds,surveyId,true,false,beginTime,endTime);//会员评价总数量
    	int totalanonymousVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityIds,surveyId,false,true,beginTime,endTime);//匿名评价总数量
//    	int total1Vote=voteRecordService.getVoteNumForTodayForEntity(objectId,surveyId,false,false);//当天数量
//    	int total7Vote=voteRecordService.getVoteNumForWeekForEntity(objectId,surveyId,false,false);//7天数量
//    	int total30Vote=voteRecordService.getVoteNumForMonthForEntity(objectId,surveyId,false,false);//30天数量
//      	int totalmember1Vote=voteRecordService.getVoteNumForTodayForEntity(objectId,surveyId,true,false);//当天会员评价数量
//    	int totalmember7Vote=voteRecordService.getVoteNumForWeekForEntity(objectId,surveyId,true,false);//7天会员数量
//    	int totalmember30Vote=voteRecordService.getVoteNumForMonthForEntity(objectId,surveyId,true,false);//30天会员数量
//      	int totalanonymous1Vote=voteRecordService.getVoteNumForTodayForEntity(objectId,surveyId,false,true);//当天匿名数量
//    	int totalanonymous7Vote=voteRecordService.getVoteNumForWeekForEntity(objectId,surveyId,false,true);//7天匿名数量
//    	int totalanonymous30Vote=voteRecordService.getVoteNumForMonthForEntity(objectId,surveyId,false,true);//30天匿名数量
    	model.addAttribute("totalVote", totalVote);
    	model.addAttribute("totalmemberVote", totalmemberVote);
    	model.addAttribute("totalanonymousVote", totalanonymousVote);
//    	model.addAttribute("total1Vote", total1Vote);
//    	model.addAttribute("total7Vote", total7Vote);
//    	model.addAttribute("total30Vote", total30Vote);
//    	model.addAttribute("totalmember1Vote", totalmember1Vote);
//    	model.addAttribute("totalmember7Vote", totalmember7Vote);
//    	model.addAttribute("totalmember30Vote", totalmember30Vote);
//    	model.addAttribute("totalanonymous1Vote", totalanonymous1Vote);
//    	model.addAttribute("totalanonymous7Vote", totalanonymous7Vote);
//    	model.addAttribute("totalanonymous30Vote", totalanonymous30Vote);
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        Calendar c = Calendar.getInstance();  
        c.add(Calendar.DATE, - 7);  
        Date monday = c.getTime();
        String pre7date=sdf.format(monday);
        Calendar cal=Calendar.getInstance();
        cal.add(Calendar.DATE,-1);
        Date enddate = cal.getTime();
        String newdate=sdf.format(enddate);
        if(!beginTime.equals("")){
        	pre7date=beginTime;
        }
        if(!endTime.equals("")){
        	newdate=endTime;
        }
        model.addAttribute("newdate",newdate);
        model.addAttribute("pre7date",pre7date);
        model.addAttribute("beginTime",beginTime);
        model.addAttribute("endTime",endTime);
        model.addAttribute("entityId", entityIds);
        model.addAttribute("surveyId", surveyId);
    	return PREFIX + "/surveyChartsForSurveyEntity";
    }
   /**
     * 方法名称：findDates
     * 功能描述：获取两个时间间的所有时间段
     * 创建时间:2016年5月26日下午6:17:02
     * 创建人: pengfei Zhao
     * @return Date[]
    */
    public List<String> findDates(Date dBegin, Date dEnd) {  
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
        List lDate = new ArrayList();  
        lDate.add(sdf.format(dBegin));  
        Calendar calBegin = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calBegin.setTime(dBegin);  
        Calendar calEnd = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calEnd.setTime(dEnd);  
        // 测试此日期是否在指定日期之后    
        while (dEnd.after(calBegin.getTime())) {  
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量    
            calBegin.add(Calendar.DAY_OF_MONTH, 1);  
            lDate.add(sdf.format(calBegin.getTime()));  
        }  
        return lDate;  
    }  
    
    
    /**
      * 方法名称：GetDepartment
      * 功能描述：根据页码和每页记录数，以及查询条件动态加载销售记录 
      * 创建时间:2016年6月1日上午10:32:10
      * 创建人: pengfei Zhao
      * @return JSONObject
     */
   @RequestMapping("/GetDepartment.action")
   @ResponseBody
   public void GetDepartment(HttpServletRequest request,  
           HttpServletResponse response,@RequestParam(value="entityId",required=true) String entityId,@RequestParam(value="surveyId",required=false) Long surveyId,
           @RequestParam(value="beginTime",required=false) String beginTime,
           @RequestParam(value="endTime",required=false) String endTime) throws IOException {  
	   
	   response.setCharacterEncoding("utf-8");  
       PrintWriter pw = response.getWriter();  
       //得到客户端传递的页码和每页记录数，并转换成int类型  
       int pageSize = Integer.parseInt(request.getParameter("pageSize"));  
       int pageNumber = Integer.parseInt(request.getParameter("pageNumber"));  
       String search = String.valueOf(request.getParameter("search"));  
       String path="http://"+request.getServerName()+":"+request.getServerPort()+"/zxt-manage";
       //分页查找商品销售记录，需判断是否有带查询条件  
       List<SurveyChartsForSurveyEntity> lstRes = null;  
       lstRes = surveyChartsForSurveyEntityService.getSurveyList(pageNumber, pageSize, search,entityId,surveyId,beginTime,endTime);  
         
       JSONArray jsonArray = new JSONArray();
	   for (Iterator it = lstRes.iterator(); it.hasNext(); ) {
	        Object[] obj = (Object[])it.next();
	        String countTime =obj[0].toString();
	        String todayMnum =obj[1].toString();
	        String todayNnum =obj[2].toString();
	        String todayTnum =obj[3].toString();
	        JSONObject json =new JSONObject();
	   		json.put("countTime", countTime);
	   		json.put("todayMnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+countTime+"&isMember=1&entityId="+entityId+"&surveyId="+surveyId+"  target=\"_blank\">"+todayMnum+ "</a>");
	   		json.put("todayNnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+countTime+"&isMember=2&entityId="+entityId+"&surveyId="+surveyId+"   target=\"_blank\">"+todayNnum+ "</a>");
	   		json.put("todayTnum", "<a href="+path+"/evaluationManage/toEvaluationByChart.action?countTime="+countTime+"&isMember=0&entityId="+entityId+"&surveyId="+surveyId+"   target=\"_blank\">"+todayTnum+ "</a>");
	   		jsonArray.add(json);
	    }
	    String sellRecordJson=jsonArray.toString();
       //得到总记录数  
       int total = surveyChartsForSurveyEntityService.getSurveyCount(search,entityId,surveyId,beginTime,endTime);  
         
       //需要返回的数据有总记录数和行数据  
       String json = "{\"total\":" + total + ",\"rows\":" + sellRecordJson + "}";  
       pw.print(json);  
       
   }
   
   @RequestMapping("/getTotalData")
	@ResponseBody
	public Object getTotalData(@RequestParam(value="entityId",required=false) String entityId,
            @RequestParam(value="surveyId",required=false) Long surveyId,
            @RequestParam(value="beginTime",required=false) String beginTime,
            @RequestParam(value="endTime",required=false) String endTime){
		int totalVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityId,surveyId,false,false,beginTime,endTime);//总数量
	   	int totalmemberVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityId,surveyId,true,false,beginTime,endTime);//会员评价总数量
	   	int totalanonymousVote=surveyChartsForSurveyEntityService.getVoteTotalNumForEntity(entityId,surveyId,false,true,beginTime,endTime);//匿名评价总数量
        Map<String,Integer> maps=new HashMap<String, Integer>();	
        maps.put("totalVote", totalVote);
        maps.put("totalmemberVote", totalmemberVote);
        maps.put("totalanonymousVote", totalanonymousVote);
        return success("获取成功！",maps);
	}
   
   /**
    * 方法名称：dumpHistoryforSurveyEntity
    * 功能描述：历史数据转储
    * 创建时间:2016年6月1日上午10:32:10
    * 创建人: pengfei Zhao
    * @return JSONObject
   */
 @RequestMapping("/dumpHistoryforSurveyEntity.action")
 @ResponseBody
 public Map<String, Object> dumpHistoryforSurveyEntity(HttpServletRequest request,  
         HttpServletResponse response) throws IOException {  
	 try{
		 response.setHeader("Access-Control-Allow-Origin", "*");
		 String startDate="2016-01-01";
		 surveyChartsForSurveyEntityService.DeleteTable();
		 voteRecordService.dumpHistoryforSurveyEntity(startDate,new Date());
	   }catch(Exception ex){
		 ex.getStackTrace();
	  }
	return success("初始化成功"); 
 }
 /**
  * 方法名称：dumpHistoryforSurveyEntity
  * 功能描述：根据时间初始化部分历史数据转储
  * 创建时间:2016年6月1日上午10:32:10
  * 创建人: pengfei Zhao
  * @return JSONObject
 */
@RequestMapping("/dumpPartHistoryforSurveyEntity.action")
@ResponseBody
public Map<String, Object> dumpPartHistoryforSurveyEntity(HttpServletRequest request,  
       HttpServletResponse response,     
       @RequestParam(value="beginTime",required=false) String beginTime,
       @RequestParam(value="endTime",required=false) String endTime) throws IOException {  
	 try{
		 response.setHeader("Access-Control-Allow-Origin", "*");
		 surveyChartsForSurveyEntityService.DeleteTableForTime(beginTime,endTime);
		 SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		 if(beginTime.equals("")){
			 beginTime="2016-01-01";
		  }
		 if(endTime.equals("")){
			 endTime=sdf.format(new Date());
		 }
		 voteRecordService.dumpHistoryforSurveyEntity(beginTime,sdf.parse(endTime));
	   }catch(Exception ex){
		 ex.getStackTrace();
	  }
	return success("初始化成功"); 
}
}
第2级：SurveyController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.net.URLEncoder;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Map.Entry;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.activityManage.entity.ActionObject;
import com.guangfan.zxt.activityManage.entity.Activity;
import com.guangfan.zxt.activityManage.entity.ActivityObjectLink;
import com.guangfan.zxt.activityManage.entity.RewardActivity;
import com.guangfan.zxt.activityManage.service.ActionObjectService;
import com.guangfan.zxt.activityManage.service.ActivityObjectLinkService;
import com.guangfan.zxt.activityManage.service.ActivityService;
import com.guangfan.zxt.activityManage.service.RewardActivityService;
import com.guangfan.zxt.activityManage.service.RewardPrizeLinkService;
import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.common.entity.CObject;
import com.guangfan.zxt.common.service.CObjectService;
import com.guangfan.zxt.common.service.DistrictService;
import com.guangfan.zxt.contentmanage.entity.InfoNewsComment;
import com.guangfan.zxt.integralmanage.entity.Integral;
import com.guangfan.zxt.integralmanage.entity.IntegralOil;
import com.guangfan.zxt.membermanage.entity.EEnterpriseinfo;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.membermanage.service.EnterpriseInfoService;
import com.guangfan.zxt.membermanage.service.MembermanageService;
import com.guangfan.zxt.prizemanage.entity.PrizeInfo;
import com.guangfan.zxt.prizemanage.entity.WinPrizeInfo;
import com.guangfan.zxt.prizemanage.service.PrizeInfoService;
import com.guangfan.zxt.prizemanage.service.WinPrizeInfoService;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.IndustryEntitySurvey;
import com.guangfan.zxt.surveymanage.entity.Option;
import com.guangfan.zxt.surveymanage.entity.ParticipantFilter;
import com.guangfan.zxt.surveymanage.entity.Question;
import com.guangfan.zxt.surveymanage.entity.Survey;
import com.guangfan.zxt.surveymanage.entity.SurveyEvaluation;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;
import com.guangfan.zxt.surveymanage.entity.SurveyMerchant;
import com.guangfan.zxt.surveymanage.entity.SurveyPartakeUser;
import com.guangfan.zxt.surveymanage.entity.VoteRecord;
import com.guangfan.zxt.surveymanage.entity.VoteRecordPhone;
import com.guangfan.zxt.surveymanage.model.OptionVo;
import com.guangfan.zxt.surveymanage.model.QuestionVo;
import com.guangfan.zxt.surveymanage.model.SurveyVo;
import com.guangfan.zxt.surveymanage.service.EvaluationService;
import com.guangfan.zxt.surveymanage.service.IndustryEntityService;
import com.guangfan.zxt.surveymanage.service.IndustryEntitySurveyService;
import com.guangfan.zxt.surveymanage.service.OptionService;
import com.guangfan.zxt.surveymanage.service.ParticipantService;
import com.guangfan.zxt.surveymanage.service.QuestionService;
import com.guangfan.zxt.surveymanage.service.SurveyIndustryService;
import com.guangfan.zxt.surveymanage.service.SurveyMerchantService;
import com.guangfan.zxt.surveymanage.service.SurveyPartakeUserService;
import com.guangfan.zxt.surveymanage.service.SurveyService;
import com.guangfan.zxt.surveymanage.service.VoteRecordPhoneService;
import com.guangfan.zxt.surveymanage.service.VoteRecordService;
import com.guangfan.zxt.systemconfig.entity.QuestionDataSource;
import com.guangfan.zxt.systemconfig.service.QuestionDataSourceService;
import com.guangfan.zxt.systemconfig.service.SysObjectParameconfigService;
import com.guangfan.zxt.tagManage.entity.SNBase;
import com.guangfan.zxt.tagManage.entity.SNBatch;
import com.guangfan.zxt.tagManage.entity.SNBatchSurvey;
import com.guangfan.zxt.tagManage.service.TagSNBaseService;
import com.guangfan.zxt.tagManage.service.TagSNBatchService;
import com.guangfan.zxt.tagManage.service.TagSNBatchSurveyService;
import com.guangfan.zxt.util.DESEncryptUtil;
import com.guangfan.zxt.util.DataUtil;
import com.guangfan.zxt.util.DateUtil;
import com.guangfan.zxt.util.MyPaginationResult;
import com.guangfan.zxt.util.PropertiesFileUtil;

import dk.controller.BaseController;
import dk.model.RequestPage;
import dk.util.IdUtil;
import dk.util.MD5;

/**
 * @description 问卷调查控制类
 * @author 燕珂
 * @createtime 2014-3-11 上午11:18:43
 */
@Controller
@RequestMapping("/survey")
public class SurveyController extends BaseController {
	private static final Logger logger = Logger.getLogger(SurveyController.class);
	
	public static String SESSION_ID = null;
	
	private final String PREFIX = "surveymanage";
	
	/** cookie中记录是否投过票标识的键 */
	private static final String VOTE_FLAG_KEY = "vote_flag";
	
	/** 是否已投过票：投过 */
	public static final int VOTED_YES = 1;
	/** 是否已投过票：没投过 */
	public static final int VOTED_NO = 0;
	
	
	/** 查看投票结果：不允许 */
	public static final String SHOW_RESULT_NO = "0";
	/** 查看投票结果：投票后允许 */
	public static final String SHOW_RESULT_YES_VOTED = "1";
	/** 查看投票结果：允许 */
	public static final String SHOW_RESULT_YES = "2";
	
	@Resource
	private SurveyService surveyService;
	@Resource
	private QuestionService questionService;
	@Resource
	private OptionService optionService;
	@Resource
	private ParticipantService participantService;
	@Resource
	private VoteRecordService voteRecordService;
	@Resource
	private DistrictService districtService;
	@Resource
	private SysObjectParameconfigService sysObjectParameconfigService;
	@Resource
	private MembermanageService membermanageService;
	@Resource
	private TagSNBatchService tagSNBatchService;
	
	@Resource
	private VoteRecordPhoneService voteRecordPhoneService;
	
	@Resource
	private SurveyMerchantService surveyMerchantService;
	@Resource
	private QuestionDataSourceService questionDataSourceService;
	
	@Resource
	private EnterpriseInfoService enterpriseInfoService;
	@Resource
	private CObjectService cObjectService;
	@Resource
	private SurveyIndustryService surveyIndustryService;
	@Resource
	private IndustryEntityService industryEntityService;
	@Resource
	private SurveyPartakeUserService sueryPartakeService;
	@Resource
	private TagSNBaseService tagSNBaseService;
	@Resource
	private EvaluationService evaluationService;
	@Resource
	private PrizeInfoService prizeInfoService;
	@Resource
	private TagSNBatchSurveyService tagSNBatchSurveyService;
	@Resource
	private WinPrizeInfoService winPrizeInfoService;
	@Resource
	private ActionObjectService actionObjectService;
	@Resource
	private ActivityObjectLinkService activityObjectLinkService;
	@Resource
	private ActivityService activityService;
	@Resource
	private IndustryEntitySurveyService industryEntitySurveyService;
	@Resource
	private RewardActivityService rewardActivityService;
	@Resource
	private RewardPrizeLinkService rewardPrizeLinkService;
	/**
	 * 从电梯系统或加油站系统过来的请求先跳到质讯通这边一个中转页面，这样可以保证那边的链接地址是固定的（那边要生成二维码去贴，肯定不能变）
	 * 将来所有的变动都可以在这个中转页面进行处理
	 * 请求地址示例：http://localhost:8080/zxt/survey/transfer.action?objectType=dianti&objectId=123456&objectName=广告产业园
	 * @author 燕珂
	 */
	@RequestMapping("/transfer")
	public String transfer(@RequestParam(value="objectType",required=false) String objectType, @RequestParam(value="objectId",required=false) String objectId, @RequestParam(value="objectName",required=false) String objectName, @RequestParam(value="params",required=false) String params,HttpServletRequest request, Model model) {
		model.addAttribute("objectType", objectType);
		model.addAttribute("objectId", objectId);
		// 有的手机浏览器后面会自动加上个 jsessionid 参数，形如：http://localhost:8080/zxt/survey/transfer.action?objectType=dianti&objectId=123456&objectName=广告产业园;jsessionid=weresdfafsdf，需要把后面的截掉
		String obnab = objectName;
//		try {
//			objectName = new String(objectName.getBytes("ISO-8859-1"),"UTF-8");
//		} catch (UnsupportedEncodingException e) {
//			objectName = obnab;
//			e.printStackTrace();
//		}
		if (StringUtils.isNotBlank(objectName) && objectName.indexOf("jsessionid") != -1)
			objectName = objectName.substring(0, objectName.indexOf("jsessionid") - 1);
		model.addAttribute("objectName", objectName);
		Long industryId = 0L;
		
		// 对于从外部系统过来的实体，根据系统名称去配置文件中查找其所属行业的 id，存放在质讯通这边的实体信息，可以直接查出其所属行业
		if ("zhixuntong".equals(objectType)) {
			if (StringUtils.isNotBlank(objectId)) {
				EEnterpriseinfo enterprise = enterpriseInfoService.get(Long.parseLong(objectId));
				if (enterprise != null)
					industryId = Long.parseLong(enterprise.getCindcatcode());
			}
		} else {
//			PropertiesFileUtil propertiesFileUtil = new PropertiesFileUtil();
//			String industryIdStr = propertiesFileUtil.findValue(objectType);
			//之前都是在配置文件读取的，现在直接在类别表里面读取
			SurveyIndustry industry=surveyIndustryService.getSurveyIndustryByType(objectType);
			if(industry!=null){
				String industryIdStr=industry.getId().toString();
				industryId = Long.parseLong(industryIdStr);
			}
		}
		model.addAttribute("industryId", industryId);
		
		SurveyIndustry surveyIndustry = surveyIndustryService.get(industryId);
		if (surveyIndustry != null)	
			model.addAttribute("industryName", surveyIndustry.getText());
		if(StringUtils.isNotBlank(params)){
			String userId=DESEncryptUtil.decode("guangfan", params);
			model.addAttribute("newParams", userId);
		}
		return PREFIX + "/transfer";
	}
    /**
      * 方法名称：zxtTransfer
      * 功能描述：质讯通扫码页面
      * 创建时间:2016年1月20日下午5:35:34
      * 创建人: pengfei Zhao
      * @param @param entityId
      * @param @param SNId
      * @param @param request  http://127.0.0.1:8080/zxt/survey/zxtTransfer.action?entityId=37&SNId=0c892e3649334c71a5b7c9566ab3088b
      * @return String
     */
	@RequestMapping("/zxtTransfer")
	public String zxtTransfer(@RequestParam(value="entityId",required=false) String entityId, 
			@RequestParam(value="SNId",required=false) String SNId, 
			@RequestParam(value="params",required=false) String params,
			@RequestParam(value="surveyIndustryId",required=false) String surveyIndustryId, 
			HttpSession session, HttpServletRequest request, Model model) {
		model.addAttribute("entityId", entityId);
		IndustryEntity entity = new IndustryEntity();
		if(StringUtils.isNotBlank(entityId)){
			entity = industryEntityService.get(Long.valueOf(entityId));
			model.addAttribute("address", entity.getAddress());
			model.addAttribute("status", entity.getCauditstatus());
			model.addAttribute("foundtime", entity.getFoundtime().toString().substring(0, 10));
			model.addAttribute("entityName", entity.getEntityName());
			model.addAttribute("entityType", entity.getEntityType());
			model.addAttribute("linkman", entity.getLinkMan());
			model.addAttribute("linkphone", entity.getLinkPhone());
			model.addAttribute("otherId", entity.getOtherId());
			String dname="";
			if(StringUtils.isNotEmpty(entity.getCdistrictcode())){
				dname = districtService.getDistrictByCode(entity.getCdistrictcode()).get(0).getDistrictName();
			}
			model.addAttribute("districtName", dname);
			CObject cobject = cObjectService.get(Long.valueOf(entity.getObjectId()));
			model.addAttribute("objectType", cobject.getObjectType());
			model.addAttribute("objectId", cobject.getObjectId());
			//model.addAttribute("objectName", cobject.getObjectName());
			String objectName = cobject.getObjectName();
			if (StringUtils.isNotBlank(objectName) && objectName.indexOf("jsessionid") != -1){
				objectName = objectName.substring(0, objectName.indexOf("jsessionid") - 1);
			}
			model.addAttribute("objectName", objectName);
		}
		
		// 有的手机浏览器后面会自动加上个 jsessionid 参数，形如：http://localhost:8080/zxt/survey/transfer.action?objectType=dianti&objectId=123456&objectName=广告产业园;jsessionid=weresdfafsdf，需要把后面的截掉
		if (StringUtils.isNotBlank(params) && params.indexOf("jsessionid") != -1)
			params = params.substring(0, params.indexOf("jsessionid") - 1);
		Long industryId = 0L;
		if(StringUtils.isNotBlank(params)){
			model.addAttribute("newParams", params);
			String userId=DESEncryptUtil.decode("guangfan", params);
			model.addAttribute("userId", userId);
		}
		
		if(StringUtils.isNotBlank(SNId)){
			boolean isexit=tagSNBaseService.getSNBySNId(SNId);
			if(isexit){
				//yyf********20160415****************************add*****begin
				PropertiesFileUtil propertiesFileUtil = new PropertiesFileUtil();
				String zxt_manage_service_path = propertiesFileUtil.findValue("zxt_manage_service_path");
				SNBase snb = tagSNBaseService.get(SNId);
				model.addAttribute("snCode", snb.getSn());
				model.addAttribute("zxt_manage_service_path", zxt_manage_service_path);
				//yyf************************************add*****end
				return "error/Snerror";
			}else{
				model.addAttribute("SNId", SNId);
				session.setAttribute("SNId", SNId);
			}
		}else{
			session.removeAttribute("SNId");//20160330 yf add
		}
		
		//yf 20160304 add
		String surveyId = "";
		if(StringUtils.isNotBlank(surveyIndustryId)){
			//获取行业类型ID 获取行业类别 yf 20160321 yf add
			SurveyIndustry surveyIndustry = surveyIndustryService.get(Long.valueOf(surveyIndustryId));
			model.addAttribute("objectType", surveyIndustry.getObjectType());
			model.addAttribute("objectId", "");
			model.addAttribute("objectName", "");
			surveyId = null != surveyIndustry.getSurveyId()?surveyIndustry.getSurveyId().toString():"";
		}
		
			
		if(entity.getSurveyId()!=null&&!entity.getSurveyId().equals("")){
			surveyId = entity.getSurveyId().toString();
		}
		
		if(StringUtils.isNotBlank(SNId)){
			SNBase snBase = tagSNBaseService.get(SNId);
			List<SNBatchSurvey> res = tagSNBatchSurveyService.getSNBatchSurveyByBatch(snBase.getSnBatchId());
			if(null != res && res.size() >= 1){
				SNBatchSurvey snBatchSurvey = res.get(0);
				surveyId = snBatchSurvey.getSurveyId();
			}else{
				surveyId = "";
			}
		}

		model.addAttribute("surveyId", surveyId);
		
		//如果 行业类型id不为空时跳转到  zxtTransfer2界面   不需要显示行业实体信息yf 20160321 add
		if(StringUtils.isNotBlank(surveyIndustryId) && (null == entity.getSurveyId() || 
													(null != entity.getSurveyId() && "".equals(entity.getSurveyId().toString())))){
			return PREFIX + "/zxtTransfer2";
		}
		
		return PREFIX + "/zxtTransfer";
	}
	/**
	  * 方法名称：surveryResultList
	  * 功能描述：后台页面调用跳转，问卷结果列表页面
	  * 请求地址示例：http://localhost:8080/zxt/survey/surveryResultList.action?objectType=205&objectId=1&objectName=紫金山加油站
	  * 创建时间:2015年12月24日上午9:30:19  从后台过来objectType直接是ID
	  * 创建人: pengfei Zhao
	  * @return String
	 * @throws UnsupportedEncodingException 
	 */
	@RequestMapping("/surveryResultList")
	public String surveryResultList(@RequestParam(value="objectType",required=false) String objectType, @RequestParam(value="objectId",required=false) String objectId, @RequestParam(value="objectName",required=false) String objectName, HttpServletRequest request, Model model) throws UnsupportedEncodingException {
		model.addAttribute("objectType", objectType);
		model.addAttribute("objectId", objectId);
		// 有的手机浏览器后面会自动加上个 jsessionid 参数，形如：http://localhost:8080/zxt/survey/transfer.action?objectType=dianti&objectId=123456&objectName=广告产业园;jsessionid=weresdfafsdf，需要把后面的截掉
		if (StringUtils.isNotBlank(objectName) && objectName.indexOf("jsessionid") != -1)
			objectName = objectName.substring(0, objectName.indexOf("jsessionid") - 1);
		//objectName = new String(objectName.getBytes("ISO-8859-1"),"UTF-8");
		objectName=URLDecoder.decode(objectName, "UTF-8");
		model.addAttribute("objectName", objectName);
		Long industryId = 0L;
		industryId = Long.parseLong(objectType);
		SurveyIndustry surveyIndustry = surveyIndustryService.get(industryId);
		if (surveyIndustry != null){
			industryId=surveyIndustry.getId();
			model.addAttribute("industryName", surveyIndustry.getText());
		}	
		model.addAttribute("industryId", industryId);
		return PREFIX + "/surveryResultlist";
	}
	/**
	 * 功能描述：进入到"问卷调查"页面
	 * 创建时间:2013-11-18下午4:34:31
	 * 创建人: 燕珂
	 * 
	 * @return
	 */
	@RequestMapping("/toSurveyList")
	public String toSurveyList(){
		return PREFIX + "/surveyList";
	}
	
	/**
	 * 功能描述：进入到"问卷调查"页面 V2.0
	 * 创建时间:2015-8-31下午4:34:31
	 * 创建人: 燕珂
	 */
	@RequestMapping("/list")
	public String toList(Model model){
		List<Survey> hotSurveyList = surveyService.getHotSurveyList();
		model.addAttribute("hotSurveyList", hotSurveyList);
		return PREFIX + "/list";
	}
	
	/**
	 * 功能描述：进入到"问卷列表"页面 V2.0
	 * 创建时间:2015-8-31下午4:34:31
	 * 创建人: 燕珂
	 */
	@RequestMapping("/list4Weixin")
	public String toList4Weixin(Model model){
		List<Survey> hotSurveyList = surveyService.getHotSurveyList();
		model.addAttribute("hotSurveyList", hotSurveyList);
		return PREFIX + "/list4Weixin";
	}
	
	/**
	 * 功能描述：加载问卷调查列表数据
	 * 创建时间:2013-11-18下午4:35:57
	 * 创建人: 燕珂
	 * 
	 * @param request
	 * @return
	 */
	@RequestMapping("/listSurvey")
	@ResponseBody
	public MyPaginationResult listSurvey(HttpServletRequest request, @RequestParam(value="industryId",required=false) Long industryId, @RequestParam(value="isShow",required=false) String isShow){
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return surveyService.datagrid(page, industryId, isShow); // 加载当前实体对象所属行业的问卷列表
	}
	
	/**
	 * 功能描述：进入到"问卷调查结果展示"页面
	 * 创建时间:2015-9-18下午4:34:31
	 * 创建人: 燕珂
	 */
	@RequestMapping("/publicity")
	public String publicity(Model model){
		return PREFIX + "/publicity";
	}
	
	//*********************************用户投票以及投票结果显示**************************************************
	
	/**
	 * 功能描述：进入某问卷的投票页面【展现表格 和 获取投票信息】
	 * 创建时间:2013-11-19下午4:20:45
	 * 创建人: 燕珂
	 * 支撑所有实体都存在质讯通数据库里的情况
	 * 请求地址示例：http://localhost:8080/zxt/survey/toVotePage.action?id=302&relationObjectType=jiayouzhan&relationObjectId=888
	 * 
	 * @param surveyId 问卷ID
	 * @param request
	 * @param model
	 * @param merchantName 商铺名称
	 * @return
	@RequestMapping("/toVotePage")
	public String toVotePage(@RequestParam("id") Long surveyId,@RequestParam(value="relationObjectType",required=false) String relationObjectType,@RequestParam(value="relationObjectId",required=false) Long relationObjectId, HttpServletRequest request, Model model,@RequestParam(value="name",required=false,defaultValue="") String merchantName){
		request.setAttribute("relationObjectType", relationObjectType);
		request.setAttribute("relationObjectId", relationObjectId);
		
		if (relationObjectId != null && relationObjectId > 0)
			model.addAttribute("relationObjectName", enterpriseInfoService.get(relationObjectId) != null ? enterpriseInfoService.get(relationObjectId).getCenterprisename() : "未知");
		
		//获取用户ID
		HttpSession session=request.getSession();
		//此处的用户Id是通过手机客户端访问调查问卷的时候传过来的值，通过网站访问则没有传值
		String userId=request.getParameter("userId");
		MMember m=null;
		if(StringUtils.isNotBlank(userId)){//UserId不为空，说明手机客户端登录成功
			m=membermanageService.findByUserId(Long.parseLong(userId));
			session.setAttribute("currentUser", m);
			session.setAttribute("userId", m.getNmemberid());
			//手机客户端访问问卷时产生的sessionId，保存到静态变量里，为了手机客户端退出时通过这个sessionId找到session对象，并清除它
			SESSION_ID = session.getId();
			logger.debug(" "+SESSION_ID);
		}
		// 获取问卷设置
		Map<String, Long> objectSetMap = sysObjectParameconfigService.getObjectSetById("S_SURVEY", "问卷设置类", surveyId);
		model.addAttribute("objectSetMap", objectSetMap);
		
		// add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   begin 
		Properties props=System.getProperties(); //获得系统属性集    
		String osName = props.getProperty("os.name"); //操作系统名称  
		logger.debug(osName);
		if(!DataUtil.isEmpty(merchantName) && !"null".equals(merchantName)){
			String newName;
			try {
				if("Linux".equals(osName)){
					
				}else{
					newName = new String(merchantName.getBytes("ISO-8859-1"), "UTF-8");
					merchantName = URLDecoder.decode(newName, "UTF-8");
				}
				model.addAttribute("merchantName",merchantName);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		// add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   end 
		
		//判断是否已经投过票
		Cookie cookies[] = request.getCookies();
		if(cookies != null && cookies.length > 0){
			for (Cookie cookie : cookies) {
				if(VOTE_FLAG_KEY.equals(cookie.getName())){
					if(participantService.findByCookie(cookie.getValue(), surveyId)>0){
						model.addAttribute("voteEd", "Ed");
						model.addAttribute("chickCss", "ve");
					}
				}
			}
		}
		
		Survey survey = surveyService.get(surveyId);
		if(survey == null){
			// 根据ID未查出数据,返回指定错误页面;
			return PREFIX+"/ERROR";
		}
		
		model.addAttribute("survey", assembleValidSurvey(surveyId));
		return PREFIX+"/votePage";
	}
	*/
	
	/**
	 * 支撑电梯及加油站问卷调查（实体信息存在其他系统里）
	 * 请求地址示例：http://localhost:8080/zxt/survey/toVotePage.action?id=302&objectType=dianti&objectId=123456&objectName=%E5%B9%BF%E5%91%8A%E4%BA%A7%E4%B8%9A%E5%9B%AD
	 * 后面的中文是：广告产业园
	 */
	@RequestMapping("/toVotePage")
	public String toVotePage(@RequestParam("id") Long surveyId,@RequestParam(value="objectType",required=false) String objectType,@RequestParam(value="objectId",required=false) String objectId,@RequestParam(value="objectName",required=false) String objectName,@RequestParam(value="newParams",required=false) String newParams, HttpServletRequest request, Model model,@RequestParam(value="name",required=false,defaultValue="") String merchantName){
		request.setAttribute("objectType", objectType);
		request.setAttribute("objectId", objectId);
		String objectNameBak = objectName;
		HttpSession session=request.getSession();
//		try {
//			objectName = new String(objectName.getBytes("ISO-8859-1"),"UTF-8");
//		} catch (UnsupportedEncodingException e1) {
//			objectName = objectNameBak;
//			e1.printStackTrace();
//		}
		String snId=(String) session.getAttribute("SNId");
		/*
		if(StringUtils.isNotBlank(snId)){
			request.setAttribute("wapType", "saoma");
			if(objectName==null){
				request.setAttribute("wapType", "wangzhan");
			}
		}else{
			request.setAttribute("wapType", "wangzhan");
		}yyf20160617  注释掉 增加新逻辑*/
		/** 20160617 yyf add **活动部分** begin***/
		//根据外系统id获取本系统行业实体id
		IndustryEntity induEntity = industryEntityService.findIndustryEntityIdByObjectId(objectId);
		if(null != induEntity && null != induEntity.getId() && !"".equals(induEntity.getId().toString())){//说明此问卷对象是行业实体
			//先判断当前行业实体是否参与活动
			ActivityObjectLink aol1 = null;
			//获取行业实体问卷中间表(s_industryentitysurvey)的id
			IndustryEntitySurvey ies = industryEntitySurveyService.getLinkIdByParam(induEntity.getId(), surveyId);
			if(ies!=null){
				//根据条件获取有效的活动对象信息
				aol1 = activityObjectLinkService.findValidActivityObjectLink(ies.getId(), induEntity.getId(),"1");//1表示作用对象是行业实体
			}
			SNBase snb = new SNBase();
			if(StringUtils.isNotBlank(snId)){
				snb =  tagSNBaseService.get(snId);
			}
			//再判断标签批次是否参与了活动
			ActivityObjectLink aol2 = null;
			if(StringUtils.isNotBlank(snb.getId())){//说明作用对象是标签批次
				//获取本标签的批次
				String batchId = snb.getSnBatchId();
				//根据标签批次获取标签批次问卷中间表(tag_snbatchsurvey)的id
				if(StringUtils.isNotBlank(batchId)&&surveyId!=null){
					SNBatchSurvey sns = tagSNBatchSurveyService.getSNBatchSurveyByBatchAndSurveyId(batchId,surveyId);
					//获取作用对象
					if(sns!=null){
						//根据条件获取有效的活动对象信息
						aol2 = activityObjectLinkService.findValidActivityObjectLink(sns.getId(), induEntity.getId(),"2");//2表示作用对象是标签批次
					}
				}
			}
			//获取活动id
			Long activityId = null;
			String activityType = "";
			if(aol1!=null){
				activityId = aol1.getActivityId();
				Activity act = activityService.get(activityId);
				activityType = act.getActivityType();
			}
			//由于标签批次的优先级比行业实体高所以如果标签批次也参与了活动，则覆盖行业实体的数据
			if(aol2!=null){
				activityId = aol2.getActivityId();
				Activity act = activityService.get(activityId);
				activityType = act.getActivityType();
			}
			model.addAttribute("activityId", activityId);
			model.addAttribute("activityType", activityType);
			if(StringUtils.isNotBlank(activityType)&&activityId!=null){
				model.addAttribute("hasActivityflag", "yes");//当前实体有活动
				if(activityType.equals(SystemCommon_Constant.ACTIVITY_TYPE_2)){
					//如果是奖励活动判断奖励活动的奖品是否充足，并将已经选完的奖品不再下拉选中显示
					//yyfGetPrizeList  20160622 add
					RewardActivity ra = rewardActivityService.findRewardActivityIdByPid(activityId);
					if(ra!=null){
						//获取奖励活动关联的奖品
						List<PrizeInfo> prizeList = prizeInfoService.findActivityPrizeByRewardId(ra.getId());
						if(prizeList.size()==0){
							model.addAttribute("hasActivityflag", "");//没有了奖品活动名义上还在进行其实已经结束
							model.addAttribute("activityType", "");//奖品已经抽完
						}
						model.addAttribute("prizeList", prizeList);
					}
					
				}
			}else{
				model.addAttribute("activityId", "");
				model.addAttribute("activityType", "");
				model.addAttribute("hasActivityflag", "no");//当前实体无活动
			}
		}
		/** 20160517 yyf add **活动部分** end***/
		
		
		//yf 20160304 add
		if (StringUtils.isNotBlank(objectName) && objectName.indexOf("jsessionid") != -1){
			objectName = objectName.substring(0, objectName.indexOf("jsessionid") - 1);
		}
		request.setAttribute("objectName", objectName);
		request.setAttribute("newParams", newParams);
		//获取用户ID
	
		//此处的用户Id是通过手机客户端访问调查问卷的时候传过来的值，通过网站访问则没有传值
		String userId=request.getParameter("newParams");
		//yf 20160419 add
		if (StringUtils.isNotBlank(userId) && userId.indexOf("jsessionid") != -1){
			userId = userId.substring(0, userId.indexOf("jsessionid") - 1);
		}
		MMember m=null;
		if(StringUtils.isNotBlank(userId)){//UserId不为空，说明手机客户端登录成功
			m=membermanageService.findByUserId(Long.parseLong(userId));
			session.setAttribute("userId", m.getNmemberid());
			//手机客户端访问问卷时产生的sessionId，保存到静态变量里，为了手机客户端退出时通过这个sessionId找到session对象，并清除它
			SESSION_ID = session.getId();
			logger.debug(" "+SESSION_ID);
		}
		model.addAttribute("member", m);
		// 获取问卷设置
		Map<String, Long> objectSetMap = sysObjectParameconfigService.getObjectSetById("S_SURVEY", "问卷设置类", surveyId);
		model.addAttribute("objectSetMap", objectSetMap);
		
		/** add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   begin */
		Properties props=System.getProperties(); //获得系统属性集    
		String osName = props.getProperty("os.name"); //操作系统名称  
		logger.debug(osName);
		if(!DataUtil.isEmpty(merchantName) && !"null".equals(merchantName)){
			String newName;
			try {
				if("Linux".equals(osName)){
					
				}else{
					newName = new String(merchantName.getBytes("ISO-8859-1"), "UTF-8");
					merchantName = URLDecoder.decode(newName, "UTF-8");
				}
				model.addAttribute("merchantName",merchantName);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		/** add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   end */
		
		//判断是否已经投过票
		Cookie cookies[] = request.getCookies();
		if(cookies != null && cookies.length > 0){
			for (Cookie cookie : cookies) {
				if(VOTE_FLAG_KEY.equals(cookie.getName())){
					if(participantService.findByCookie(cookie.getValue(), surveyId)>0){
						model.addAttribute("voteEd", "Ed");
						model.addAttribute("chickCss", "ve");
					}
				}
			}
		}
		
		Survey survey = surveyService.get(surveyId);
		if(survey == null){
			// 根据ID未查出数据,返回指定错误页面;
			return PREFIX+"/ERROR";
		}
		model.addAttribute("survey", assembleValidSurvey(surveyId));
/*		if(StringUtils.isNotBlank(objectType) && StringUtils.isNotBlank(objectName) && StringUtils.isNotBlank(objectId)){//添加 objectid 非空校验  20160421 yf add
			Long cobjectId=cObjectService.getCobjectId(objectType, objectName);
			IndustryEntity induEntity = industryEntityService.getEntityByobjectId(cobjectId.toString());
			List<PrizeInfo> prizeList=prizeInfoService.getAllPrizeInfo(induEntity.getEntityCategory());
			model.addAttribute("prizeList", prizeList);
		}  奖励活动的奖品现已可定制，所以此处的代码注释 yyf 20160622 add 此处逻辑迁移至【yyfGetPrizeList】*/
		//*********************yyf 20160517 add 问卷调查页面进行缺陷信息采集*****begin*******************************************
		PropertiesFileUtil propertiesFileUtil = new PropertiesFileUtil();
		if(StringUtils.isBlank(objectType)){
			Long industryId = survey.getIndustryid();
			SurveyIndustry si =surveyIndustryService.get(industryId);
			if(si!=null){
				objectType = si.getObjectType();
			}
		}
		model.addAttribute("objectType", objectType);
		String car_url=propertiesFileUtil.findValue("car_url");
		String other_url =propertiesFileUtil.findValue("other_url");
		model.addAttribute("car_url", car_url);
		model.addAttribute("other_url", other_url);
		//*********************yyf 20160517 add *****end*********************************************
		//20160620 yyf add
		String zxt_manage_service_path = propertiesFileUtil.findValue("zxt_manage_service_path");
		model.addAttribute("zxt_manage_url", zxt_manage_service_path);
		model.addAttribute("SNId", snId);
		SimpleDateFormat sdf=new SimpleDateFormat("yyyy-MM-dd");
		String oildate = sdf.format(new Date());
		model.addAttribute("oilDate",oildate);
		return PREFIX+"/votePage";
	}
	/**
	 * 跳转缺陷信息采集页面
	 */
	@RequestMapping("/toCollectInfoPage")
	public String toCollectInfoPage(@RequestParam("url") String url,HttpServletRequest request, Model model){
		model.addAttribute("collect_url", url);

		return PREFIX+"/collectInfoPage";
	}
	
	/**
	 * 功能描述：组合问卷数据<br>
	 * 			【根据问卷ID获取问卷信息、问题信息列表及选项信息列表数据（只显示启用状态下的数据）】
	 * 创建时间:2013-11-19下午3:22:06
	 * 创建人: 燕珂
	 * 
	 * @param surveyId
	 * @return
	 */
	private SurveyVo assembleValidSurvey(Long surveyId){
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
//		surveyVo.setId(survey.getId());
//		surveyVo.setSubject(survey.getSubject());
//		surveyVo.setDescription(survey.getDescription());
		//wj.setShowResult(survey.getShowResult());
		//surveyVo.setBegintime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getBegintime()));
		//surveyVo.setEndtime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getEndtime()));
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				List<Option> optionList= optionService.listOption(question.getId());
				// 先算出该问题下所有选项的总票数
				int itemsTotalNum = 0;
//				for (Option item : optionList) {
//					itemsTotalNum = itemsTotalNum + item.getNum();
//				}
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		return surveyVo;
	}
	
	/**
	 * 20160120 yyf add  后台显示问卷详情信息使用
	 * 支撑电梯及加油站问卷调查（实体信息存在其他系统里）
	 * 请求地址示例：http://localhost:8080/zxt/survey/toVotePage.action?id=302&objectType=dianti&objectId=123456&objectName=%E5%B9%BF%E5%91%8A%E4%BA%A7%E4%B8%9A%E5%9B%AD
	 * 后面的中文是：广告产业园
	 */
	@RequestMapping("/toVotePageDetail")
	public String toVotePageDetail(HttpServletRequest request, Model model,
			@RequestParam("id") Long surveyId,
			@RequestParam(value="objectType",required=false) String objectType,
			@RequestParam(value="objectId",required=false) String objectId,
			@RequestParam(value="objectName",required=false) String objectName,
			@RequestParam(value="surveyPartakeUserId",required=true) Long surveyPartakeUserId,
			@RequestParam(value="name",required=false,defaultValue="") String merchantName){
		request.setAttribute("objectType", objectType);
		request.setAttribute("objectId", objectId);
		String objectNameBak = objectName;
//		try {
//			objectName = new String(objectName.getBytes("ISO-8859-1"),"UTF-8");
//		} catch (UnsupportedEncodingException e1) {
//			objectName = objectNameBak;
//			e1.printStackTrace();
//		}		
		request.setAttribute("objectName", objectName);
		SurveyPartakeUser partakeUser = sueryPartakeService.get(surveyPartakeUserId);
		model.addAttribute("member", partakeUser);
		// 获取问卷设置
		Map<String, Long> objectSetMap = sysObjectParameconfigService.getObjectSetById("S_SURVEY", "问卷设置类", surveyId);
		model.addAttribute("objectSetMap", objectSetMap);
		
		/** add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   begin */
		Properties props=System.getProperties(); //获得系统属性集    
		String osName = props.getProperty("os.name"); //操作系统名称  
		logger.debug(osName);
		if(!DataUtil.isEmpty(merchantName) && !"null".equals(merchantName)){
			String newName;
			try {
				if("Linux".equals(osName)){
					
				}else{
					newName = new String(merchantName.getBytes("ISO-8859-1"), "UTF-8");
					merchantName = URLDecoder.decode(newName, "UTF-8");
				}
				model.addAttribute("merchantName",merchantName);
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
		}
		/** add by YangHui 2014-10-14       问卷需要调用地图查找商户或手动输入商户   end */
		
		//判断是否已经投过票
		Cookie cookies[] = request.getCookies();
		if(cookies != null && cookies.length > 0){
			for (Cookie cookie : cookies) {
				if(VOTE_FLAG_KEY.equals(cookie.getName())){
					if(participantService.findByCookie(cookie.getValue(), surveyId)>0){
						model.addAttribute("voteEd", "Ed");
						model.addAttribute("chickCss", "ve");
					}
				}
			}
		}
		
		Survey survey = surveyService.get(surveyId);
		if(survey == null){
			// 根据ID未查出数据,返回指定错误页面;
			return PREFIX+"/ERROR";
		}
			model.addAttribute("survey", assembleValidSurveyForReadOnly(surveyId,surveyPartakeUserId));
		return PREFIX+"/votePageDetail";
	}
	/**
	 * 功能描述：组合问卷数据<br>
	 * 			【根据问卷ID获取问卷信息、问题信息列表及选项信息列表数据（只显示启用状态下的数据）】
	 * 创建时间:2016-01-20
	 * 创建人: yyf 查看问卷详情信息使用
	 * 
	 * @param surveyId
	 * @return
	 */
	private SurveyVo assembleValidSurveyForReadOnly(Long surveyId,Long surveyPartakeUserId){
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				//****20160126 yyf add*********begin*******
				String qusType = question.getQuestiontype();
				
				if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN.equals(qusType)
						||SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN_INPUT.equals(qusType)
						||SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN_TEXTAREA.equals(qusType)){
					List<VoteRecord> vrList= voteRecordService.getVoteRecordListByOptionId(question.getId(), surveyId, surveyPartakeUserId," 1=1 ");
					//开放题
					OptionVo optionVo = new OptionVo();
					if(vrList.size()>0){
						VoteRecord vr = vrList.get(0);
						optionVo.setAnswerText(vr.getAnswercontent());
						questionVo.add(optionVo, "");
					}
				}
				//****20160126 yyf add**********end********
				List<Option> optionList= optionService.listOption(question.getId());
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						//20160119 yyf add *************begin********************
						String optionStr = "a.option1id="+optionVo.getId();
						List<VoteRecord> vrList= voteRecordService.getVoteRecordListByOptionId(question.getId(), surveyId, surveyPartakeUserId,optionStr);
						if(vrList.size()>0){
							if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT_RADIO.equals(qusType)
									||SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT_CHECK.equals(qusType)
									||SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(qusType)){
								//选择题-单选题或多选题或打分题
									optionVo.setAnswerText(option.getOptionText());
							}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SORT.equals(qusType)){
								//排序题
								Long option2id = vrList.get(0).getOption2id();
								optionVo.setAnswerText(option2id+"");
							}else{
								Long option2id = vrList.get(0).getOption2id();
								Option option2 = optionService.get(option2id);
								if(option2!=null)
									optionVo.setAnswerText(option2.getOptionText());
							}
						}
						//20160119 yyf add **************end*********************

						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		return surveyVo;
	}
	
	/**
	 * 功能描述：通过Cookie检查某个问卷是否被当前用户投过票，如果投过票，需要添加两个属性，以使页面上的元素显示
	 * 创建时间:2013-11-20上午9:41:48
	 * 创建人: 燕珂
	 * 
	 * @param surveyId
	 * @param request
	 * @param model
	 */
	private void votedCheckByCookie(Long surveyId, HttpServletRequest request, Model model){
		//判断是否已经投过票
		Cookie cookies[] = request.getCookies();
		if(cookies != null && cookies.length > 0){
			for (Cookie cookie : cookies) {
				if(VOTE_FLAG_KEY.equals(cookie.getName())){
					if(participantService.findByCookie(cookie.getValue(), surveyId)>0){
						// 添加两个样式属性（voteEd表示已投过票， chickCss表示是否显示投票结果）
						model.addAttribute("voteEd", "Ed");
						model.addAttribute("chickCss", "ve");
					}
				}
			}
		}
	}
	
	/**
	 * 功能描述：用户对问卷进行投票
	 * 创建时间:2013-11-19下午4:51:13
	 * 创建人: 燕珂
	 * 
	 * @param qnId
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	@RequestMapping("/voteQuestionnaire")
	public String voteQuestionnaire(@RequestParam("qnId") Long qnId,HttpServletRequest request,HttpServletResponse response,Model model){
		// 第一部分是进行投票检查
		String checkResult = permitCheck(qnId,request,response,model);
		if(checkResult != null){
			model.addAttribute("checkedVote", checkResult);
			model.addAttribute("voteError", "请选择正确的投票个数！");
			
			votedCheckByCookie(qnId, request, model);
			model.addAttribute("vote", assembleValidSurvey(qnId));
			return PREFIX+"/votePage";
		}
		
		// 第二部分就是保存投票结果
		Enumeration<String> names = request.getParameterNames();
		List<String> optionList = new ArrayList<String>();
		Map<String,Integer> map = new HashMap<String,Integer>();
		while(names.hasMoreElements()){
			String paramName = names.nextElement();
			if(paramName.startsWith("sCheck_")){
				//从索引7往后截取,获取选项Id
				String id = paramName.substring(7);
				//获取paramName的值 
				String [] vals = request.getParameterValues(paramName);
				for(String itemId:vals){
					optionList.add(itemId);
				}
				map.put(id, vals.length);
			}
		}
		//更新选项
		String where = " id='"+StringUtils.join(optionList, "' or id='")+"' ";
		optionService.updateWhere(where);
		//更新问题
		for(Entry<String,Integer> entry:map.entrySet()){
			String questionIdStr = entry.getKey();
			questionService.updateQuestionNum(Long.valueOf(questionIdStr), entry.getValue());
		}
		
		// 第三部分，能够进行到这里，说明投票结果已经写入数据库了，那么下面就增加一些属性，用于投票后页面数据的展示
		
		// 添加两个样式属性（voteEd表示已投过票， chickCss表示是否显示投票结果）
		model.addAttribute("voteEd", "Ed");
		model.addAttribute("chickCss", "ve");
		model.addAttribute("vote", assembleValidSurvey(qnId));
		return PREFIX+"/votePage";
	}
	
	/**
	 * 功能描述：判断用户选择的选项是否符合要求
	 * 创建时间:2013-11-19下午4:32:30
	 * 创建人: 燕珂
	 * 
	 * @param qnId 问卷ID
	 * @param request
	 * @param response
	 * @param model
	 * @return
	 */
	private String permitCheck(Long qnId,HttpServletRequest request,HttpServletResponse response, Model model){
		//****************************************
		// 判断该投票是不是需要登录投票
		//****************************************
		MMember mber = (MMember) request.getSession().getAttribute("currentUser");
		if(SystemCommon_Constant.VOTE_LOGIN.equals(surveyService.voteNeedLogin(qnId)) && (mber == null)){
			return "请登录后投票！";
		}
		
		//****************************************
		// 判断投票是否已开始或者已结束
		//****************************************
		Survey survey = surveyService.get(qnId);
		Date nowDate = new Date();
		java.text.DateFormat df=new java.text.SimpleDateFormat("yyyy-MM-dd");
		Calendar cBegin = Calendar.getInstance();
		Calendar cEnd = Calendar.getInstance();
		Calendar cNow = Calendar.getInstance();
		cBegin.setTime(survey.getBegintime());
		cEnd.setTime(survey.getEndtime());
		try {
			cNow.setTime(df.parse(DateUtil.formatDateTime(nowDate)));
		} catch (ParseException e) {
			e.printStackTrace();
			return "日期转换错误";
		}
		//beginTimeFromNow==0表示cNow和cBegin相等,
		//beginTimeFromNow<0表示cNow小于cBegin,
		//beginTimeFromNow>0表示cNow大于cBegin
		int beginTimeFromNow = cNow.compareTo(cBegin);
		int endTimeFromNow = cNow.compareTo(cEnd);
		if(beginTimeFromNow < 0){
			return "投票还未开始，请继续关注。";
		}
		if(endTimeFromNow > 0){
			return "投票已结束！";
		}
		
		//****************************************
		// 是否有问题没有投票的判断
		//****************************************
		Enumeration<String> paramNames = request.getParameterNames();
		// 存放问题ID及其下被选中的选项的个数
		Map<String, Integer> questionIdAndOptionsNumMap = new HashMap<String, Integer>();
		while(paramNames.hasMoreElements()){
			String paramName = paramNames.nextElement();
			if(paramName.startsWith("sCheck_")){
				String questionIdTemp = paramName.substring(7);
				// 某问题下被选中的选项ID数组
				String[] checkedOptions = request.getParameterValues(paramName);
				questionIdAndOptionsNumMap.put(questionIdTemp, checkedOptions.length);
			}
		}
		
		List<Question> questionList = questionService.listQuestion(qnId);
		// 禁用的问题个数
		int invalidQuestionNum = 0;
		for (Question question : questionList) {
			if(SystemCommon_Constant.VALID_STATUS_0.equals(question.getValid())){
				invalidQuestionNum += 1;
			}
		}
		if (questionIdAndOptionsNumMap.size() < (questionList.size() - invalidQuestionNum)){
			return "您有选项未投票，请完善。";
		}
		
		//****************************************
		// 每个问题能投多少票【即：能选多少个选项】的判断
		//****************************************
		for(Entry<String, Integer> entry : questionIdAndOptionsNumMap.entrySet()){
			for(Question question : questionList){
//				if(question.getId().equals(entry.getKey()) && question.getChoiceMax()<0 && Math.abs(question.getChoiceMax()) != entry.getValue())
//				{
//					model.addAttribute("errorId", entry.getKey());
//					questionIdAndOptionsNumMap.clear();
//					questionList.clear();
//					return "投票个数不正确！";
//				}
//				if(question.getId().equals(entry.getKey()) && question.getChoiceMax() < entry.getValue() && question.getChoiceMax() > 0)
//				{
//					model.addAttribute("errorId", entry.getKey());
//					questionIdAndOptionsNumMap.clear();
//					questionList.clear();
//					return "请按提示进行投票！";
//				}
			}
		}
		questionIdAndOptionsNumMap.clear();
		questionList.clear();
		//投票数量正常
		
		//****************************************
		// 最后进行恶意刷票的检查
		//****************************************
		if(badVote(request,response,qnId) == VOTED_YES){
			return "您已参加过投票，请不要重复投票！";
		}
		
		return null;
	}
	
	/**
	 * 功能描述：恶意刷票的校验
	 * 创建时间:2013-11-13下午2:07:35
	 * 创建人: 燕珂
	 * 
	 * @param request
	 * @param response
	 * @param qnId 问卷ID
	 * @return 返回1，则表示之前投过票；返回其他值则表示没有投过票
	 */
	private int badVote(HttpServletRequest request,HttpServletResponse response, Long qnId){
		
		//****************************************
		// 先进行Cookie的检查
		//****************************************
		Cookie cookies[] = request.getCookies();
		if(cookies == null || cookies.length < 1){
			return 0;
		}
		
		for(Cookie cookie:cookies){
			if(VOTE_FLAG_KEY.equals(cookie.getName())){
				if(participantService.findByCookie(cookie.getValue(),qnId) > 0){
					//有cookie记录,不允许投票
					return VOTED_YES;
				}
			}
		}
		
		//****************************************
		// 然后进行session检查，防止重复提交
		//****************************************
		HttpSession session = request.getSession();
		if(session.getAttribute(qnId.toString())!=null){
			//session存在不允许投票
			return VOTED_YES;
		}
		
		//************************************************************
		// 当cookie、session都检查后，将新的cookie、session写到当前会话中
		//************************************************************
		String cookieVal = IdUtil.getUuid();
		session.setAttribute(qnId.toString(), cookieVal);
		Cookie newCookie = new Cookie(VOTE_FLAG_KEY,cookieVal);
		newCookie.setMaxAge(24*60*60);
		response.addCookie(newCookie);
		
		//*******************************************************
		// 把IP、Cookie、创建时间等信息存入数据库，用于防止恶意刷票
		//*******************************************************
		ParticipantFilter pp = new ParticipantFilter();
		pp.setQuestionnaireId(qnId);
		pp.setVotedIp(request.getRemoteAddr());
		pp.setVotedCookie(cookieVal);
		pp.setCreateTime(new Date());
		
		String userName = "没有登录用户";
		MMember mber = (MMember) session.getAttribute("currentUser");
		if(mber != null){
			userName = mber.getCnickname();
		}
		pp.setUserName(userName);
		
		participantService.save(pp);
		
		return 0;
	}
	
	//*********************************查看投票结果**************************************************
	
	/**
	 * 功能描述：显示某个问卷的投票结果
	 * 创建时间:2013-11-19下午6:11:26
	 * 创建人: 燕珂
	 * 
	 * @param qnId 问卷ID
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/showVoteResult")
	public String showVoteResult(@RequestParam("qnId") Long qnId,HttpServletRequest request,Model model){
		model.addAttribute("qnId", qnId);
		// 通过Cookie检查当前计算机是否已经投过票
		try{
			Cookie cookies[] = request.getCookies();
			if(cookies.length > 0){
				for (Cookie ck : cookies) {
					if(VOTE_FLAG_KEY.equals(ck.getName())){
						if(participantService.findByCookie(ck.getValue(),qnId)>0){
							// cookie存在,已 投过票,给voteEd赋值
							model.addAttribute("voteEd", "Ed");
						}
					}
				}
			}
		}catch(Exception e){
			e.printStackTrace();
		}
		
		// 若没投过票，就获取问卷及相关内容的数据
		//Wj wj = new Wj();
		//wj = assembleValidSurvey(qnId);
//		if(SHOW_RESULT_NO.equals(wj.getShowResult())){
//			// 该投票不公开结果
//			model.addAttribute("showResult", SHOW_RESULT_NO);
//			return PREFIX+"/voteResult";
//		}
//		
//		model.addAttribute("showResult", SHOW_RESULT_YES);
//		model.addAttribute("vo",wj);
		return PREFIX+"/voteResult";
	}
	/**
	 * 跳转加油机详情页面 
	 * 20160803 yyf add
	 */
	@RequestMapping("/checkJiayouji")
	public String checkJiayouji(@RequestParam("otherId") Long otherId,
			@RequestParam("surveyId") String surveyId,
			@RequestParam("objectType") String objectType,
			@RequestParam("objectId") String objectId,
			@RequestParam("objectName") String objectName,
			@RequestParam("params") String params,
			HttpServletRequest request,Model model){
		model.addAttribute("otherId", otherId);
		model.addAttribute("surveyId", surveyId);
		model.addAttribute("objectType", objectType);
		model.addAttribute("objectId", objectId);
		model.addAttribute("objectName", objectName);
		model.addAttribute("params", params);
		
		return PREFIX+"/gasMachineAndOilGunDetail";
	}
	
	
	//*********************************前台首页中"问卷调查"的数据展示**************************************************
	
	/**
	 * 功能描述：显示某个问卷的投票结果
	 * 创建时间:2013-11-19下午6:11:26
	 * 创建人: 燕珂
	 * 
	 * @param qnId 问卷ID
	 * @param request
	 * @param model
	 * @return
	 */
	@RequestMapping("/showQuestionnaireIndex")
	@ResponseBody
	public Map<String, Object> showQuestionnaireIndex(HttpServletRequest request, Model model){
		Survey latestSurvey = surveyService.getLatestSurvey();
		if(latestSurvey == null){
			return error("还没有问卷数据");
		}
		
		//Wj wj = assembleValidSurvey(latestSurvey.getId());
		
		//return success("成功", wj);
		return success("成功");
	}
	
	/**
	@RequestMapping("/tj")
	@ResponseBody
	public Map<String, Object> surveryTJ(String username,@RequestParam("id")Long surveyId,@RequestParam(value="relationObjectType",required=false) String relationObjectType,@RequestParam(value="relationObjectId",required=false) Long relationObjectId,@RequestParam(value="phone",required=false) String phone,@RequestParam(value="industryid",required=false) Long industryid ,@RequestParam(value="merchantName",required=false) String merchantName,HttpSession session,HttpServletRequest request){
		MMember currentUser = (MMember)session.getAttribute("currentUser");
		Long userId=new Long(0);
 		
	    JSONObject jsonobject = JSONObject.fromObject(username);
		String anonymousVote=jsonobject.get("anonymousVote").toString();
	    	// 为了显示最新的会员信息，需要从数据库中获取
	   	if(currentUser != null){
	   		userId=currentUser.getNmemberid();
	   	}else{
	   		if(anonymousVote.equals("1")){
	   			userId=surveyService.getMinSurveyId();
	   		}else{
	   			return error("请登录后后再投票");
	   		}
	   	}
	  
	      
	    //获取一个json数组
	    JSONArray array = jsonobject.getJSONArray("voteList");
	 
	    	   Date createdate=new Date();
	    	   String uuid=IdUtil.getUuid(); 
	    	   Date crdate=new Date();
	    	  for(int i=0;i<array.size();i++){
		    	   JSONObject jsonobject3 = JSONObject.fromObject(array.get(i));
		  	       VoteRecord vote2= (VoteRecord)JSONObject.toBean(jsonobject3, VoteRecord.class);
		  	       vote2.setVotetime(crdate);
		  	       vote2.setIpaddress(request.getRemoteAddr());
		  	       vote2.setUserid(userId);
		  	       vote2.setBatchNumber(uuid);
		  	       
		  	       // 只有当调查对象可以查到时才保存这两个字段，否则即使参数中有 relationObjectId，也不予保存
		  	       if (enterpriseInfoService.get(relationObjectId) != null) {
			  	       vote2.setRelationObjectType(relationObjectType);
			  	       vote2.setRelationObjectId(relationObjectId);
		  	       }
		  	       
		  	       voteRecordService.save(vote2);
	    	  }
//	     System.out.println(request.getRemoteAddr());	  
	     Survey survey=surveyService.get(surveyId);
	     survey.setParticipatenum(survey.getParticipatenum()+1);
	     surveyService.update(survey);
	     //修改用户的积分以及积分记录表
	     InfoNewsComment inc=new InfoNewsComment();
	     inc.setUserId(userId);
	     inc.setNewsId(surveyId);
	     if(userId>0){
	    	 if(survey.getIntegral()!=null && survey.getIntegral()>0){
	    		 Integral integral = surveyService.updateUserIntegral(userId,surveyId,new Long(survey.getIntegral()),survey.getSubject(),SystemCommon_Constant.INTEGRAL_CATEGORY_VOTE);
	    		 //根据该用户的总积分（当前积分+已消费的积分）判断用户的会员等级
	    		 membermanageService.updateUserGradeByTotalIntegral(userId,integral);
	    	 }
	     }
	     
	     if(!DataUtil.isEmpty(phone)){
	    	 //说明填写了手机号
	    	 VoteRecordPhone vrp = new VoteRecordPhone();
	    	 vrp.setSurveyid(surveyId);
	    	 vrp.setUserid(userId);
	    	 vrp.setPhone(phone);
	    	 voteRecordPhoneService.save(vrp);
	     }
	     //需要根据地图关联商户
	     if(!DataUtil.isEmpty(merchantName)){
	    	SurveyMerchant sm = new SurveyMerchant();
	 		sm.setSurveyId(surveyId);
	 		sm.setCateId(industryid);
	 		try {
				merchantName = new String(merchantName.getBytes("ISO-8859-1"), "UTF-8");
				merchantName = URLDecoder.decode(merchantName, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
	 		sm.setMerchantName(merchantName);
	 		sm.setCreateTime(DateUtil.getTimestamp());
	 		sm.setUserId(userId);
	 		surveyMerchantService.save(sm);
	     }
	     
	     
	     return success("成功"); 
	}
	*/
	
	@RequestMapping("/tj")
	@ResponseBody
	public Map<String, Object> surveryTJ(String username,@RequestParam("id")Long surveyId,@RequestParam(value="objectType",required=false) String objectType,@RequestParam(value="objectId",required=false) String objectId,@RequestParam(value="objectName",required=false) String objectName,@RequestParam(value="phone",required=false) String phone,@RequestParam(value="industryid",required=false) Long industryid ,@RequestParam(value="merchantName",required=false) String merchantName
			,@RequestParam(value="anwserUserId",required=false) String anwserUserId
			,@RequestParam(value="activityType",required=false) String activityType
			,@RequestParam(value="winPrizeId",required=false) String winPrizeId//yyf 20160630 add 
			,HttpSession session,HttpServletRequest request){
		MMember currentUser = (MMember)session.getAttribute("currentUser");
		//session用完后清空
		session.removeAttribute("currentUser");
		Long userId=new Long(0);
		
		JSONObject jsonobject = JSONObject.fromObject(username);
		String anonymousVote=jsonobject.get("anonymousVote").toString();
		// 为了显示最新的会员信息，需要从数据库中获取
		if(currentUser != null){
			userId=currentUser.getNmemberid();
		}else{
			if(anonymousVote.equals("1")){
				userId=surveyService.getMinSurveyId();
			}else{
				//return error("请登录后后再投票");
			}
		}
		
		Long cObjectId = null;
		if (StringUtils.isNotBlank(objectType) && StringUtils.isNotBlank(objectId)) {
			CObject cObject = new CObject();
			cObject.setObjectType(objectType);
			cObject.setObjectId(objectId);
			cObject.setObjectName(objectName);
			cObjectId = cObjectService.saveCobject(cObject);
		}
		//校验后台实体信息表中是否有该实体存在，不存在则先创建
		IndustryEntity induEntity = null;
		if(cObjectId!=null){
			induEntity=new IndustryEntity();
			induEntity.setCcomtypcode("");
			// 设置创建人、创建时间、审核人、审核时间
			induEntity.setCreateid(userId);
			induEntity.setAddress("");
			induEntity.setCreatetime(new Date());
			induEntity.setFoundtime(new Date());
			induEntity.setCauditstatus("0");
			induEntity.setValid("1");
			induEntity.setObjectId(String.valueOf(cObjectId));
			induEntity.setOtherId(objectId);//外系统实体ID yf 20160706 add
			induEntity.setEntityName(objectName);
			String EntyType=surveyIndustryService.getSurveyIndustryByType(objectType).getId().toString();
			induEntity.setEntityType(EntyType);
			induEntity=industryEntityService.saveOrGetEntity(induEntity);
		}
		//获取一个json数组
		JSONArray array = jsonobject.getJSONArray("voteList");
		
		Date createdate=new Date();
		String uuid=IdUtil.getUuid(); 
		Date crdate=new Date();
		for(int i=0;i<array.size();i++){
			JSONObject jsonobject3 = JSONObject.fromObject(array.get(i));
			VoteRecord vote2= (VoteRecord)JSONObject.toBean(jsonobject3, VoteRecord.class);
			vote2.setVotetime(crdate);
			vote2.setIpaddress(request.getRemoteAddr());
			vote2.setUserid(userId);
			vote2.setBatchNumber(uuid);
			vote2.setcObjectId(cObjectId);
			if(anwserUserId!=null&&!anwserUserId.equals("null")){
				vote2.setSurveyPartakeUserId(Long.valueOf(anwserUserId));
			}
			voteRecordService.save(vote2);
		}
//	     System.out.println(request.getRemoteAddr());	  
		Survey survey=surveyService.get(surveyId);
		survey.setParticipatenum(survey.getParticipatenum()+1);
		surveyService.update(survey);
		String snId=(String) session.getAttribute("SNId");
		SNBase snbase = new SNBase();
		if(StringUtils.isNotBlank(snId)){
			snbase = tagSNBaseService.get(snId);
		    snbase.setQueryNum(new Long(1));
		    tagSNBaseService.update(snbase);
		}
		//修改用户的积分以及积分记录表
		InfoNewsComment inc=new InfoNewsComment();
		inc.setUserId(userId);
		inc.setNewsId(surveyId);
		if(userId>0){
			if(survey.getIntegral()!=null && survey.getIntegral()>0){
				Integral integral = surveyService.updateUserIntegral(userId,surveyId,new Long(survey.getIntegral()),survey.getSubject(),SystemCommon_Constant.INTEGRAL_CATEGORY_VOTE);
				//根据该用户的总积分（当前积分+已消费的积分）判断用户的会员等级
				membermanageService.updateUserGradeByTotalIntegral(userId,integral);
				//如果是加油站的评价，判断SNid不为空，然后直接记录加油站的积分
				if(StringUtils.isNotBlank(snId)&&survey.getIndustryid().equals(205L)){
					IntegralOil integralOil = surveyService.updateUserSurveyIntegral(userId,surveyId,new Long(survey.getIntegral()),survey.getSubject(),SystemCommon_Constant.INTEGRAL_CATEGORY_VOTE,induEntity);
				}
			}
		}
		
		if(!DataUtil.isEmpty(phone)){
			//说明填写了手机号
			VoteRecordPhone vrp = new VoteRecordPhone();
			vrp.setSurveyid(surveyId);
			vrp.setUserid(userId);
			vrp.setPhone(phone);
			voteRecordPhoneService.save(vrp);
		}
		//需要根据地图关联商户
		if(!DataUtil.isEmpty(merchantName)){
			SurveyMerchant sm = new SurveyMerchant();
			sm.setSurveyId(surveyId);
			sm.setCateId(industryid);
			try {
				merchantName = new String(merchantName.getBytes("ISO-8859-1"), "UTF-8");
				merchantName = URLDecoder.decode(merchantName, "UTF-8");
			} catch (UnsupportedEncodingException e) {
				e.printStackTrace();
			}
			sm.setMerchantName(merchantName);
			sm.setCreateTime(DateUtil.getTimestamp());
			sm.setUserId(userId);
			surveyMerchantService.save(sm);
		}
		//20160218 yyf add 保存评价记录
		SurveyEvaluation se = new SurveyEvaluation();
		se.setCreateTime(new Date());
		se.setIndustryEntityId(induEntity==null?"":induEntity.getId().toString());
		se.setSnBaseId(snId);
		se.setSurveyid(String.valueOf(surveyId));
		se.setSurveyPartakeUserId(anwserUserId);
		se.setIsValid(SystemCommon_Constant.VALID_STATUS_1);
//		if(StringUtils.isNotBlank(snId)&&StringUtils.isNotBlank(anwserUserId)&&cObjectId!=null&&surveyId!=null)
		System.out.println("SurveyEvaluation##############snId="+snId+"####surveyId="+surveyId+"###anwserUserId="+anwserUserId);
		evaluationService.save(se);
		if(StringUtils.isNotBlank(winPrizeId)&&!winPrizeId.equals("null")&&StringUtils.isNotBlank(activityType)&&activityType.equals("2")){//2是奖励活动
			WinPrizeInfo winprize = winPrizeInfoService.get(Long.parseLong(winPrizeId));
			if(winprize!=null){
				winprize.setSurveyEvaluationId(se.getId().toString());
				winPrizeInfoService.saveOrUpdate(winprize);
			}
		}
		session.removeAttribute("checkCode");//清除此次评价的短信验证码  20160330 yf add
		/** 20160509 yyf add **跳转免费宝抽奖页面的url** begin***/
		PropertiesFileUtil pfu = new PropertiesFileUtil();
		
		String url = pfu.findValue("mfb_url");
		String redirectUrl = pfu.findValue("mfb_cjlj_url");
		String activityID= pfu.findValue("mfb_activityID");
		redirectUrl = redirectUrl+"activityID="+activityID;
		String timestamp = System.currentTimeMillis()+"";
		timestamp = timestamp.substring(0, 10);
		String token = pfu.findValue("mfb_token");
		String key = token+timestamp;
		key = MD5.getMD5Code(key).toUpperCase();
		redirectUrl = redirectUrl+"&key="+key;
		redirectUrl = redirectUrl+"&timestamp="+timestamp;
		//获取电话号码
		SurveyPartakeUser spu = sueryPartakeService.get(Long.parseLong(anwserUserId));
		String tel = "";
		if(spu==null){
			throw new RuntimeException("评论人信息为空，请检测核对！");
		}else{
			tel = spu.getPhone();
		}
		redirectUrl = redirectUrl+"&tel="+tel;
		String type = pfu.findValue("mfb_type");
		redirectUrl = redirectUrl+"&type="+type;
		//URLEncode 处理
		System.out.println("未处理之前的重定向链接："+redirectUrl);
		redirectUrl = URLEncoder.encode(redirectUrl);
		System.out.println("处理后的重定向链接："+redirectUrl);
		url = url.replace("cjlj", redirectUrl);//替换抽奖链接
		System.out.println("免费包url："+url);
		
		/** 20160509 yyf add **跳转免费宝抽奖页面的url** end***/
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("status", true);
		map.put("msg", "成功");
		map.put("url", url);
		map.put("surveyEvaluationId", se.getId().toString());
		return map;
	}
	
	@RequestMapping("/ipRepeat")
	@ResponseBody
	public Map<String,Object> SurveyIpRepeat(String id,HttpServletRequest request){
		String strIp=request.getRemoteAddr();
		int count=voteRecordService.getVoteRecordCountByIpAddress(id, strIp);
		if(count>0){
			return error("1");
		}
		return success("成功"); 
	}
	@RequestMapping("/userRepeat")
	@ResponseBody
	public Map<String,Object> SurveyUserRepeat(String id,HttpSession session,HttpServletRequest request){
		MMember currentUser = (MMember)session.getAttribute("currentUser");
		if(currentUser!=null){
			String userId=currentUser.getNmemberid().toString();
			int count=voteRecordService.getVoteRecordCountByUserId(id, userId);
			if(count>0){
				return error("1");
			}
		}
		return success("成功"); 
	}
	
	
	
	/**
	 * 
	 * @Description:  门户网站 我的质讯通模块，针对单个问卷调查查看投票的明细
	 * @author yanghui 
	 * @Created 2014-4-26
	 * @param model
	 * @param parame
	 * @return
	 */
	@RequestMapping("myvoteDetail")
	public String myvoteDetail(Model model,@RequestParam(value="parame") String parames){
		String[] parame = parames.split(",");
		if(parame.length==3){
			//下面的取值方法顺序是前端已经配置好的顺序，必须这样顺序取值
			Long surveyId = Long.valueOf(parame[0]);
			Long userId = Long.valueOf(parame[1]);
			String batchNumber = parame[2];
			
			//以下被注释掉的代码为之前的投票明细
			Survey s = surveyService.get(surveyId);
			/*model.addAttribute("survey",s);
			VoteRecordDetailBean detailBean = new VoteRecordDetailBean();
			//问卷下的问题列表
			List<Question> qlist = voteRecordService.getDistinctQuestionList(surveyId, userId, batchNumber);
			for(Question question:qlist){
				QuestionBean questionBean = new QuestionBean();
				try {
					PropertyUtils.copyProperties(questionBean, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				questionBean = voteRecordService.optionList(questionBean,question.getId(), surveyId, userId, batchNumber);
				detailBean.add(questionBean);
			}
			model.addAttribute("vo", detailBean);*/
			
			
			
			
			//这里是重新修改后的查看明细
			

			SurveyVo surveyVo = new SurveyVo();
			
			// 问卷信息数据
			Survey survey = surveyService.get(surveyId);
			try {
				PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			//
			// 问题列表数据
			//
			List<Question> questionList = questionService.listQuestion(surveyId);
			for(Question question : questionList){
				if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
					QuestionVo questionVo = new QuestionVo();
					try {
						PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
					} catch (Exception e) {
						e.printStackTrace();
					}
					surveyVo.add(questionVo);
					
					//
					// 选项列表数据
					//该问题下的所有选项
					List<Option> optionList= optionService.listOption(question.getId());
					
					if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT_RADIO.equals(question.getQuestiontype())){
						//11-选择题-单选题
						//需要从投票记录表中查询出针对这个问题选择的是哪一个选项，然后进行匹配，成功则设为选中
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						if(vrlist!=null && vrlist.size()>0){
							VoteRecord vr = vrlist.get(0);
							for (Option option : optionList) {
								if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
									OptionVo optionVo = new OptionVo();
									try {
										PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
										if(vr.getOption1id().equals(option.getId())){
											optionVo.setIsCheck("1"); //1-被选中
											if("1".equals(option.getRequireinput())){
												optionVo.setAnswercontent(vr.getAnswercontent());
											}
										}
										questionVo.add(optionVo, option.getOptiontype());
									} catch (Exception e) {
										e.printStackTrace();
									} 
								}
							}
						}
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SELECT_CHECK.equals(question.getQuestiontype())){
						//12-选择题-多选
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						for (Option option : optionList) {
							if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
								OptionVo optionVo = new OptionVo();
								try {
									PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
									for(int i=0;i<vrlist.size();i++){
										VoteRecord vr = vrlist.get(i);
										if(vr.getOption1id().equals(option.getId())){
											optionVo.setIsCheck("1"); //1-被选中
											if("1".equals(option.getRequireinput())){
												optionVo.setAnswercontent(vr.getAnswercontent());
											}
											break;
										}
									}
									questionVo.add(optionVo, option.getOptiontype());
								} catch (Exception e) {
									e.printStackTrace();
								} 
							}
						}
						
						/*for(int i=0;i<vrlist.size();i++){
							VoteRecord vr = vrlist.get(i);
							for (Option option : optionList) {
								if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
									OptionVo optionVo = new OptionVo();
									try {
										PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
										if(vr.getOption1id().equals(option.getId())){
											optionVo.setIsCheck("1"); //1-被选中
											if("1".equals(option.getRequireinput())){
												optionVo.setAnswercontent(vr.getAnswercontent());
											}
										}
										questionVo.add(optionVo, option.getOptiontype());
									} catch (Exception e) {
										e.printStackTrace();
									} 
								}
							}
						}*/
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT_RADIO.equals(question.getQuestiontype())){
						//组合单选
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
							for (Option option : optionList) {
								if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
									OptionVo optionVo = new OptionVo();
									try {
										PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
										for(int i=0;i<vrlist.size();i++){
											VoteRecord vr = vrlist.get(i);
											if(vr.getOption1id().equals(option.getId())){
												//说明这个选项为问题选项
												optionVo.setOption2Id(vr.getOption2id());
											}else if(vr.getOption2id().equals(option.getId())){
												//说明这个选项为答案选项
												
											}
										}
										
										/*if("2".equals(option.getOptiontype())){
											for(int i=0;i<vrlist.size();i++){
												VoteRecord vr = vrlist.get(i);
												//说明这个选项的类型为题目的答案
												if(vr.getOption2id().equals(option.getId())){
													optionVo.setIsCheck("1"); //1-被选中
													break;
												}
											}
										}else if("1".equals(option.getOptiontype())){
												//说明是问题选项
												option.setOptiontype("2");
										}*/
										questionVo.add(optionVo, option.getOptiontype());
									} catch (Exception e) {
										e.printStackTrace();
									} 
								}
							}
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT_CHECK.equals(question.getQuestiontype())){
						//组合多选
						
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(question.getQuestiontype())){
						//打分题
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						if(vrlist!=null && vrlist.size()>0){
							VoteRecord vr = vrlist.get(0);
							for (Option option : optionList) {
								if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
									OptionVo optionVo = new OptionVo();
									try {
										PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
										if(vr.getOption1id().equals(option.getId())){
											optionVo.setIsCheck("1"); //1-被选中
											if("1".equals(option.getRequireinput())){
												optionVo.setAnswercontent(vr.getAnswercontent());
											}
										}
										questionVo.add(optionVo, option.getOptiontype());
									} catch (Exception e) {
										e.printStackTrace();
									} 
								}
							}
						}
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(question.getQuestiontype())){
						//组合打分题
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						for (Option option : optionList) {
							if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
								OptionVo optionVo = new OptionVo();
								try {
									PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
									for(int i=0;i<vrlist.size();i++){
										VoteRecord vr = vrlist.get(i);
										if(vr.getOption1id().equals(option.getId())){
											//说明这个选项为问题选项
											optionVo.setOption2Id(vr.getOption2id());
										}else if(vr.getOption2id().equals(option.getId())){
											//说明这个选项为答案选项
										}
									}
									questionVo.add(optionVo, option.getOptiontype());
								} catch (Exception e) {
									e.printStackTrace();
								} 
							}
						}
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SORT.equals(question.getQuestiontype())){
						//排序题目
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						for (Option option : optionList) {
							if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
								OptionVo optionVo = new OptionVo();
								try {
									PropertyUtils.copyProperties(optionVo, option);// 后者相同属性值会覆盖前者
									for(int i=0;i<vrlist.size();i++){
										VoteRecord vr = vrlist.get(i);
										if(vr.getOption1id().equals(option.getId())){
											optionVo.setOption2Id(vr.getOption2id());
										}
									}
									questionVo.add(optionVo, option.getOptiontype());
								} catch (Exception e) {
									e.printStackTrace();
								} 
							}
						}
					}else if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN_INPUT.equals(question.getQuestiontype()) || SystemCommon_Constant.SURVEY_QUESTION_TYPE_OPEN_TEXTAREA.equals(question.getQuestiontype())){
						//开放题 
						List<VoteRecord> vrlist = voteRecordService.getVoteRecordList(question.getId(), surveyId, userId, batchNumber);
						if(vrlist!=null && vrlist.size()>0){
							VoteRecord vr = vrlist.get(0);
							questionVo.setAnswercontent(vr.getAnswercontent());
						}
					}
				}
			}
			model.addAttribute("survey",surveyVo);
			return "/membermanage/mycxw/person/votedetail";
		}else{
			return "/error/500";
		}
	}
	
	/**
	 * 
	 * @Description: 问卷问题数据源下拉框列表
	 * @author YangHui 
	 * @Created 2014-10-24
	 * @param id
	 * @return
	 */
	@RequestMapping("getQuestionDataSource")
	@ResponseBody
	public List<QuestionDataSource> getQuestionDataSource(@RequestParam(value="id") Long id,@RequestParam(value="type") Long cateId){
		return questionDataSourceService.getSubDataByPidAndType(id,cateId);
		
	}
	
	private String dealAnswerText(Long optionId){
		Option  option  = optionService.get(optionId);
		String optionText = "";
		if(option!=null){
			optionText = option.getOptionText();
		}
		return optionText;
	}
	/**
	 * 20160419 yyf add
	 * 临时兑奖解决方案中的密码校验
	 * @param SNParam
	 * @param request
	 * @return
	 */
	@RequestMapping("/checkPassword")
	@ResponseBody
	public Object checkPassword(@RequestParam("sn") String sn, @RequestParam("password") String password, HttpServletRequest request){
		//根据sn码获取评价对象实体
		SNBase snb = tagSNBaseService.queryBySN(sn);
		if(snb!=null){
			SNBatch  snbat = tagSNBatchService.get(snb.getSnBatchId());
			IndustryEntity  ie = industryEntityService.get(Long.parseLong(snbat.getIndustryEntityId()));
			String status = ie.getCreatUserstatus();
			if(status.equals("0")){
				return error("当前评价对象未分配账号，请先分配账号！");
			}else{
				MMember mm = membermanageService.getMemeberByEntityId(ie.getId());
				if(mm!=null){
					String msta = mm.getCmemberstatus();
					if(msta.equals("1")){
						String md5Pwd = MD5.getMD5Code(password);
						if(mm.getCpassword().equals(md5Pwd)){
							return success("校验通过！",password);
						}else{
							return error("您输入的密码有误，请核对后重新输入！");
						}
					}else{
						return error("当前评价对象已分配账号，但是未审核通过，请联系管理员处理！");
					}
				}else{
					return error("当前评价对象已分配账号，但是无账号信息，请联系管理员处理！");
				}
			}
		}else{
			return error("您输入的sn码不存在！");
		}
	}
	
}
第2级：SurveyCountController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.membermanage.service.EnterpriseInfoService;
import com.guangfan.zxt.surveymanage.entity.Option;
import com.guangfan.zxt.surveymanage.entity.Question;
import com.guangfan.zxt.surveymanage.entity.Survey;
import com.guangfan.zxt.surveymanage.entity.VoteRecordReport;
import com.guangfan.zxt.surveymanage.model.OptionVo;
import com.guangfan.zxt.surveymanage.model.QuestionVo;
import com.guangfan.zxt.surveymanage.model.SurveyVo;
import com.guangfan.zxt.surveymanage.model.VoteRecordReportVo;
import com.guangfan.zxt.surveymanage.service.OptionService;
import com.guangfan.zxt.surveymanage.service.QuestionService;
import com.guangfan.zxt.surveymanage.service.SurveyService;
import com.guangfan.zxt.surveymanage.service.VoteRecordReportService;
import com.guangfan.zxt.surveymanage.service.VoteRecordService;
import com.guangfan.zxt.util.MyPaginationResult;
import com.guangfan.zxt.util.ViewExcel;

import dk.controller.BaseController;
import dk.model.RequestPage;

/**
 * @description 问卷统计控制类
 * @author 燕珂
 * @createtime 2014-4-15 上午10:24:42
 */
@Controller
@RequestMapping("/surveyCountManage")
public class SurveyCountController extends BaseController {
	
	private final String PREFIX = "surveymanage";
	
	@Resource
	private VoteRecordService voteRecordService;
	
	@Resource
	private VoteRecordReportService voteRecordReportService;
	
	@Resource
	private SurveyService surveyService;
	@Resource
	private QuestionService questionService;
	@Resource
	private OptionService optionService;
	
	@Resource
	private EnterpriseInfoService enterpriseInfoService;
	
	/**
	 * 进入到“问卷统计”页面
	 */
	@RequestMapping("/toSurveyCount")
	public String toSurveyCount(@RequestParam("surveyId") Long surveyId, @RequestParam(value="objectId",required=false) String objectId, Model model){
		// 调用存储过程往临时表插入数据
//		try {
//			new JavaConnOracle(surveyId, 33L);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
		// 用 Java 实现存储过程
		voteRecordReportService.addTempData(surveyId, null, null);
		
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		surveyVo.setRelationObjectNum(surveyService.getRelationObjectNum(surveyId));
		
//		surveyVo.setId(survey.getId());
//		surveyVo.setSubject(survey.getSubject());
//		surveyVo.setDescription(survey.getDescription());
		//wj.setShowResult(survey.getShowResult());
		//surveyVo.setBegintime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getBegintime()));
		//surveyVo.setEndtime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getEndtime()));
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				int answerNum = voteRecordReportService.getAnswerNumForQuestion(questionVo.getId(), surveyId, null);
				questionVo.setAnswerNum(answerNum);
				Double d_answerpercent = 0.00; 
				DecimalFormat df = new DecimalFormat("0.00"); // 先保留两位小数（不够补0）
				String s_answerpercent = "";
				if ((double)survey.getParticipatenum() > 0) { // 避免下面计算时分母为0出错
					d_answerpercent = (double)answerNum / (double)survey.getParticipatenum();
					s_answerpercent = df.format(d_answerpercent * 100) + "%"; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
				} else {
					s_answerpercent = "0.00%";
				}
				questionVo.setAnswerPercent(s_answerpercent);
				
				// 计算平均分及总分（打分题专用）
				if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questionVo.getQuestiontype())) {
					int totalScore = 0;
					List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByQuestionIdAndSurveyId(questionVo.getId(), surveyId);
					for (VoteRecordReport recordReport : recordReportList) {
						Long optionId = optionService.get(recordReport.getOption1id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
						totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
					}
					Double d_averageScore = 0.00;
					String s_averageScore = "";
					if (answerNum > 0) { // 避免下面计算时分母为0出错
						d_averageScore = (double)totalScore/ (double)answerNum;
						s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
					} else {
						s_averageScore = "0";
					}
					questionVo.setTotalScore(totalScore);
					questionVo.setS_averageScore(s_averageScore);
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				List<Option> optionList= optionService.listOption(question.getId());
				// 先算出该问题下所有选项的总票数
				int itemsTotalNum = 0;
//				for (Option item : optionList) {
//					itemsTotalNum = itemsTotalNum + item.getNum();
//				}
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByOptionIdAndSurveyId(optionVo.getId(), surveyId);
						List<VoteRecordReportVo> recordReportVoList = new ArrayList<VoteRecordReportVo>();
						int totalScore = 0;
						String s_averageScore = "";
						for (VoteRecordReport recordReport : recordReportList) {
							VoteRecordReportVo recordReportVo = new VoteRecordReportVo();
							try {
								PropertyUtils.copyProperties(recordReportVo, recordReport); // 后者相同属性值会覆盖前者
							} catch (Exception e) {
								e.printStackTrace();
							}
							recordReportVoList.add(recordReportVo);
							
							// 计算平均分及总分（组合打分题专用）
							if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questionVo.getQuestiontype())) {
								Long optionId = optionService.get(recordReport.getOption2id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
								totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
								Double d_averageScore = 0.00;
								if (answerNum > 0) {
									d_averageScore = (double)totalScore/ (double)answerNum;
									s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
								} else {
									s_averageScore = "0";
								}
							}
						}
						optionVo.setRecordReportVoList(recordReportVoList);
						optionVo.setTotalScore(totalScore);
						optionVo.setS_averageScore(s_averageScore);
						
						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		model.addAttribute("survey", surveyVo);
		voteRecordReportService.deleteOldReportList(surveyId); // 得到数据后清掉临时表数据
		return PREFIX + "/surveyCount";
	}
	/**
	 * 将问卷调查的 问卷统计页面导出为excel
	 * 20160526 yyf add
	 */
	
	@RequestMapping(value="/exportExcel",method=RequestMethod.GET)
	public ModelAndView exportExcel(@RequestParam("surveyId") Long surveyId, @RequestParam(value="objectId",required=false) String objectId, HttpServletResponse response,HttpServletRequest request, Model model){
		// 调用存储过程往临时表插入数据
//		try {
//			new JavaConnOracle(surveyId, 33L);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
		// 用 Java 实现存储过程
		voteRecordReportService.addTempData(surveyId, null, null);
		
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
		
		surveyVo.setRelationObjectNum(surveyService.getRelationObjectNum(surveyId));
		
//		surveyVo.setId(survey.getId());
//		surveyVo.setSubject(survey.getSubject());
//		surveyVo.setDescription(survey.getDescription());
		//wj.setShowResult(survey.getShowResult());
		//surveyVo.setBegintime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getBegintime()));
		//surveyVo.setEndtime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getEndtime()));
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				int answerNum = voteRecordReportService.getAnswerNumForQuestion(questionVo.getId(), surveyId, null);
				questionVo.setAnswerNum(answerNum);
				Double d_answerpercent = 0.00; 
				DecimalFormat df = new DecimalFormat("0.00"); // 先保留两位小数（不够补0）
				String s_answerpercent = "";
				if ((double)survey.getParticipatenum() > 0) { // 避免下面计算时分母为0出错
					d_answerpercent = (double)answerNum / (double)survey.getParticipatenum();
					s_answerpercent = df.format(d_answerpercent * 100) + "%"; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
				} else {
					s_answerpercent = "0.00%";
				}
				questionVo.setAnswerPercent(s_answerpercent);
				
				// 计算平均分及总分（打分题专用）
				if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questionVo.getQuestiontype())) {
					int totalScore = 0;
					List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByQuestionIdAndSurveyId(questionVo.getId(), surveyId);
					for (VoteRecordReport recordReport : recordReportList) {
						Long optionId = optionService.get(recordReport.getOption1id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
						totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
					}
					Double d_averageScore = 0.00;
					String s_averageScore = "";
					if (answerNum > 0) { // 避免下面计算时分母为0出错
						d_averageScore = (double)totalScore/ (double)answerNum;
						s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
					} else {
						s_averageScore = "0";
					}
					questionVo.setTotalScore(totalScore);
					questionVo.setS_averageScore(s_averageScore);
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				List<Option> optionList= optionService.listOption(question.getId());
				// 先算出该问题下所有选项的总票数
				int itemsTotalNum = 0;
//				for (Option item : optionList) {
//					itemsTotalNum = itemsTotalNum + item.getNum();
//				}
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByOptionIdAndSurveyId(optionVo.getId(), surveyId);
						List<VoteRecordReportVo> recordReportVoList = new ArrayList<VoteRecordReportVo>();
						int totalScore = 0;
						String s_averageScore = "";
						for (VoteRecordReport recordReport : recordReportList) {
							VoteRecordReportVo recordReportVo = new VoteRecordReportVo();
							try {
								PropertyUtils.copyProperties(recordReportVo, recordReport); // 后者相同属性值会覆盖前者
							} catch (Exception e) {
								e.printStackTrace();
							}
							recordReportVoList.add(recordReportVo);
							
							// 计算平均分及总分（组合打分题专用）
							if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questionVo.getQuestiontype())) {
								Long optionId = optionService.get(recordReport.getOption2id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
								totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
								Double d_averageScore = 0.00;
								if (answerNum > 0) {
									d_averageScore = (double)totalScore/ (double)answerNum;
									s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
								} else {
									s_averageScore = "0";
								}
							}
						}
						optionVo.setRecordReportVoList(recordReportVoList);
						optionVo.setTotalScore(totalScore);
						optionVo.setS_averageScore(s_averageScore);
						
						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		model.addAttribute("survey", surveyVo);
		voteRecordReportService.deleteOldReportList(surveyId); // 得到数据后清掉临时表数据
		
		Map map = new HashMap();
		map.put("fileName", surveyVo.getSubject());
		map.put("surveyVo", surveyVo);
		ViewExcel viewExcel = new ViewExcel();    
		return new ModelAndView(viewExcel, map);   
	}
	/**
	  * 方法名称：toSurveyCount1
	  * 功能描述：根据实体进问卷结果列表
	  * 创建时间:2015年12月29日上午10:06:30
	  * 创建人: pengfei Zhao
	  * @param @return 
	  * @return String]
	  * 
	  * 20160727 yyf add 注释：toSurveyCount1与toSurveyCount方法的区别是，toSurveyCount1统计的是某个行业实体的问卷情况，而toSurveyCount统计的是整个问卷的问卷情况
	  * 
	 */
	@RequestMapping("/toSurveyCount1")
	public String toSurveyCount1(@RequestParam("surveyId") Long surveyId, @RequestParam(value="objectId",required=false) String objectId, 
			@RequestParam(value="beginTime",required=false) String beginTime, @RequestParam(value="endTime",required=false) String endTime, Model model){
		// 调用存储过程往临时表插入数据
		// 用 Java 实现存储过程
     	voteRecordReportService.addTempData1(surveyId, null, null,objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
		
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		int entityVoteNumber = voteRecordService.getEntityVoteNum(surveyId, objectId,beginTime,endTime);//TODO   yyf add  此处需加上时间段参数
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
		surveyVo.setParticipatenum(entityVoteNumber);
		surveyVo.setRelationObjectNum(surveyService.getRelationObjectNum(surveyId));
		
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				int answerNum = voteRecordReportService.getAnswerNumForQueEntity(questionVo.getId(), surveyId, null,objectId,beginTime,endTime);//TODO   yyf add  此处需加上时间段参数
				questionVo.setAnswerNum(answerNum);
				Double d_answerpercent = 0.00; 
				DecimalFormat df = new DecimalFormat("0.00"); // 先保留两位小数（不够补0）
				String s_answerpercent = "";
				if ((double)entityVoteNumber > 0) { // 避免下面计算时分母为0出错
					d_answerpercent = (double)answerNum / (double)entityVoteNumber;
					s_answerpercent = df.format(d_answerpercent * 100) + "%"; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
				} else {
					s_answerpercent = "0.00%";
				}
				questionVo.setAnswerPercent(s_answerpercent);
				
				// 计算平均分及总分（打分题专用）
				if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questionVo.getQuestiontype())) {
					int totalScore = 0;
					List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByQuestionIdAndSurveyId(questionVo.getId(), surveyId);
					for (VoteRecordReport recordReport : recordReportList) {
						Long optionId = optionService.get(recordReport.getOption1id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
						totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
					}
					Double d_averageScore = 0.00;
					String s_averageScore = "";
					if (answerNum > 0) { // 避免下面计算时分母为0出错
						d_averageScore = (double)totalScore/ (double)answerNum;
						s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
					} else {
						s_averageScore = "0";
					}
					questionVo.setTotalScore(totalScore);
					questionVo.setS_averageScore(s_averageScore);
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				List<Option> optionList= optionService.listOption(question.getId());
				// 先算出该问题下所有选项的总票数
				int itemsTotalNum = 0;
//				for (Option item : optionList) {
//					itemsTotalNum = itemsTotalNum + item.getNum();
//				}
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByOptionIdAndSurveyId(optionVo.getId(), surveyId);
						List<VoteRecordReportVo> recordReportVoList = new ArrayList<VoteRecordReportVo>();
						int totalScore = 0;
						String s_averageScore = "";
						for (VoteRecordReport recordReport : recordReportList) {
							VoteRecordReportVo recordReportVo = new VoteRecordReportVo();
							try {
								PropertyUtils.copyProperties(recordReportVo, recordReport); // 后者相同属性值会覆盖前者
							} catch (Exception e) {
								e.printStackTrace();
							}
							recordReportVoList.add(recordReportVo);
							
							// 计算平均分及总分（组合打分题专用）
							if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questionVo.getQuestiontype())) {
								Long optionId = optionService.get(recordReport.getOption2id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
								totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
								Double d_averageScore = 0.00;
								if (answerNum > 0) {
									d_averageScore = (double)totalScore/ (double)answerNum;
									s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
								} else {
									s_averageScore = "0";
								}
							}
						}
						optionVo.setRecordReportVoList(recordReportVoList);
						optionVo.setTotalScore(totalScore);
						optionVo.setS_averageScore(s_averageScore);
						
						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		model.addAttribute("survey", surveyVo);
		model.addAttribute("objectId", objectId);
		model.addAttribute("beginTime", beginTime);
		model.addAttribute("endTime", endTime);
		voteRecordReportService.deleteOldReportList(surveyId); // 得到数据后清掉临时表数据
		return PREFIX + "/surveyCount1";
	}
	/**
	 * 进入到“问卷统计”页面
	 */
	@RequestMapping("/toRelationObjectCount")
	public String toRelationObjectCount(@RequestParam("surveyId") Long surveyId,@RequestParam(value="relationObjectId") Long relationObjectId, @RequestParam("relationObjectNum") Integer relationObjectNum, Model model){
		// 调用存储过程往临时表插入数据
//		try {
//			new JavaConnOracle(surveyId, relationObjectId);
//		} catch (Exception e) {
//			e.printStackTrace();
//		}
		
		// 用 Java 实现存储过程
		voteRecordReportService.addTempData(surveyId, relationObjectId, relationObjectNum);
		
		SurveyVo surveyVo = new SurveyVo();
		
		// 问卷信息数据
		Survey survey = surveyService.get(surveyId);
		try {
			PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
		} catch (Exception e) {
			e.printStackTrace();
		}
		
//		surveyVo.setId(survey.getId());
//		surveyVo.setSubject(survey.getSubject());
//		surveyVo.setDescription(survey.getDescription());
		//wj.setShowResult(survey.getShowResult());
		//surveyVo.setBegintime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getBegintime()));
		//surveyVo.setEndtime(DateFormat.getDateInstance(DateFormat.MEDIUM).format(survey.getEndtime()));
		//
		// 问题列表数据
		//
		List<Question> questionList = questionService.listQuestion(surveyId);
		for(Question question : questionList){
			if(SystemCommon_Constant.VALID_STATUS_1.equals(question.getValid())){
				QuestionVo questionVo = new QuestionVo();
				try {
					PropertyUtils.copyProperties(questionVo, question); // 后者相同属性值会覆盖前者
				} catch (Exception e) {
					e.printStackTrace();
				}
				int answerNum = voteRecordReportService.getAnswerNumForQuestion(questionVo.getId(), surveyId, relationObjectId);
				questionVo.setAnswerNum(answerNum);
				
				Double d_answerpercent =  (double)answerNum /  (double)relationObjectNum;
				DecimalFormat df = new DecimalFormat("0.00"); // 先保留两位小数（不够补0）
				String s_answerpercent = df.format(d_answerpercent * 100) + "%"; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
				questionVo.setAnswerPercent(s_answerpercent);
				
				// 计算平均分及总分（打分题专用）
				if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_SCORE.equals(questionVo.getQuestiontype())) {
					int totalScore = 0;
					List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByQuestionIdAndSurveyId(questionVo.getId(), surveyId);
					for (VoteRecordReport recordReport : recordReportList) {
						Long optionId = optionService.get(recordReport.getOption1id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
						totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
					}
					Double d_averageScore =  (double)totalScore/ (double)answerNum;
					String s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
					questionVo.setTotalScore(totalScore);
					questionVo.setS_averageScore(s_averageScore);
				}
				surveyVo.add(questionVo);
				
				//
				// 选项列表数据
				//
				List<Option> optionList= optionService.listOption(question.getId());
				// 先算出该问题下所有选项的总票数
				int itemsTotalNum = 0;
//				for (Option item : optionList) {
//					itemsTotalNum = itemsTotalNum + item.getNum();
//				}
				int sortNum = 0;
				for (Option option : optionList) {
					if(SystemCommon_Constant.VALID_STATUS_1.equals(option.getValid())){
						sortNum++;
						OptionVo optionVo = new OptionVo();
						try {
							PropertyUtils.copyProperties(optionVo, option); // 后者相同属性值会覆盖前者
						} catch (Exception e) {
							e.printStackTrace();
						}
						List<VoteRecordReport> recordReportList = voteRecordReportService.getReportListByOptionIdAndSurveyId(optionVo.getId(), surveyId);
						List<VoteRecordReportVo> recordReportVoList = new ArrayList<VoteRecordReportVo>();
						int totalScore = 0;
						String s_averageScore = "";
						for (VoteRecordReport recordReport : recordReportList) {
							VoteRecordReportVo recordReportVo = new VoteRecordReportVo();
							try {
								PropertyUtils.copyProperties(recordReportVo, recordReport); // 后者相同属性值会覆盖前者
							} catch (Exception e) {
								e.printStackTrace();
							}
							recordReportVoList.add(recordReportVo);
							
							// 计算平均分及总分（组合打分题专用）
							if (SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSCORE.equals(questionVo.getQuestiontype())) {
								Long optionId = optionService.get(recordReport.getOption2id()).getId(); // 对于打分题来说，选项是存在 Option1 中，对于组合打分题来说，选项存在 Option2 中（Option1 中存的是左侧的问题）
								totalScore += optionService.get(optionId).getScore() * recordReport.getVotenum();
								Double d_averageScore =  (double)totalScore/ (double)answerNum;
								s_averageScore = df.format(d_averageScore) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
							}
						}
						optionVo.setRecordReportVoList(recordReportVoList);
						optionVo.setTotalScore(totalScore);
						optionVo.setS_averageScore(s_averageScore);
						
						questionVo.add(optionVo, option.getOptiontype());
					}
				}
			}
		}
		
		model.addAttribute("survey", surveyVo);
		model.addAttribute("relationObjectId", relationObjectId);
		model.addAttribute("relationObjectNum", relationObjectNum);
		
		if (relationObjectId != null && relationObjectId > 0)
			model.addAttribute("relationObjectName", enterpriseInfoService.get(relationObjectId) != null ? enterpriseInfoService.get(relationObjectId).getCenterprisename() : "未知");
		else
			model.addAttribute("relationObjectName", "其他");
		
		voteRecordReportService.deleteOldReportList(surveyId); // 得到数据后清掉临时表数据
		return PREFIX + "/relationObjectCount";
	}
	
	/**
	 * 进入到“输入答案列表”页面
	 */
	@RequestMapping("/toSurveyAnswerContent")
	public String toSurveyAnswerContent(@RequestParam(value = "questionId") Long questionId, @RequestParam(value = "relationObjectId", required = false) Long relationObjectId, Model model) {
		model.addAttribute("questionId", questionId);
		model.addAttribute("relationObjectId", relationObjectId);
		return PREFIX + "/surveyAnswerContent";
	}
	/**
	  * 方法名称：toSurveyAnswerContent
	  * 功能描述：后台通过实体信息点开结果查看评论列表的页面
	  * 创建时间:2015年12月29日上午10:35:37
	  * 创建人: pengfei Zhao
	  * @param @param model
	  * @param @return 
	  * @return String
	 */
	@RequestMapping("/toSurveyAnswerContent1")
	public String toSurveyAnswerContent1(@RequestParam(value = "questionId") Long questionId, @RequestParam(value = "relationObjectId", required = false) Long relationObjectId,@RequestParam(value = "objectId", required = false) Long objectId, 
			@RequestParam(value="beginTime",required=false) String beginTime, @RequestParam(value="endTime",required=false) String endTime, Model model) {
		model.addAttribute("questionId", questionId);
		model.addAttribute("relationObjectId", relationObjectId);
		model.addAttribute("objectId", objectId);
		model.addAttribute("beginTime", beginTime);
		model.addAttribute("endTime", endTime);
		return PREFIX + "/surveyAnswerContent1";
	}
	
	/**
	 * 质讯通后台企业实体信息直接查看参与评价列表的用户信息
	 */
	@RequestMapping("/toSurveyUserAnswer")
	public String toSurveyUserAnswer(@RequestParam(value = "surveyId", required = false) Long surveyId,@RequestParam(value = "objectId", required = false) Long objectId,
			@RequestParam(value="beginTime",required=false) String beginTime, @RequestParam(value="endTime",required=false) String endTime, Model model) {
		model.addAttribute("surveyId", surveyId);
		model.addAttribute("objectId", objectId);
		model.addAttribute("beginTime", beginTime);
		model.addAttribute("endTime", endTime);
		return PREFIX + "/surveyUserAnswer";
	}
	
	/**
	 * 质讯通后台问卷列表直接查看参与评价的所有人和实体
	 */
	@RequestMapping("/toSurveyAnswer")
	public String toSurveyAnswer(@RequestParam(value = "surveyid") Long surveyid, Model model) {
		model.addAttribute("surveyid", surveyid);
		return PREFIX + "/surveyAnswer";
	}
	
	/**
	 * 进入到“输入答案列表”页面
	 */
	@RequestMapping("/listSurveyAnswerContent")
	@ResponseBody
	public MyPaginationResult listSurveyAnswerContent(HttpServletRequest request, @RequestParam(value = "questionId") Long questionId, @RequestParam(value = "relationObjectId", required = false) Long relationObjectId){
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return voteRecordService.datagrid(page, questionId, relationObjectId);
	}
	/**
	  * 方法名称：listSurveyAnswerContent1
	  * 功能描述：后台通过实体信息点开结果查看评论列表取值方法
	  * 创建时间:2015年12月29日上午10:35:37
	  * 创建人: pengfei Zhao
	  * @param @param model
	  * @param @return 
	  * @return String
	 */
	@RequestMapping("/listSurveyAnswerContent1")
	@ResponseBody
	public MyPaginationResult listSurveyAnswerContent1(HttpServletRequest request, @RequestParam(value = "questionId") Long questionId, @RequestParam(value = "relationObjectId", required = false) Long relationObjectId, @RequestParam(value = "objectId", required = false) Long objectId,
			@RequestParam(value="beginTime",required=false) String beginTime, @RequestParam(value="endTime",required=false) String endTime, Model model) {
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return voteRecordService.datagrid1(page, questionId, relationObjectId,objectId,beginTime,endTime);
	}
	/**
	 * 质讯通后台问卷列表直接查看输入答案列表数据页面和上面的区分开
	 */
	@RequestMapping("/listSurveyAnswer")
	@ResponseBody
	public MyPaginationResult listSurveyAnswer(HttpServletRequest request, @RequestParam(value = "surveyid") Long surveyid){
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return voteRecordService.datagridAnswer(page, surveyid);
	}
	
	/**
	 * 质讯通后台企业实体信息查看参与评价的列表
	 */
	@RequestMapping("/listSurveyUserAnswer")
	@ResponseBody
	public MyPaginationResult listSurveyUserAnswer(HttpServletRequest request, @RequestParam(value = "surveyId" , required = false) Long surveyId,@RequestParam(value = "objectId") Long objectId,
			@RequestParam(value="beginTime",required=false) String beginTime, @RequestParam(value="endTime",required=false) String endTime){
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return voteRecordService.datagridUserAnswer(page, surveyId,objectId,beginTime,endTime);
	}
	
	/**
	 * 进入到“查看问卷涉及主体对象统计”列表页
	 */
	@RequestMapping("/toRelationObjectList")
	public String toRelationObjectList(@RequestParam(value = "surveyId") Long surveyId, Model model) {
		model.addAttribute("surveyId", surveyId);
		return PREFIX + "/relationObjectList";
	}
	
	/**
	 * 进入到“查看问卷涉及主体对象统计”统计页
	 */
	@RequestMapping("/listRelationObject")
	@ResponseBody
	public MyPaginationResult listRelationObjectCount(HttpServletRequest request, @RequestParam(value = "surveyId") Long surveyId, @RequestParam(value = "relationObjectId", required = false) Long relationObjectId, @RequestParam(value = "relationObjectName", required = false) String relationObjectName){
		//插件内部自动封装了  page 参数，使用者不需要操作 page 参数，插件自动传参
		String sPage = request.getParameter("page");
		
		// 分页设置：一页显示10条数据
		RequestPage page = new RequestPage();
		page.setRows(10);
		page.setPage(Integer.valueOf(sPage));
		return surveyService.getRelationObjectCountList(page, surveyId, relationObjectId, relationObjectName);
	}
}
第2级：SurveyIndustryController.java
package com.guangfan.zxt.surveymanage.controller;

import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;
import com.guangfan.zxt.surveymanage.service.SurveyIndustryService;

import dk.controller.BaseController;
import dk.model.DataGrid;
import dk.model.RequestPage;

/**
 * @description 问卷所属行业管理控制类
 * @author 燕珂
 * @createtime 2014-3-15 下午03:55:13
 */
@Controller
@RequestMapping("/surveyIndustryManage")
public class SurveyIndustryController extends BaseController {

	private static final String PREFIX = "surveymanage/surveyIndustryManage";  // 页面目录（路径前缀）

	@Resource
	private SurveyIndustryService surveyIndustryService;
	
	/**
	 * 跳转至列表页
	 */
	@RequestMapping("/manage") 
	public String manage() {
		return PREFIX + "/manage"; // 返回 menu/manage.jsp
	}

	/**
	 * 获取菜单树
	 */
	@RequestMapping("/treegrid")
	@ResponseBody  // 需要往页面回写东西时候要加上这个
	public List<SurveyIndustry> treegrid() {
		return surveyIndustryService.allSurveyIndustry();
	}
	
	@RequestMapping("/datagrid") 
	@ResponseBody
	public DataGrid datagrid(RequestPage page) {
		return surveyIndustryService.datagrid(page);
	}

	/**
	 * 跳转至添加页
	 */
	@RequestMapping("add")
	public String add() {
		return PREFIX + "/add";
	}

	/**
	 * 添加
	 */
	@RequestMapping("/insert")
	@ResponseBody
	public Map<String, Object> insert(SurveyIndustry surveyIndustry, HttpSession session) {
		if (surveyIndustry.getPid() == null)
			surveyIndustry.setPid(0L); // 根节点的父 id 设为0
		
		surveyIndustry.setCreateid((Long) session.getAttribute("userId")); // 创建人
		surveyIndustry.setCreatetime(new Date()); // 创建时间
		surveyIndustry.setValid(SystemCommon_Constant.VALID_STATUS_1); // 是否有效
		
		surveyIndustryService.insert(surveyIndustry);
		return success("添加成功！", surveyIndustry);
	}
	
	/**
	 * 跳转至修改页
	 */
	@RequestMapping("edit")
	public String edit(Model model, @RequestParam(value = "surveyIndustryId") long surveyIndustryId) {
		model.addAttribute("vo", surveyIndustryService.get(surveyIndustryId));
		return PREFIX + "/edit";
	}

	/**
	 * 修改
	 */
	@RequestMapping("/update")
	@ResponseBody
	public Map update(SurveyIndustry surveyIndustry, HttpSession session) {
		
		SurveyIndustry surveyIndustryTemp = surveyIndustryService.get(surveyIndustry.getId());
		
		surveyIndustry.setCreateid(surveyIndustryTemp.getCreateid()); // 创建人
		surveyIndustry.setCreatetime(surveyIndustryTemp.getCreatetime()); // 创建时间
		surveyIndustry.setModifyid((Long)session.getAttribute("userId")); // 修改人
		surveyIndustry.setModifytime(new Date());  // 修改时间
		surveyIndustry.setValid(surveyIndustryTemp.getValid()); // 是否有效
		
		surveyIndustryService.update(surveyIndustry);
		return success("修改成功！", surveyIndustry);
	}

	/**
	 * 删除
	 */
	@RequestMapping("/delete")
	@ResponseBody
	public Map delete(String ids)
	{
		if (StringUtils.isNotEmpty(ids)) {
			surveyIndustryService.logicDelete(ids); // 逻辑删除
			return success("删除成功！");
		} else {
			return error("请选择要删除的部门");
		}
	}

	@RequestMapping({"/listSurvInd"})
	@ResponseBody
	public List<SurveyIndustry> listSurvInd(@RequestParam(value="parentCode", required=false, defaultValue="") String parentCode)
	{
	    return this.surveyIndustryService.getSurveyIndustry(parentCode);
	}
}
第2级：SurveyPartakeUserController.java
package com.guangfan.zxt.surveymanage.controller;

import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.URLDecoder;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;










import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.guangfan.zxt.activityManage.entity.ActivityPrizeLink;
import com.guangfan.zxt.activityManage.entity.RewardActivity;
import com.guangfan.zxt.activityManage.entity.RewardPrizeLink;
import com.guangfan.zxt.activityManage.service.RewardActivityService;
import com.guangfan.zxt.activityManage.service.RewardPrizeLinkService;
import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.common.entity.CObject;
import com.guangfan.zxt.common.model.MD5Vo;
import com.guangfan.zxt.common.service.CObjectService;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.membermanage.service.MembermanageService;
import com.guangfan.zxt.prizemanage.entity.PrizeInfo;
import com.guangfan.zxt.prizemanage.entity.WinPrizeInfo;
import com.guangfan.zxt.prizemanage.service.PrizeInfoService;
import com.guangfan.zxt.prizemanage.service.WinPrizeInfoService;
import com.guangfan.zxt.sendMsg.entity.Checkcode;
import com.guangfan.zxt.sendMsg.service.CheckCodeService;
import com.guangfan.zxt.surveymanage.entity.SurveyPartakeUser;
import com.guangfan.zxt.surveymanage.service.EntityCategoryService;
import com.guangfan.zxt.surveymanage.service.SurveyPartakeUserService;
import com.guangfan.zxt.tagManage.service.TagSNBaseService;
import com.guangfan.zxt.util.PropertiesFileUtil;

import dk.controller.BaseController;
import dk.util.MD5;

/**
 * @description 参与加油站评价的客户列表
 * @author zhaopengfei
 * @createtime 2015-12-15 下午03:55:13
 */
@Controller
@RequestMapping("/SurveyPartakeUser")
public class SurveyPartakeUserController extends BaseController {
	@Resource
	private CObjectService cObjectService;
	private static final String PREFIX = "surveymanage/industryEntityManage";  // 页面目录（路径前缀）
	@Resource
	private TagSNBaseService tagSNBaseService;
	@Resource
	private SurveyPartakeUserService sueryPartakeService;
	@Resource
	private MembermanageService membermanageService;
	@Resource
	private CheckCodeService checkCodeService;
	@Resource
	private WinPrizeInfoService winPrizeInfoService;
	@Resource
	private PrizeInfoService prizeInfoService;
	@Resource
	private EntityCategoryService entityCategoryService;
	@Resource
	private RewardPrizeLinkService rewardPrizeLinkService;
	@Resource
	private RewardActivityService rewardActivityService;
	
	@RequestMapping("/saveSurveyPartakeUser")
	@ResponseBody
	public Map<String, Object> saveSurveyPartakeUser(@RequestParam("suerverId") String surveyId,
			@RequestParam(value="objectType",required=false) String objectType,
			@RequestParam(value="objectId",required=false) String objectId,
			@RequestParam(value="objectName",required=false) String objectName,
			@RequestParam(value="industryId",required=false) Long industryId,
			@RequestParam(value="codeInp",required=false) String codeInp,
			@RequestParam(value="prizeId",required=false) String prizeId,
			@RequestParam(value="activityId",required=true) String activityId,//yyf 20160620 add
			SurveyPartakeUser surveyUser,HttpSession session,HttpServletRequest request){
		Long userId=new Long(0);
		String checkCode=(String) session.getAttribute("checkCode");
		if(StringUtils.isNotBlank(objectId)){//实体ID不为空 需要验证短信码  20160330 yf add
			if(!codeInp.equals(checkCode)){
				return error("对不起！您输入的验证码【错误】或者【已经失效】！"); 
			}else{
				List<Checkcode> codeInfoList=checkCodeService.getCodoInfoByMobile(surveyUser.getPhone());
				if(codeInfoList.size()>0){
					Checkcode codeInfo=codeInfoList.get(0);
					Long newtime=new Date().getTime();
			    	Long diffSeconds = (newtime - codeInfo.getExpireTime().getTime())/1000;
			    	int intsecond=diffSeconds.intValue();
			    	if(intsecond>0){
			    		return error("验证码已失效!");
			    	}
					codeInfo.setCvalid(SystemCommon_Constant.VALID_STATUS_0);
					codeInfo.setValidate(new Date());
		    		checkCodeService.saveOrUpdate(codeInfo);
				}else{
					return error("验证码已失效!"); 
				}
			}
		}
		Long cObjectId = null;
		if (StringUtils.isNotBlank(objectType) && StringUtils.isNotBlank(objectId)) {
			CObject cObject = new CObject();
			cObject.setObjectType(objectType);
			cObject.setObjectId(objectId);
			cObject.setObjectName(objectName);
			cObjectId = cObjectService.saveCobject(cObject);
		}
		//
		if(cObjectId!=null){
			//判断油卡号是否存在
			boolean isexit=false;//false未查询过
			String snId=(String) session.getAttribute("SNId");
			if(StringUtils.isNotBlank(snId)){
				 isexit=tagSNBaseService.getSNBySNId(snId);
			}else{
				isexit=false; 
			}
			boolean istrue=sueryPartakeService.checkOilCardNo(surveyUser.getOilcardNo());
			if(!isexit){
				surveyUser.setSurveyId(surveyId);
				surveyUser.setObjectId(cObjectId.toString());
				surveyUser.setCreatetime(new Date());
				surveyUser.setValid("1");
				surveyUser.setIndustryid(industryId);
				sueryPartakeService.save(surveyUser);
				//然后创建匿名用户
				MMember user =new MMember();
				user.setCardno(surveyUser.getIDCard());
                user.setChinesename(surveyUser.getUsername());
                user.setCmemberstatus("0");
                user.setCmembertype("2");
                user.setCmobilephone(surveyUser.getPhone());
                user.setCpassword("123456");
                user.setCusername("");
				user=registerUserName(user);
				session.setAttribute("currentUser", user);
			}else{
				session.removeAttribute("checkCode");//清除此次评价的短信验证码  20160330 yf add
				return error("您已经评价过，请不要重复评价！"); 
			}
		}else{
			surveyUser.setSurveyId(surveyId);
			surveyUser.setObjectId(null);
			surveyUser.setCreatetime(new Date());
			surveyUser.setValid("1");
			surveyUser.setIndustryid(industryId);
			sueryPartakeService.save(surveyUser);
			//然后创建匿名用户
			MMember user =new MMember();
			user.setCardno(surveyUser.getIDCard());
            user.setChinesename(surveyUser.getUsername());
            user.setCmemberstatus("0");
            user.setCmembertype("2");
            user.setCmobilephone(surveyUser.getPhone());
            user.setCpassword("123456");
            user.setCusername(surveyUser.getUsername());
			user=registerUserName(user);
		}
		WinPrizeInfo winprize=new WinPrizeInfo();
		if(StringUtils.isNotBlank(prizeId)){
			/*
			 * 修改奖品数量  TODO
			 */
			//根据活动id和奖品序号获取活动奖品数据
			RewardActivity ra=rewardActivityService.findRewardActivityIdByPid(Long.parseLong(activityId));
			boolean flag = modifyRemainCount(prizeId,ra.getId());
			if(flag){
				PrizeInfo prizeInfo = prizeInfoService.get(Long.valueOf(prizeId));
				String entityCategoryName=entityCategoryService.getNamebyId(prizeInfo.getEntityCategory());
				MMember mber = (MMember) request.getSession().getAttribute("currentUser");
				winprize.setCreateId(mber.getNmemberid());
				winprize.setPrizeName(prizeInfo.getPrizeName());
				winprize.setPrizeSupplier(entityCategoryName);
				winprize.setPrizeNum(1L);
				winprize.setPrizeUser(surveyUser.getUsername());
				winprize.setPrizePhone(surveyUser.getPhone());
				winprize.setPrizePlace(entityCategoryName);
				String snId=(String) session.getAttribute("SNId");
				String sncode="";
				if(StringUtils.isNotBlank(snId)){
					sncode=tagSNBaseService.getSNCodeBySNId(snId);
				}
				winprize.setSnNum(sncode);
				winprize.setSnBaseId(snId);
				winprize.setWinPrizeInfoType("0");
				winprize.setCreateTime(new Date());
				winprize.setCreateName(mber.getChinesename());
				winprize.setValid("1");
				winprize.setIsCash("0");//yyf 20160629 add 初始值是未领
				winprize.setActivityId(activityId);//yyf 20160620 add
				winprize.setActivityType(SystemCommon_Constant.ACTIVITY_TYPE_2);//yyf 20160620 add
				winprize.setWinPrizeFlag("1");//奖励活动默认中奖yyf 20160620 add
				winPrizeInfoService.save(winprize);
				System.out.println(prizeId);
			}else{
				return error("抱歉，此奖品库存不足，请选择其他奖品"); 
			}
		}
		//20160620 yyf add *******获取当前系统时间的的前十位加上token加上当前用户id即surveyUser.getId()进行md5加密
		PropertiesFileUtil pfu = new PropertiesFileUtil();
		String timestamp = System.currentTimeMillis()+"";
		String timestamp_ = timestamp.substring(0, 10);
		String token = pfu.findValue("activity_token");
		String key = timestamp_+token+surveyUser.getId();
		key = MD5.getMD5Code(key).toUpperCase();
		
		MD5Vo mdvo = new MD5Vo(surveyUser.getId().toString(),key,timestamp);
		if(winprize.getId()!=null){
			mdvo.setWinPrizeId(winprize.getId().toString());
		}
		return success("成功",mdvo); 
	}
	/**
	 * 修改奖品数量
	 * 并发处理
	 * @param result
	 * @param awardActivityId
	 * @return
	 */
	private synchronized boolean modifyRemainCount(String prizeId, Long rewardId) {
		boolean flag = true;
		RewardPrizeLink apl = rewardPrizeLinkService.findActivityPrizeByPrizeIdAndRewardId(prizeId,rewardId);
		if(apl.getRemainCount()>0){
			apl.setRemainCount(apl.getRemainCount()-1);
			rewardPrizeLinkService.update(apl);
		}else{
			flag = false;
		}
		return flag;
	}
	/**
	  * 方法名称：registerUserName
	  * 功能描述：匿名用户注册
	  * 创建时间:2016年1月13日下午2:01:09
	  * 创建人: pengfei Zhao
	  * @param @param user
	  * @param @return 
	  * @return MMember
	 */
	public MMember registerUserName(MMember user){
		Map<String,Object> resultMap = new HashMap<String,Object>();
		//校验用户是否存在
		MMember user1 = membermanageService.checkUserIsExist(user);
		if(user1==null){
			//用户名不存在，保存新用户
			user = membermanageService.saveNewUser(user);
		}else{
			return user1;
		}
		return user;
	}

	
	
}
第1级：entity
第2级：EntityCategory.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SSurveyindustry entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_ENTITYCATEGORY", schema = "ZXT")
public class EntityCategory implements java.io.Serializable {

	// Fields

	private Long id;
	private String text; // 凡是树形结构，节点名字都得叫 text，否则展示不出来\
	private Long pid;
	private Integer sort;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;

	// Constructors

	/** default constructor */
	public EntityCategory() {
	}

	/** minimal constructor */
	public EntityCategory(Long id, String industryname,
			Long pid, Long createid, Date createtime, String valid) {
		this.id = id;
		this.text = industryname;
		this.pid = pid;
		this.createid = createid;
		this.createtime = createtime;
		this.valid = valid;
	}

	/** full constructor */
	public EntityCategory(Long id, String industryname,
			Long pid, Long createid, Date createtime,
			Long modifyid, Date modifytime, String valid) {
		this.id = id;
		this.text = industryname;
		this.pid = pid;
		this.createid = createid;
		this.createtime = createtime;
		this.modifyid = modifyid;
		this.modifytime = modifytime;
		this.valid = valid;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "INDUSTRYNAME", nullable = false, length = 100)
	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	@Column(name = "PID", nullable = false, precision = 22, scale = 0)
	public Long getPid() {
		return this.pid;
	}

	public void setPid(Long pid) {
		this.pid = pid;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22,nullable = false, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}

	@Column(name = "SORT", length = 38, nullable = false)
	public Integer getSort() {
		return sort;
	}

	public void setSort(Integer sort) {
		this.sort = sort;
	}
}
第2级：IndustryEntity.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.apache.commons.lang3.StringUtils;
import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * 实体信息列表实体
 */
@Entity
@Table(name = "S_INDUSTRYENTITY", schema = "ZXT")
public class IndustryEntity implements java.io.Serializable {

	// Fields

	private Long id;
	private String entityName;//实体名称
	private String address; // 地址
	private String linkMan;//联系人
	private String linkPhone;//联系人
	private Date foundtime;//成立时间
	private String objectId;
	private String otherId;//实体对应外部系统ID（如：某个加油站ID）
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;
	private String entityType;//实体类别
	private String entityTypeName;//实体类别名称
	private String entityCategory;//实体类型（中石油、中石化）
	private String cauditstatus;//0未审核 1审核
	private String creatUserstatus= "0";//0未分配1已分配账户
	private Date caudittime;
	private Long surveyId;//绑定的问卷ID
	// Constructors
	  /**
	   * 组织机构代码
	   */
	  private String cprovincecode;//sheng
	  private String ccitycode;//市级
	  private String cdistrictcode;//县级
	  private String cbusiness;//经营范围
	  private String csummary;//企业简介
	  private String cindcatcode;//登记类型
	  private String ccomtypcode;
	  private String cbusinesslicenseno;
	  
	/** default constructor */
	public IndustryEntity() {
	}


	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "ENTITYNAME", nullable = false, length = 100)
	public String getEntityName() {
		return entityName;
	}


	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}


	@Column(name = "ADDRESS", length = 100)
	public String getAddress() {
		return address;
	}


	public void setAddress(String address) {
		this.address = address;
	}

	@Column(name = "LINKMAN",  length = 100)
	public String getLinkMan() {
		return linkMan;
	}


	public void setLinkMan(String linkMan) {
		this.linkMan = linkMan;
	}

	@Column(name = "LINKPHONE",  length = 100)
	public String getLinkPhone() {
		return linkPhone;
	}


	public void setLinkPhone(String linkPhone) {
		this.linkPhone = linkPhone;
	}
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "FOUNDTIME", nullable = true, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getFoundtime() {
		return foundtime;
	}


	public void setFoundtime(Date foundtime) {
		this.foundtime = foundtime;
	}

	@Column(name = "ENTITYTYPE", nullable = true, length = 10)
	public String getEntityType() {
		return entityType;
	}


	public void setEntityType(String entityType) {
		this.entityType = entityType;
	}
	@Column(name = "ENTITYCATEGORY", nullable = true, length = 10)
	public String getEntityCategory() {
		return entityCategory;
	}
	public void setEntityCategory(String entityCategory) {
		this.entityCategory = entityCategory;
	}
	@Column(name = "OBJECTID",length = 100)
	public String getObjectId() {
		return objectId;
	}

	public void setObjectId(String objectId) {
		this.objectId = objectId;
	}
	@Column(name = "OTHERID",length = 100)
	public String getOtherId() {
		return otherId;
	}


	public void setOtherId(String otherId) {
		this.otherId = otherId;
	}


	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME",  length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}

	@Column(name = "CAUDITSTATUS", nullable = false, length = 10)
	public String getCauditstatus() {
		return cauditstatus;
	}


	public void setCauditstatus(String cauditstatus) {
		this.cauditstatus = cauditstatus;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CAUDITTIME", length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCaudittime() {
		return caudittime;
	}


	public void setCaudittime(Date caudittime) {
		this.caudittime = caudittime;
	}


	public String getEntityTypeName() {
		return entityTypeName;
	}


	public void setEntityTypeName(String entityTypeName) {
		this.entityTypeName = entityTypeName;
	}
	  @Column(name="CPROVINCECODE", nullable=true, length=50)
	  public String getCprovincecode() {
	    return this.cprovincecode;
	  }

	  public void setCprovincecode(String cprovincecode) {
	    this.cprovincecode = cprovincecode;
	  }

	  @Column(name="CCITYCODE", nullable=true, length=50)
	  public String getCcitycode() {
	    return this.ccitycode;
	  }

	  public void setCcitycode(String ccitycode) {
	    this.ccitycode = ccitycode;
	  }
	  @Column(name="CDISTRICTCODE", nullable=true, length=50)
	  public String getCdistrictcode() {
	    return this.cdistrictcode;
	  }

	  public void setCdistrictcode(String cdistrictcode) {
	    this.cdistrictcode = cdistrictcode;
	  }
	  @Column(name="CBUSINESS", nullable=true, length=2000)
	  public String getCbusiness() {
	    return this.cbusiness;
	  }

	  public void setCbusiness(String cbusiness) {
	    this.cbusiness = cbusiness;
	  }
	  @Column(name="CSUMMARY", nullable=true, length=500)
	  public String getCsummary() {
	    return this.csummary;
	  }

	  public void setCsummary(String csummary) {
	    this.csummary = csummary;
	  }
	  @Column(name="CINDCATCODE", nullable=true, length=50)
	  public String getCindcatcode() {
	    return this.cindcatcode;
	  }

	  public void setCindcatcode(String cindcatcode) {
	    this.cindcatcode = cindcatcode;
	  }

	  @Column(name="CCOMTYPCODE", nullable=true, length=50)
	  public String getCcomtypcode() {
	    return this.ccomtypcode;
	  }

	  public void setCcomtypcode(String ccomtypcode) {
	    this.ccomtypcode = ccomtypcode;
	  }
	  @Column(name="CBUSINESSLICENSENO", nullable=true, length=50)
	  public String getCbusinesslicenseno() {
	    return this.cbusinesslicenseno;
	  }

	  public void setCbusinesslicenseno(String cbusinesslicenseno) {
	    this.cbusinesslicenseno = cbusinesslicenseno;
	  }
      @Column(name = "SURVEYID",length = 100)
		public Long getSurveyId() {
			return surveyId;
		}
		public void setSurveyId(Long surveyId) {
			this.surveyId = surveyId;
		}

		@Column(name = "creatUserstatus",  length = 10)
		public String getCreatUserstatus() {
			return creatUserstatus;
		}

		public void setCreatUserstatus(String creatUserstatus) {
			this.creatUserstatus = creatUserstatus;
		}
	  
}
第2级：IndustryEntitySurvey.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * 行业实体对应的问卷
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Pengfei Zhao
 * <p/>创建日期：2016年6月6日
 * <p/>创建时间：下午2:15:04
 * <p/>功能描述：[]Service
 * <p/>===========================================================
 */
@Entity
@Table(name = "S_INDUSTRYENTITYSURVEY")
public class IndustryEntitySurvey {
	
	@Id
	@GenericGenerator(name = "idGenerator", strategy = "uuid") // 通过注解方式生成一个generator
	@GeneratedValue(generator = "idGenerator") // 使用generator
	private String id;
	
	/**
	 * 对应行业实体标识ID
	 */
	@Column(name = "INDUSTRYENTITYID", length = 32)
	private String industryEntityId;
	
	
	/**
	 * 对应的问卷ID
	 */
	@Column(name = "SURVEYID", length = 32)
	private String surveyId;
	
	
	
	/**
	 * 对应的问卷标题
	 */
	@Column(name = "SURVEYTITLE", length = 1000)
	private String surveyTitle;
	
	
	
	/**
	 * 创建时间
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@DateTimeFormat(pattern="yyyy-MM-dd HH:mm")
	@Column(name ="CREATETIME",nullable=true, length = 17)
	private Date createTime;
	
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}


	public String getIndustryEntityId() {
		return industryEntityId;
	}

	public void setIndustryEntityId(String industryEntityId) {
		this.industryEntityId = industryEntityId;
	}

	public String getSurveyId() {
		return surveyId;
	}

	public void setSurveyId(String surveyId) {
		this.surveyId = surveyId;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public String getSurveyTitle() {
		return surveyTitle;
	}

	public void setSurveyTitle(String surveyTitle) {
		this.surveyTitle = surveyTitle;
	}
	

}
第2级：Option.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SOption entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_OPTION", schema = "ZXT")
public class Option implements java.io.Serializable {

	// Fields

	private Long id;
	private Long questionid;
	private String optionText; //  OPTION 是 Oracle 关键词，所以此处用 optionText 而非 option
	private int sort;
	private Long selectnum;
	private String requireinput;
	
	private String optiontype; // 选项类型（对于组合选择题，左侧的选项存1，上面的选项存2）
	/**
	 * 问题重现：这两个字段是后来开发过程中新增的，然后手动在数据库加了这俩字段，原来已经存在的记录的这俩字段值就是空的。
	 * 出现问题：页面读取 optionList 的时候会报错：java.lang.IllegalArgumentException，实际上就是无法将空值转换成 int 类型，如果定义为 Integer 类型就不会出这个问题了。
	 * 解决办法：要么改字段类型，要么给已经存在的记录的该字段统一赋个值。
	 */
	private int score; // 选项分值（适用于打分题） 
	
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "QUESTIONID", nullable = false, precision = 22, scale = 0)
	public Long getQuestionid() {
		return this.questionid;
	}

	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}

	@Column(name = "OPTIONTEXT", nullable = false, length = 500)
	public String getOptionText() {
		return this.optionText;
	}

	@Column(name = "OPTIONTYPE", nullable = false, length = 8)
	public String getOptiontype() {
		return optiontype;
	}

	public void setOptiontype(String optiontype) {
		this.optiontype = optiontype;
	}

	@Column(name = "SCORE", precision = 22, scale = 0)
	public int getScore() {
		return score;
	}

	public void setScore(int score) {
		this.score = score;
	}

	public void setOptionText(String optionText) {
		this.optionText = optionText;
	}

	@Column(name = "SORT", nullable = false, precision = 22, scale = 0)
	public int getSort() {
		return this.sort;
	}

	public void setSort(int sort) {
		this.sort = sort;
	}

	@Column(name = "SELECTNUM", precision = 22, scale = 0)
	public Long getSelectnum() {
		return this.selectnum;
	}

	public void setSelectnum(Long selectnum) {
		this.selectnum = selectnum;
	}

	@Column(name = "REQUIREINPUT", nullable = false, length = 1)
	public String getRequireinput() {
		return this.requireinput;
	}

	public void setRequireinput(String requireinput) {
		this.requireinput = requireinput;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}

}
第2级：ParticipantFilter.java
package com.guangfan.zxt.surveymanage.entity;

import java.io.Serializable;
import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Ryu Zheng
 * <p/>创建日期：2013-11-7
 * <p/>创建时间：上午11:26:45
 * <p/>功能描述：投票过滤表
 * <p/>===========================================================
 */
@Entity
@Table(name = "V_ParticipantFilter")
public class ParticipantFilter implements Serializable {
	private static final long serialVersionUID = 1L;
	
	/** 编号 */
	private Long id;
	/** 所属问卷编号 */
	private Long questionnaireId;
	/** 参与投票用户名 */
	private String userName;
	/** 参与投票 IP */
	private String votedIp;
	/** 参与投票 cookie */
	private String votedCookie;
	/** 记录创建时间 */
	private Date createTime;
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "NPARFILID", unique = true, nullable = true)
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	
	@Column(name = "NQUESTIONNAIREID", nullable = false, precision = 22, scale = 0)
	public Long getQuestionnaireId() {
		return questionnaireId;
	}
	public void setQuestionnaireId(Long questionnaireId) {
		this.questionnaireId = questionnaireId;
	}
	
	@Column(name = "CVOTEDUSERNAME", nullable = false, length = 50)
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	
	@Column(name = "CVOTEDIP", nullable = false, length = 100)
	public String getVotedIp() {
		return votedIp;
	}
	public void setVotedIp(String votedIp) {
		this.votedIp = votedIp;
	}
	
	@Column(name = "CVOTEDCOOKIE", nullable = true, length = 200)
	public String getVotedCookie() {
		return votedCookie;
	}
	public void setVotedCookie(String votedCookie) {
		this.votedCookie = votedCookie;
	}
	
	@Temporal(TemporalType.DATE)
	@Column(name = "DCREATETIME", nullable = false, length = 7)
	@JsonSerialize(using = JsonDateSerializer.class)
	public Date getCreateTime() {
		return createTime;
	}
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}
	
}
第2级：Question.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SQuestion entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_QUESTION", schema = "ZXT")
public class Question implements java.io.Serializable {

	// Fields

	private Long id;
	private Long surveyid;
	private String description;
	private String question;
	private String questiontype;
	private int sort;
	private String required; // 是否必填
	private Integer selectmin; // 最少选择几项
	private Integer selectmax; // 最多选择几项	
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;

	/**
	 * 是否需要手动选择
	 */
	private String isSelect;
	/**
	 * 当设置为需要手动选择时，选择的数据源类型
	 */
	private Long questionCateId;
	// Constructors

	/** default constructor */
	public Question() {
	}

	/** minimal constructor */
	public Question(Long id, Long surveyid, String question,
			String questiontype, int sort, Long createid,
			Date createtime, String valid) {
		this.id = id;
		this.surveyid = surveyid;
		this.question = question;
		this.questiontype = questiontype;
		this.sort = sort;
		this.createid = createid;
		this.createtime = createtime;
		this.valid = valid;
	}

	/** full constructor */
	public Question(Long id, Long surveyid, String description,
			String question, String questiontype, int sort,
			Long createid, Date createtime, Long modifyid,
			Date modifytime, String valid) {
		this.id = id;
		this.surveyid = surveyid;
		this.description = description;
		this.question = question;
		this.questiontype = questiontype;
		this.sort = sort;
		this.createid = createid;
		this.createtime = createtime;
		this.modifyid = modifyid;
		this.modifytime = modifytime;
		this.valid = valid;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "SURVEYID", nullable = false, precision = 22, scale = 0)
	public Long getSurveyid() {
		return this.surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	@Column(name = "DESCRIPTION", length = 4000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "QUESTION", nullable = false, length = 1000)
	public String getQuestion() {
		return this.question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	@Column(name = "QUESTIONTYPE", nullable = false, length = 1)
	public String getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	@Column(name = "SORT", nullable = false, precision = 22, scale = 0)
	public int getSort() {
		return this.sort;
	}

	public void setSort(int sort) {
		this.sort = sort;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}
	@Column(name = "REQUIRED", nullable = false, length = 1)
	public String getRequired() {
		return required;
	}

	public void setRequired(String required) {
		this.required = required;
	}

	@Column(name = "SELECTMAX", precision = 22, scale = 0)
	public Integer getSelectmax() {
		return selectmax;
	}

	public void setSelectmax(Integer selectmax) {
		this.selectmax = selectmax;
	}

	@Column(name = "SELECTMIN", precision = 22, scale = 0)
	public Integer getSelectmin() {
		return selectmin;
	}

	public void setSelectmin(Integer selectmin) {
		this.selectmin = selectmin;
	}
	
	@Column(name = "ISSELECT",length=1)
	public String getIsSelect() {
		return isSelect;
	}

	public void setIsSelect(String isSelect) {
		this.isSelect = isSelect;
	}

	@Column(name = "QUESTIONCATEID")
	public Long getQuestionCateId() {
		return questionCateId;
	}

	public void setQuestionCateId(Long questionCateId) {
		this.questionCateId = questionCateId;
	}
}
第2级：Survey.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import com.guangfan.zxt.common.SystemCommon_Constant;

import dk.util.JsonDateSerializer;

/**
 * SSurvey entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEY", schema = "ZXT")
public class Survey implements java.io.Serializable {

	/**
	 * 编号
	 */
	private Long id;
	/**
	 * 标题
	 */
	private String subject;
	/**
	 * 所属行业分类
	 */
	private Long industryid;
	/**
	 * 所属类别
	 */
	private Long categoryid;
	/**
	 * 说明
	 */
	private String description;
	/**
	 * 标签
	 */
	private String tags;
	/**
	 * 数量限制
	 */
	private Integer numlimit; // 如果设置为 int 类型，当表单中此文本框未填值时候，就会报错：java.lang.NumberFormatException: For input string: "" --> 不能讲空字符串转换成整数
	/**
	 * 开始时间
	 */
	private Date begintime;
	/**
	 * 结束时间
	 */
	private Date endtime;
	/**
	 * 状态：1、投票进行中 2、已关闭（审核通过后才有值）
	 */
	private String status;
	/**
	 * 奖励积分
	 */
	private Integer integral;
	/**
	 * 参与人数
	 */
	private int participatenum;
	/**
	 * 结束语
	 */
	private String enddescription;
	/**
	 * 创建人
	 */
	private Long createid;
	/**
	 * 创建时间
	 */
	private Date createtime;
	/**
	 * 修改人
	 */
	private Long modifyid;
	/**
	 * 修改时间
	 */
	private Date modifytime;
	/**
	 * 审核人
	 */
	private Long auditid;
	/**
	 * 审核时间
	 */
	private Date audittime;
	/**
	 * 审核状态
	 */
	private String auditstatus;
	/**
	 * 审核意见
	 */
	private String auditopinion;
	/**
	 * 是否有效
	 */
	private String valid;
	
	private String picturePath;  // 图标路径
	/**
	 * 是否允许公示
	 */
	private String isShow = SystemCommon_Constant.SIGN_YES_0; 
	// Constructors

	/** default constructor */
	public Survey() {
	}

	/** minimal constructor */
	public Survey(Long id, String subject, Long industryid,
			Long categoryid, int participatenum,
			Long createid, Date createtime, String auditstatus,
			String valid) {
		this.id = id;
		this.subject = subject;
		this.industryid = industryid;
		this.categoryid = categoryid;
		this.participatenum = participatenum;
		this.createid = createid;
		this.createtime = createtime;
		this.auditstatus = auditstatus;
		this.valid = valid;
	}

	/** full constructor */
	public Survey(Long id, String subject, Long industryid,
			Long categoryid, String description, String tags,
			Integer numlimit, Date begintime, Date endtime, String status,
			Integer integral, int participatenum,
			String enddescription, Long createid, Date createtime,
			Long modifyid, Date modifytime, Long auditid,
			Date audittime, String auditstatus, String auditopinion,
			String valid) {
		this.id = id;
		this.subject = subject;
		this.industryid = industryid;
		this.categoryid = categoryid;
		this.description = description;
		this.tags = tags;
		this.numlimit = numlimit;
		this.begintime = begintime;
		this.endtime = endtime;
		this.status = status;
		this.integral = integral;
		this.participatenum = participatenum;
		this.enddescription = enddescription;
		this.createid = createid;
		this.createtime = createtime;
		this.modifyid = modifyid;
		this.modifytime = modifytime;
		this.auditid = auditid;
		this.audittime = audittime;
		this.auditstatus = auditstatus;
		this.auditopinion = auditopinion;
		this.valid = valid;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "SUBJECT", nullable = false, length = 200)
	public String getSubject() {
		return this.subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	@Column(name = "INDUSTRYID", nullable = false, length = 50)
	public Long getIndustryid() {
		return this.industryid;
	}

	public void setIndustryid(Long industryid) {
		this.industryid = industryid;
	}

	@Column(name = "CATEGORYID", nullable = false, precision = 22, scale = 0)
	public Long getCategoryid() {
		return this.categoryid;
	}

	public void setCategoryid(Long categoryid) {
		this.categoryid = categoryid;
	}

	@Column(name = "DESCRIPTION", length = 4000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Column(name = "TAGS", length = 200)
	public String getTags() {
		return this.tags;
	}

	public void setTags(String tags) {
		this.tags = tags;
	}

	@Column(name = "NUMLIMIT", precision = 22, scale = 0)
	public Integer getNumlimit() {
		return this.numlimit;
	}

	public void setNumlimit(Integer numlimit) {
		this.numlimit = numlimit;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "BEGINTIME", length = 7)
	public Date getBegintime() {
		return this.begintime;
	}

	public void setBegintime(Date begintime) {
		this.begintime = begintime;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "ENDTIME", length = 7)
	public Date getEndtime() {
		return this.endtime;
	}

	public void setEndtime(Date endtime) {
		this.endtime = endtime;
	}

	@Column(name = "STATUS", length = 1)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Column(name = "INTEGRAL", precision = 22, scale = 0)
	public Integer getIntegral() {
		return this.integral;
	}

	public void setIntegral(Integer integral) {
		this.integral = integral;
	}

	@Column(name = "PARTICIPATENUM", nullable = false, precision = 22, scale = 0)
	public int getParticipatenum() {
		return this.participatenum;
	}

	public void setParticipatenum(int participatenum) {
		this.participatenum = participatenum;
	}

	@Column(name = "ENDDESCRIPTION", length = 4000)
	public String getEnddescription() {
		return this.enddescription;
	}

	public void setEnddescription(String enddescription) {
		this.enddescription = enddescription;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "AUDITID", precision = 22, scale = 0)
	public Long getAuditid() {
		return this.auditid;
	}

	public void setAuditid(Long auditid) {
		this.auditid = auditid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "AUDITTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getAudittime() {
		return this.audittime;
	}

	public void setAudittime(Date audittime) {
		this.audittime = audittime;
	}

	@Column(name = "AUDITSTATUS", nullable = false, length = 1)
	public String getAuditstatus() {
		return this.auditstatus;
	}

	public void setAuditstatus(String auditstatus) {
		this.auditstatus = auditstatus;
	}

	@Column(name = "AUDITOPINION", length = 400)
	public String getAuditopinion() {
		return this.auditopinion;
	}

	public void setAuditopinion(String auditopinion) {
		this.auditopinion = auditopinion;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}

	@Column(name = "PICTUREPATH", length = 200,nullable=true)
	public String getPicturePath() {
		return picturePath;
	}

	public void setPicturePath(String picturePath) {
		this.picturePath = picturePath;
	}
	
	@Column(name = "ISSHOW", length = 1,nullable=false)
	public String getIsShow() {
		return isShow;
	}

	public void setIsShow(String isShow) {
		this.isShow = isShow;
	}
}
第2级：SurveyCategory.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SurveyCategory entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYCATEGORY", schema = "ZXT")
public class SurveyCategory implements java.io.Serializable {

	// Fields

	private Long id;
	private String categoryname;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;

	// Constructors

	/** default constructor */
	public SurveyCategory() {
	}

	/** minimal constructor */
	public SurveyCategory(Long id, String categoryname,
			Long createid, Date createtime, String valid) {
		this.id = id;
		this.categoryname = categoryname;
		this.createid = createid;
		this.createtime = createtime;
		this.valid = valid;
	}

	/** full constructor */
	public SurveyCategory(Long id, String categoryname,
			Long createid, Date createtime, Long modifyid,
			Date modifytime, String valid) {
		this.id = id;
		this.categoryname = categoryname;
		this.createid = createid;
		this.createtime = createtime;
		this.modifyid = modifyid;
		this.modifytime = modifytime;
		this.valid = valid;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "CATEGORYNAME", nullable = false, length = 100)
	public String getCategoryname() {
		return this.categoryname;
	}

	public void setCategoryname(String categoryname) {
		this.categoryname = categoryname;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}

}
第2级：SurveyCharts.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SSurveyindustry entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYCHARTS")
public class SurveyCharts implements java.io.Serializable {

	// Fields

	private Long id;
	private Long todayTnum;//当天
	private Long todayMnum;//当天会员评价数量
	private Long todayNnum;//当天匿名评价数量
	private Date countTime;//统计时间
	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "TODAYTNUM", length = 50)
	public Long getTodayTnum() {
		return todayTnum;
	}

	public void setTodayTnum(Long todayTnum) {
		this.todayTnum = todayTnum;
	}
	@Column(name = "TODAYMNUM", length = 50)
	public Long getTodayMnum() {
		return todayMnum;
	}

	public void setTodayMnum(Long todayMnum) {
		this.todayMnum = todayMnum;
	}
	@Column(name = "TODAYNNUM", length = 50)
	public Long getTodayNnum() {
		return todayNnum;
	}

	public void setTodayNnum(Long todayNnum) {
		this.todayNnum = todayNnum;
	}
	@Temporal(TemporalType.DATE)
	@Column(name = "COUNTTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCountTime() {
		return countTime;
	}

	public void setCountTime(Date countTime) {
		this.countTime = countTime;
	}


}
第2级：SurveyChartsForSurveyEntity.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SSurveyindustry entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYCHARTSFORSURVEYENTITY")
public class SurveyChartsForSurveyEntity implements java.io.Serializable {

	// Fields

	private Long id;
	private Long todayTnum;//当天
	private Long todayMnum;//当天会员评价数量
	private Long todayNnum;//当天匿名评价数量
	private Date countTime;//统计时间
	private String industryEntityId;//行业实体ID
	private String surveyId;//行业实体ID
	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "TODAYTNUM", length = 50)
	public Long getTodayTnum() {
		return todayTnum;
	}

	public void setTodayTnum(Long todayTnum) {
		this.todayTnum = todayTnum;
	}
	@Column(name = "TODAYMNUM", length = 50)
	public Long getTodayMnum() {
		return todayMnum;
	}

	public void setTodayMnum(Long todayMnum) {
		this.todayMnum = todayMnum;
	}
	@Column(name = "TODAYNNUM", length = 50)
	public Long getTodayNnum() {
		return todayNnum;
	}

	public void setTodayNnum(Long todayNnum) {
		this.todayNnum = todayNnum;
	}
	@Temporal(TemporalType.DATE)
	@Column(name = "COUNTTIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCountTime() {
		return countTime;
	}

	public void setCountTime(Date countTime) {
		this.countTime = countTime;
	}
	@Column(name = "INDUSTRYENTITYID", length = 50)
	public String getIndustryEntityId() {
		return industryEntityId;
	}

	public void setIndustryEntityId(String industryEntityId) {
		this.industryEntityId = industryEntityId;
	}
	@Column(name = "SURVEYID", length = 50)
	public String getSurveyId() {
		return surveyId;
	}
	public void setSurveyId(String surveyId) {
		this.surveyId = surveyId;
	}
	
}
第2级：SurveyEvaluation.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateTimeSerializer;

/**
 * SVoterecord entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYEVALUATION", schema = "ZXT")
public class SurveyEvaluation implements java.io.Serializable {

	// Fields

	private Long id;//评价id
	private String surveyid;//问卷id
	private String industryEntityId;//行业实体id
	private String snBaseId;//标签id，每一个标签只能评价一次，所以标签和评论是1对1关系
	private String surveyPartakeUserId;//评价人id
	private Date createTime;//评价时间
	private String isValid;

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "SURVEYID", nullable = false, length = 100)
	public String getSurveyid() {
		return this.surveyid;
	}

	public void setSurveyid(String surveyid) {
		this.surveyid = surveyid;
	}

	@Column(name = "INDUSTRYENTITYID", length = 100)
	public String getIndustryEntityId() {
		return industryEntityId;
	}

	public void setIndustryEntityId(String industryEntityId) {
		this.industryEntityId = industryEntityId;
	}

	@Column(name = "SNBASEID", length = 100)
	public String getSnBaseId() {
		return snBaseId;
	}
	
	public void setSnBaseId(String snBaseId) {
		this.snBaseId = snBaseId;
	}
	@Column(name = "SURVEYPARTAKEUSERID", length=100)
	public String getSurveyPartakeUserId() {
		return surveyPartakeUserId;
	}

	public void setSurveyPartakeUserId(String surveyPartakeUserId) {
		this.surveyPartakeUserId = surveyPartakeUserId;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateTimeSerializer.class)
	public Date getCreateTime() {
		return createTime;
	}
	
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}
	@Column(name = "ISVALID", length=10)
	public String getIsValid() {
		return isValid;
	}

	public void setIsValid(String isValid) {
		this.isValid = isValid;
	}
	
}
第2级：SurveyIndustry.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * SSurveyindustry entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYINDUSTRY", schema = "ZXT")
public class SurveyIndustry implements java.io.Serializable {

	// Fields

	private Long id;
	private String text; // 凡是树形结构，节点名字都得叫 text，否则展示不出来
	private String objectType; // 分配的的类别如（jiayouzhan、dianti）15/12/25pfzhao
	private Long pid;
	private Integer sort;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;
	
	private Long surveyId;//绑定的问卷ID  yf 20160321 add
	private String surveyTitle;//绑定的问卷title  yf 20160321 add

	// Constructors

	/** default constructor */
	public SurveyIndustry() {
	}

	/** minimal constructor */
	public SurveyIndustry(Long id, String industryname,
			Long pid, Long createid, Date createtime, String valid) {
		this.id = id;
		this.text = industryname;
		this.pid = pid;
		this.createid = createid;
		this.createtime = createtime;
		this.valid = valid;
	}

	/** full constructor */
	public SurveyIndustry(Long id, String industryname,
			Long pid, Long createid, Date createtime,
			Long modifyid, Date modifytime, String valid) {
		this.id = id;
		this.text = industryname;
		this.pid = pid;
		this.createid = createid;
		this.createtime = createtime;
		this.modifyid = modifyid;
		this.modifytime = modifytime;
		this.valid = valid;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "INDUSTRYNAME", nullable = false, length = 100)
	public String getText() {
		return this.text;
	}

	public void setText(String text) {
		this.text = text;
	}

	@Column(name = "PID", nullable = false, precision = 22, scale = 0)
	public Long getPid() {
		return this.pid;
	}

	public void setPid(Long pid) {
		this.pid = pid;
	}
	
	@Column(name = "SORT", length = 38, nullable = false)
	public Integer getSort() {
		return sort;
	}

	public void setSort(Integer sort) {
		this.sort = sort;
	}

	@Column(name = "CREATEID", nullable = false, precision = 22, scale = 0)
	public Long getCreateid() {
		return this.createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	@Column(name = "MODIFYID", precision = 22, scale = 0)
	public Long getModifyid() {
		return this.modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "MODIFYTIME", length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getModifytime() {
		return this.modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}
	@Column(name = "OBJECTTYPE", nullable = false, length = 50)
	public String getObjectType() {
		return objectType;
	}

	public void setObjectType(String objectType) {
		this.objectType = objectType;
	}
	
	 @Column(name = "SURVEYID",length = 100)
	public Long getSurveyId() {
		return surveyId;
	}
	public void setSurveyId(Long surveyId) {
		this.surveyId = surveyId;
	}
	
	@Column(name = "SURVEYTITLE",length = 1000)
	public String getSurveyTitle() {
		return surveyTitle;
	}

	public void setSurveyTitle(String surveyTitle) {
		this.surveyTitle = surveyTitle;
	}
}
第2级：SurveyIndustrySurvey.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.GenericGenerator;
import org.springframework.format.annotation.DateTimeFormat;

/**
 * 行业实体对应的问卷
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Pengfei Zhao
 * <p/>创建日期：2016年6月6日
 * <p/>创建时间：下午2:15:04
 * <p/>功能描述：[]Service
 * <p/>===========================================================
 */
@Entity
@Table(name = "S_SURVEYINDUSTRYSURVEY")
public class SurveyIndustrySurvey {
	
	@Id
	@GenericGenerator(name = "idGenerator", strategy = "uuid") // 通过注解方式生成一个generator
	@GeneratedValue(generator = "idGenerator") // 使用generator
	private String id;
	
	/**
	 * 对应行业实体标识ID
	 */
	@Column(name = "SURVEYINDUSTRYID", length = 32)
	private String surveyIndustryId;
	
	
	/**
	 * 对应的问卷ID
	 */
	@Column(name = "SURVEYID", length = 32)
	private String surveyId;
	
	
	
	/**
	 * 对应的问卷标题
	 */
	@Column(name = "SURVEYTITLE", length = 1000)
	private String surveyTitle;
	
	
	
	/**
	 * 创建时间
	 */
	@Temporal(TemporalType.TIMESTAMP)
	@DateTimeFormat(pattern="yyyy-MM-dd HH:mm")
	@Column(name ="CREATETIME",nullable=true, length = 17)
	private Date createTime;
	
	
	public String getId() {
		return id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public String getSurveyIndustryId() {
		return surveyIndustryId;
	}

	public void setSurveyIndustryId(String surveyIndustryId) {
		this.surveyIndustryId = surveyIndustryId;
	}

	public String getSurveyId() {
		return surveyId;
	}

	public void setSurveyId(String surveyId) {
		this.surveyId = surveyId;
	}

	public Date getCreateTime() {
		return createTime;
	}

	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}

	public String getSurveyTitle() {
		return surveyTitle;
	}

	public void setSurveyTitle(String surveyTitle) {
		this.surveyTitle = surveyTitle;
	}
	

}
第2级：SurveyMerchant.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateSerializer;

/**
 * 
* Filename: SurveyMerchant.java  
* Description: 问卷相关商户类
* Copyright:Copyright (c)2014
* Company:  GuangFan 
* @author:  YangHui
* @version: 1.0  
* @Create:  2014-10-11  
* Modification History:  
* Date								Author			Version
* ------------------------------------------------------------------  
* 2014-10-11 上午9:11:31				YangHui 	1.0
 */
@Entity
@Table(name="S_SURVEYMERCHANT")
public class SurveyMerchant {
	
	/**
	 * 主键
	 */
	private Long id;
	/**
	 * 问卷ID
	 */
	private Long surveyId;
	/**
	 * 用户ID(当匿名投票时存放一个负数，实名时就是当前登录用户的ID)
	 */
	private Long userId;
	/**
	 * 商户名称
	 */
	private String merchantName;
	/**
	 * 问卷类别
	 */
	private Long cateId;
	private Date createTime;
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "SURVEYID", nullable = false)
	public Long getSurveyId() {
		return surveyId;
	}
	public void setSurveyId(Long surveyId) {
		this.surveyId = surveyId;
	}
	@Column(name = "USERID", nullable = false)
	public Long getUserId() {
		return userId;
	}
	public void setUserId(Long userId) {
		this.userId = userId;
	}
	@Column(name = "MERCHANTNAME", nullable = false)
	public String getMerchantName() {
		return merchantName;
	}
	public void setMerchantName(String merchantName) {
		this.merchantName = merchantName;
	}
	@Column(name = "CATEID", nullable = false)
	public Long getCateId() {
		return cateId;
	}
	public void setCateId(Long cateId) {
		this.cateId = cateId;
	}
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreateTime() {
		return createTime;
	}
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}
	
	
	

}
第2级：SurveyPartakeUser.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;


import dk.util.JsonDateSerializer;

/**
 * SSurvey entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_SURVEYPARTAKEUSER", schema = "ZXT")
public class SurveyPartakeUser implements java.io.Serializable {

	/**
	 * 编号
	 */
	private Long id;

	/**
	 * 所属行业分类
	 */
	private Long industryid;
	/**
	 * 油卡号
	 */
	private String oilcardNo;
	/**
	 * 姓名
	 */
	private String username;
	/**
	 * 手机号
	 */
	private String phone;
	/**
	 * 身份证号
	 */
	private String IDCard;
	
	/**
	 * 加油日期
	 */
	private Date oilDate;
	/**
	 * 加油站名称
	 */
	private String oilStationName;
	
	/**
	 * 创建时间
	 */
	private Date createtime;
	/**
	 * 是否有效
	 */
	private String valid;
	/**
	 * 问卷ID
	 */
	private String surveyId;
	/**
	 * 实体ID
	 */
	private String objectId;
	
	
	/** default constructor */
	public SurveyPartakeUser() {
	}
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "INDUSTRYID", nullable = false, length = 50)
	public Long getIndustryid() {
		return this.industryid;
	}

	public void setIndustryid(Long industryid) {
		this.industryid = industryid;
	}
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "CREATETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateSerializer.class)
	public Date getCreatetime() {
		return this.createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}
	@Column(name = "VALID", nullable = false, length = 1)
	public String getValid() {
		return this.valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}
	@Column(name = "OILCARDNO", length = 30)
	public String getOilcardNo() {
		return oilcardNo;
	}
	public void setOilcardNo(String oilcardNo) {
		this.oilcardNo = oilcardNo;
	}
	@Column(name = "USERNAME", length = 30)
	public String getUsername() {
		return username;
	}
	public void setUsername(String username) {
		this.username = username;
	}
	@Column(name = "PHONE", length = 30)
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	
	@Column(name = "IDCARD", length = 30)
	public String getIDCard() {
		return IDCard;
	}
	public void setIDCard(String iDCard) {
		IDCard = iDCard;
	}
	@Temporal(TemporalType.DATE)
	@Column(name = "OILDATE", length = 7)
	public Date getOilDate() {
		return oilDate;
	}
	public void setOilDate(Date oilDate) {
		this.oilDate = oilDate;
	}
	@Column(name = "OILSTATIONNAME", length = 30)
	public String getOilStationName() {
		return oilStationName;
	}
	public void setOilStationName(String oilStationName) {
		this.oilStationName = oilStationName;
	}
	@Column(name = "SURVEYID", length = 30)
	public String getSurveyId() {
		return surveyId;
	}
	public void setSurveyId(String surveyId) {
		this.surveyId = surveyId;
	}
	@Column(name = "OBJECTID", length = 30)
	public String getObjectId() {
		return objectId;
	}
	public void setObjectId(String objectId) {
		this.objectId = objectId;
	}
}
第2级：VoteRecord.java
package com.guangfan.zxt.surveymanage.entity;

import java.util.Date;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.codehaus.jackson.map.annotate.JsonSerialize;
import org.hibernate.annotations.GenericGenerator;

import dk.util.JsonDateTimeSerializer;

/**
 * SVoterecord entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_VOTERECORD", schema = "ZXT")
public class VoteRecord implements java.io.Serializable {

	// Fields

	private Long id;
	private Long surveyid;
	private Long questionid;
	private String questiontype;
	private Long option1id;
	private Long option2id;
	private String answercontent;
	private Long userid;
	private Date votetime;
	private String ipaddress;
	private String batchNumber;

	private String relationObjectType; // 当前问卷针对主体类型（第一次改版：支撑查看针对某一个企业的统计结果）
	private Long relationObjectId; // 当前问卷针对主体 id
	
	private Long cObjectId; // 存放 C_OBJECT表的 id（第二次改版：支撑实体信息存在外部系统）
	// Constructors
	private Long surveyPartakeUserId; //评论用户列表Id
	

	/** default constructor */
	public VoteRecord() {
	}

	/** minimal constructor */
	public VoteRecord(Long id, Long surveyid,
			Long questionid, String questiontype, Long option1id,
			Date votetime) {
		this.id = id;
		this.surveyid = surveyid;
		this.questionid = questionid;
		this.questiontype = questiontype;
		this.option1id = option1id;
		this.votetime = votetime;
	}

	/** full constructor */
	public VoteRecord(Long id, Long surveyid,
			Long questionid, String questiontype, Long option1id,
			Long option2id, String answercontent, Long userid,
			Date votetime) {
		this.id = id;
		this.surveyid = surveyid;
		this.questionid = questionid;
		this.questiontype = questiontype;
		this.option1id = option1id;
		this.option2id = option2id;
		this.answercontent = answercontent;
		this.userid = userid;
		this.votetime = votetime;
	}

	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "SURVEYID", nullable = false, precision = 22, scale = 0)
	public Long getSurveyid() {
		return this.surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	@Column(name = "QUESTIONID", nullable = false, precision = 22, scale = 0)
	public Long getQuestionid() {
		return this.questionid;
	}

	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}

	@Column(name = "QUESTIONTYPE", nullable = false, length = 8)
	public String getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	@Column(name = "OPTION1ID", precision = 22, scale = 0)
	public Long getOption1id() {
		return this.option1id;
	}

	public void setOption1id(Long option1id) {
		this.option1id = option1id;
	}

	@Column(name = "OPTION2ID", precision = 22, scale = 0)
	public Long getOption2id() {
		return this.option2id;
	}

	public void setOption2id(Long option2id) {
		this.option2id = option2id;
	}

	@Column(name = "ANSWERCONTENT", length = 4000)
	public String getAnswercontent() {
		return this.answercontent;
	}

	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}
	
	@Column(name = "RELATIONOBJECTTYPE", length = 100)
	public String getRelationObjectType() {
		return this.relationObjectType;
	}

	public void setRelationObjectType(String relationObjectType) {
		this.relationObjectType = relationObjectType;
	}
	
	@Column(name = "RELATIONOBJECTID", precision = 22, scale = 0)
	public Long getRelationObjectId() {
		return this.relationObjectId;
	}

	public void setRelationObjectId(Long relationObjectId) {
		this.relationObjectId = relationObjectId;
	}

	@Column(name = "USERID", precision = 22, scale = 0)
	public Long getUserid() {
		return this.userid;
	}

	public void setUserid(Long userid) {
		this.userid = userid;
	}
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "VOTETIME", nullable = false, length = 7)
	@JsonSerialize(using=JsonDateTimeSerializer.class)
	public Date getVotetime() {
		return this.votetime;
	}

	public void setVotetime(Date votetime) {
		this.votetime = votetime;
	}
	public String getIpaddress() {
		return ipaddress;
	}

	public void setIpaddress(String ipaddress) {
		this.ipaddress = ipaddress;
	}
	public String getBatchNumber() {
		return batchNumber;
	}

	public void setBatchNumber(String batchNumber) {
		this.batchNumber = batchNumber;
	}
	@Column(name = "COBJECTID", precision = 22, scale = 0)
	public Long getcObjectId() {
		return cObjectId;
	}

	public void setcObjectId(Long cObjectId) {
		this.cObjectId = cObjectId;
	}
	@Column(name = "SURVEYPARTAKEUSERID", precision = 22, scale = 0)
	public Long getSurveyPartakeUserId() {
		return surveyPartakeUserId;
	}

	public void setSurveyPartakeUserId(Long surveyPartakeUserId) {
		this.surveyPartakeUserId = surveyPartakeUserId;
	}
	
}
第2级：VoteRecordPhone.java
package com.guangfan.zxt.surveymanage.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

@Entity
@Table(name="S_VOTERECORDPHONE")
public class VoteRecordPhone {

	private Long id;
	private Long surveyid;
	private Long userid;
	private String phone;
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	@Column(name = "SURVEYID", nullable = false, precision = 22, scale = 0)
	public Long getSurveyid() {
		return surveyid;
	}
	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}
	@Column(name = "USERID", precision = 22, scale = 0)
	public Long getUserid() {
		return userid;
	}
	public void setUserid(Long userid) {
		this.userid = userid;
	}
	@Column(name = "PHONE", length=11)
	public String getPhone() {
		return phone;
	}
	public void setPhone(String phone) {
		this.phone = phone;
	}
	
	
	
}
第2级：VoteRecordReport.java
package com.guangfan.zxt.surveymanage.entity;


import java.text.DecimalFormat;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;

import org.hibernate.annotations.GenericGenerator;

/**
 * SVoterecordReport entity. @author MyEclipse Persistence Tools
 */
@Entity
@Table(name = "S_VOTERECORD_REPORT", schema = "ZXT")
public class VoteRecordReport implements java.io.Serializable {

	// Fields

	private Long id;
	private Long surveyid;
	private String surveyname;
	private Long questionid;
	private String questionname;
	private String questiontype;
	private Long option1id;
	private String option1name;
	private Long option2id;
	private String option2name;
	private Long votenum;
	private Double votepercent;
	private Long optionValue;
	
	// Property accessors
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@GenericGenerator(name = "idGenerator", strategy = "native")
	@Column(name = "ID", unique = true, nullable = true)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@Column(name = "SURVEYID", nullable = false, precision = 22, scale = 0)
	public Long getSurveyid() {
		return this.surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	@Column(name = "SURVEYNAME", length = 400)
	public String getSurveyname() {
		return this.surveyname;
	}

	public void setSurveyname(String surveyname) {
		this.surveyname = surveyname;
	}

	@Column(name = "QUESTIONID", nullable = false, precision = 22, scale = 0)
	public Long getQuestionid() {
		return this.questionid;
	}

	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}

	@Column(name = "QUESTIONNAME", length = 400)
	public String getQuestionname() {
		return this.questionname;
	}

	public void setQuestionname(String questionname) {
		this.questionname = questionname;
	}

	@Column(name = "QUESTIONTYPE", nullable = false, length = 8)
	public String getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	@Column(name = "OPTION1ID", precision = 22, scale = 0)
	public Long getOption1id() {
		return this.option1id;
	}

	public void setOption1id(Long option1id) {
		this.option1id = option1id;
	}

	@Column(name = "OPTION1NAME", length = 400)
	public String getOption1name() {
		return this.option1name;
	}

	public void setOption1name(String option1name) {
		this.option1name = option1name;
	}

	@Column(name = "OPTION2ID", precision = 22, scale = 0)
	public Long getOption2id() {
		return this.option2id;
	}

	public void setOption2id(Long option2id) {
		this.option2id = option2id;
	}

	@Column(name = "OPTION2NAME", length = 400)
	public String getOption2name() {
		return this.option2name;
	}

	public void setOption2name(String option2name) {
		this.option2name = option2name;
	}

	@Column(name = "VOTENUM", precision = 22, scale = 0)
	public Long getVotenum() {
		return this.votenum;
	}

	public void setVotenum(Long votenum) {
		this.votenum = votenum;
	}

	@Column(name = "VOTEPERCENT", precision = 22, scale = 0)
	public Double getVotepercent() {
		return this.votepercent;
	}

	public void setVotepercent(Double votepercent) {
		this.votepercent = votepercent;
	}

	@Column(name = "OPTION_VALUE", precision = 22, scale = 0)
	public Long getOptionValue() {
		return this.optionValue;
	}

	public void setOptionValue(Long optionValue) {
		this.optionValue = optionValue;
	}
}
第1级：model
第2级：EchartDataBean.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus.Series;

public class EchartDataBean{
	 public List<String> legend = new ArrayList<String>();//数据分组
	    public List<String> category = new ArrayList<String>();//横坐标
	    public List<SeriesBean> series = new ArrayList<SeriesBean>();//纵坐标
	    public EchartDataBean(List<String> legendList, List<String> categoryList, List<SeriesBean> seriesList) {
	        super();
	        this.legend = legendList;
	        this.category = categoryList;
	        this.series = seriesList;
	    }
		public List<String> getLegend() {
			return legend;
		}
		public void setLegend(List<String> legend) {
			this.legend = legend;
		}
		public List<String> getCategory() {
			return category;
		}
		public void setCategory(List<String> category) {
			this.category = category;
		}
		public List<SeriesBean> getSeries() {
			return series;
		}
		public void setSeries(List<SeriesBean> series) {
			this.series = series;
		}
	
}
第2级：OptionVo.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.guangfan.zxt.surveymanage.entity.VoteRecordReport;

/**
 * @description 
 * @author 燕珂
 * @createtime 2014-3-29 下午04:52:15
 */
public class OptionVo {
	private Long id;
	private Long questionid;
	private String optionText; //  OPTION 是 Oracle 关键词，所以此处用 optionText 而非 option
	private int sort;
	private Long selectnum;
	private String requireinput;
	
	private String optiontype; // 选项类型（对于组合选择题，左侧的选项存1，上面的选项存2）
	/**
	 * 问题重现：这两个字段是后来开发过程中新增的，然后手动在数据库加了这俩字段，原来已经存在的记录的这俩字段值就是空的。
	 * 出现问题：页面读取 optionList 的时候会报错：java.lang.IllegalArgumentException，实际上就是无法将空值转换成 int 类型，如果定义为 Integer 类型就不会出这个问题了。
	 * 解决办法：要么改字段类型，要么给已经存在的记录的该字段统一赋个值。
	 */
	private int score; // 选项分值（适用于打分题） 
	
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;
	
	/**add by yanghui  2014-05-05  begin   为显示投票明细而添加的字段*/
	private String isCheck;  //定义选项被选择了
	private String answercontent;
	private Long option2Id;  //  针对组合选择题时需要用到
	/**add by yanghui  2014-05-05  end */
	
	private List<VoteRecordReportVo> recordReportVoList = new ArrayList<VoteRecordReportVo>(); // 投票记录统计列表
	
	// 组合打分题专用
	private String s_averageScore; // 平均分
	private Integer totalScore; // 总分
	//20160119 yyf add 
	private String answerText="";
	public Long getCreateid() {
		return createid;
	}
	public void setCreateid(Long createid) {
		this.createid = createid;
	}
	public Date getCreatetime() {
		return createtime;
	}
	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Long getModifyid() {
		return modifyid;
	}
	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}
	public Date getModifytime() {
		return modifytime;
	}
	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}
	public String getOptionText() {
		return optionText;
	}
	public void setOptionText(String optionText) {
		this.optionText = optionText;
	}
	public String getOptiontype() {
		return optiontype;
	}
	public void setOptiontype(String optiontype) {
		this.optiontype = optiontype;
	}
	public Long getQuestionid() {
		return questionid;
	}
	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}
	public String getRequireinput() {
		return requireinput;
	}
	public void setRequireinput(String requireinput) {
		this.requireinput = requireinput;
	}
	public int getScore() {
		return score;
	}
	public void setScore(int score) {
		this.score = score;
	}
	public Long getSelectnum() {
		return selectnum;
	}
	public void setSelectnum(Long selectnum) {
		this.selectnum = selectnum;
	}
	public int getSort() {
		return sort;
	}
	public void setSort(int sort) {
		this.sort = sort;
	}
	public String getValid() {
		return valid;
	}
	public void setValid(String valid) {
		this.valid = valid;
	}
	public List<VoteRecordReportVo> getRecordReportVoList() {
		return recordReportVoList;
	}
	public void setRecordReportVoList(List<VoteRecordReportVo> recordReportVoList) {
		this.recordReportVoList = recordReportVoList;
	}
	public String getS_averageScore() {
		return s_averageScore;
	}
	public void setS_averageScore(String score) {
		s_averageScore = score;
	}
	public Integer getTotalScore() {
		return totalScore;
	}
	public void setTotalScore(Integer totalScore) {
		this.totalScore = totalScore;
	}
	public String getIsCheck() {
		return isCheck;
	}
	public void setIsCheck(String isCheck) {
		this.isCheck = isCheck;
	}
	public String getAnswercontent() {
		return answercontent;
	}
	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}
	public Long getOption2Id() {
		return option2Id;
	}
	public void setOption2Id(Long option2Id) {
		this.option2Id = option2Id;
	}
	public String getAnswerText() {
		return answerText;
	}
	public void setAnswerText(String answerText) {
		this.answerText = answerText;
	}
	
	
}
第2级：QuestionBean.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import com.guangfan.zxt.surveymanage.entity.Option;

public class QuestionBean {
	private Long id;
	private Long surveyid;
	private String description;
	private String question;
	private String questiontype;
	private int sort;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;
	private Integer selectmin; // 最少选择几项
	
	private Integer selectmax; // 最多选择几项	
	private String required; // 是否必填
	
	private List<VoteAndOptionBean> optionVoList=new ArrayList<VoteAndOptionBean>(); // 选项列表
	// 组合题专用
	private List<Option> optionVoList1=new ArrayList<Option>(); // 左侧的选项
	private List<Option> optionVoList2=new ArrayList<Option>(); // 上面的选项
	
	private int answerNum; // 问题参与人数
	private String answerPercent; // 参与人数占比
	
	// 打分题专用
	private String s_averageScore; // 平均分
	private Integer totalScore; // 总分
	
	
	private String answercontent;
	
	
	
	public void add(VoteAndOptionBean optionVo){
		optionVoList.add(optionVo);
		
	}
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}

	public String getQuestiontype() {
		return questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	public List<VoteAndOptionBean> getOptionVoList() {
		return optionVoList;
	}

	public void setOptionVoList(List<VoteAndOptionBean> optionVoList) {
		this.optionVoList = optionVoList;
	}

	public List<Option> getOptionVoList1() {
		return optionVoList1;
	}

	public void setOptionVoList1(List<Option> optionVoList1) {
		this.optionVoList1 = optionVoList1;
	}

	public List<Option> getOptionVoList2() {
		return optionVoList2;
	}

	public void setOptionVoList2(List<Option> optionVoList2) {
		this.optionVoList2 = optionVoList2;
	}

	public Long getCreateid() {
		return createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	public Date getCreatetime() {
		return createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Long getModifyid() {
		return modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	public Date getModifytime() {
		return modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	public String getQuestion() {
		return question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public int getSort() {
		return sort;
	}

	public void setSort(int sort) {
		this.sort = sort;
	}

	public Long getSurveyid() {
		return surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	public String getValid() {
		return valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}
	public Integer getSelectmin() {
		return selectmin;
	}

	public void setSelectmin(Integer selectmin) {
		this.selectmin = selectmin;
	}

	public Integer getSelectmax() {
		return selectmax;
	}

	public void setSelectmax(Integer selectmax) {
		this.selectmax = selectmax;
	}
	public String getRequired() {
		return required;
	}

	public void setRequired(String required) {
		this.required = required;
	}

	public int getAnswerNum() {
		return answerNum;
	}

	public void setAnswerNum(int answerNum) {
		this.answerNum = answerNum;
	}

	public String getAnswerPercent() {
		return answerPercent;
	}

	public void setAnswerPercent(String answerPercent) {
		this.answerPercent = answerPercent;
	}


	public String getS_averageScore() {
		return s_averageScore;
	}
	
	public void setS_averageScore(String score) {
		s_averageScore = score;
	}
	
	public Integer getTotalScore() {
		return totalScore;
	}

	public void setTotalScore(Integer totalScore) {
		this.totalScore = totalScore;
	}

	public String getAnswercontent() {
		return answercontent;
	}

	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}
	
	
	
}
第2级：QuestionVo.java
package com.guangfan.zxt.surveymanage.model;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * @description 
 * @author 燕珂
 * @createtime 2014-3-29 下午04:38:02
 */
public class QuestionVo {
	private Long id;
	private Long surveyid;
	private String description;
	private String question;
	private String questiontype;
	private int sort;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String valid;
	private Integer selectmin; // 最少选择几项
	
	private Integer selectmax; // 最多选择几项	
	private String required; // 是否必填
	
	private List<OptionVo> optionVoList=new ArrayList<OptionVo>(); // 选项列表
	// 组合题专用
	private List<OptionVo> optionVoList1=new ArrayList<OptionVo>(); // 左侧的选项
	private List<OptionVo> optionVoList2=new ArrayList<OptionVo>(); // 上面的选项
	
	private int answerNum; // 问题参与人数
	private String answerPercent; // 参与人数占比
	
	// 打分题专用
	private String s_averageScore; // 平均分
	private Integer totalScore; // 总分
	
	/**
	 * 问题是否手动选择
	 */
	private String isSelect;
	/**
	 * 手动选择时数据源类型
	 */
	private Long questionCateId;
	
	public void add(OptionVo optionVo, String optiontype){
		optionVoList.add(optionVo);
		
		// 组合题专用
		if ("1".equals(optiontype))
			optionVoList1.add(optionVo);
		else if ("2".equals(optiontype))
			optionVoList2.add(optionVo);
	}
	
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}

	public String getQuestiontype() {
		return questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	public List<OptionVo> getOptionVoList() {
		return optionVoList;
	}

	public void setOptionVoList(List<OptionVo> optionVoList) {
		this.optionVoList = optionVoList;
	}

	public List<OptionVo> getOptionVoList1() {
		return optionVoList1;
	}

	public void setOptionVoList1(List<OptionVo> optionVoList1) {
		this.optionVoList1 = optionVoList1;
	}

	public List<OptionVo> getOptionVoList2() {
		return optionVoList2;
	}

	public void setOptionVoList2(List<OptionVo> optionVoList2) {
		this.optionVoList2 = optionVoList2;
	}

	public Long getCreateid() {
		return createid;
	}

	public void setCreateid(Long createid) {
		this.createid = createid;
	}

	public Date getCreatetime() {
		return createtime;
	}

	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public Long getModifyid() {
		return modifyid;
	}

	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}

	public Date getModifytime() {
		return modifytime;
	}

	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}

	public String getQuestion() {
		return question;
	}

	public void setQuestion(String question) {
		this.question = question;
	}

	public int getSort() {
		return sort;
	}

	public void setSort(int sort) {
		this.sort = sort;
	}

	public Long getSurveyid() {
		return surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	public String getValid() {
		return valid;
	}

	public void setValid(String valid) {
		this.valid = valid;
	}
	public Integer getSelectmin() {
		return selectmin;
	}

	public void setSelectmin(Integer selectmin) {
		this.selectmin = selectmin;
	}

	public Integer getSelectmax() {
		return selectmax;
	}

	public void setSelectmax(Integer selectmax) {
		this.selectmax = selectmax;
	}
	public String getRequired() {
		return required;
	}

	public void setRequired(String required) {
		this.required = required;
	}

	public int getAnswerNum() {
		return answerNum;
	}

	public void setAnswerNum(int answerNum) {
		this.answerNum = answerNum;
	}

	public String getAnswerPercent() {
		return answerPercent;
	}

	public void setAnswerPercent(String answerPercent) {
		this.answerPercent = answerPercent;
	}


	public String getS_averageScore() {
		return s_averageScore;
	}
	
	public void setS_averageScore(String score) {
		s_averageScore = score;
	}
	
	public Integer getTotalScore() {
		return totalScore;
	}

	public void setTotalScore(Integer totalScore) {
		this.totalScore = totalScore;
	}
	
	
	
	/**add by yanghui  2014-05-05  begin   为显示投票明细而添加的字段*/
	private String answercontent;
	/**add by yanghui  2014-05-05  end */

	public String getAnswercontent() {
		return answercontent;
	}

	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}

	public String getIsSelect() {
		return isSelect;
	}

	public void setIsSelect(String isSelect) {
		this.isSelect = isSelect;
	}

	public Long getQuestionCateId() {
		return questionCateId;
	}

	public void setQuestionCateId(Long questionCateId) {
		this.questionCateId = questionCateId;
	}
	
	
}
第2级：RelationObjectCountVo.java
package com.guangfan.zxt.surveymanage.model;

import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * @description 
 * @author 燕珂
 * @createtime 2015-6-19 下午06:11:53
 */
public class RelationObjectCountVo {
	// 注意：1、如果定义为 Long 型会报错：HHH000091: Expected type: java.lang.Long, actual value: java.math.BigDecimal
	// 2、这里大写是因为 oracle 查出来的结果集字段名都是大写，但是页面中传过去的 json 属性还是小写
	private BigInteger RELATIONOBJECTID; // 关联主体对象 id
	private String ENTERPRISENAME; // 关联主体对象公司名称
	private BigInteger NUM; // 针对该对象的问卷数
	
	public String getENTERPRISENAME() {
		return ENTERPRISENAME;
	}
	public void setENTERPRISENAME(String ENTERPRISENAME) {
		this.ENTERPRISENAME = ENTERPRISENAME;
	}
	public BigInteger getNUM() {
		return NUM;
	}
	public void setNUM(BigInteger NUM) {
		this.NUM = NUM;
	}
	public BigInteger getRELATIONOBJECTID() {
		return RELATIONOBJECTID;
	}
	public void setRELATIONOBJECTID(BigInteger RELATIONOBJECTID) {
		this.RELATIONOBJECTID = RELATIONOBJECTID;
	}
	
}
第2级：SeriesBean.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.List;

import org.springframework.http.HttpStatus.Series;

public class SeriesBean{
    public String name;
    public String type;
    public List<Integer> data;//这里要用int 不能用String 不然前台显示不正常（特别是在做数学运算的时候）
    public SeriesBean( String name, String type, List<Integer> data) {
        super();
        this.name = name;
        this.type = type;
        this.data = data;
    }
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getType() {
		return type;
	}
	public void setType(String type) {
		this.type = type;
	}
	public List<Integer> getData() {
		return data;
	}
	public void setData(List<Integer> data) {
		this.data = data;
	}

}
第2级：SurveyVo.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;


/**
 * @description 
 * @author 燕珂
 * @createtime 2014-3-15 下午06:11:53
 */
public class SurveyVo {

	private Long id;
	private String subject;
	private Long industryid;
	private Long categoryid;
	private String description;
	private String tags;
	private Integer numlimit;
	private Date begintime;
	private Date endtime;
	private String status;
	private Integer integral;
	private int participatenum;
	private String enddescription;
	private Long createid;
	private Date createtime;
	private Long modifyid;
	private Date modifytime;
	private String auditstatus;
	private String isShow;
	// 上面的属性与 User.java 中的属性相同，以下是辅助字段
	private String industryName;
	private String categoryName;
	private String statusName;//状态名字 
	private String integralStr;//积分

	private List<QuestionVo> questionVoList = new ArrayList<QuestionVo>(); // 问题列表
	private Integer relationObjectNum; // 问卷所涉及主体个数
	
	public void add(QuestionVo questionVo){
		questionVoList.add(questionVo);
	}
	
	public Date getBegintime() {
		return begintime;
	}
	public void setBegintime(Date begintime) {
		this.begintime = begintime;
	}
	public Long getCategoryid() {
		return categoryid;
	}
	public void setCategoryid(Long categoryid) {
		this.categoryid = categoryid;
	}
	public String getCategoryName() {
		return categoryName;
	}
	public void setCategoryName(String categoryName) {
		this.categoryName = categoryName;
	}
	public Long getCreateid() {
		return createid;
	}
	public void setCreateid(Long createid) {
		this.createid = createid;
	}
	public Date getCreatetime() {
		return createtime;
	}
	public void setCreatetime(Date createtime) {
		this.createtime = createtime;
	}
	public Date getEndtime() {
		return endtime;
	}
	public void setEndtime(Date endtime) {
		this.endtime = endtime;
	}
	public Long getId() {
		return id;
	}
	public void setId(Long id) {
		this.id = id;
	}
	public Long getIndustryid() {
		return industryid;
	}
	public void setIndustryid(Long industryid) {
		this.industryid = industryid;
	}
	public String getIndustryName() {
		return industryName;
	}
	public void setIndustryName(String industryName) {
		this.industryName = industryName;
	}
	public Integer getIntegral() {
		return integral;
	}
	public void setIntegral(Integer integral) {
		this.integral = integral;
	}
	public Long getModifyid() {
		return modifyid;
	}
	public void setModifyid(Long modifyid) {
		this.modifyid = modifyid;
	}
	public Date getModifytime() {
		return modifytime;
	}
	public void setModifytime(Date modifytime) {
		this.modifytime = modifytime;
	}
	public Integer getNumlimit() {
		return numlimit;
	}
	public void setNumlimit(Integer numlimit) {
		this.numlimit = numlimit;
	}
	public int getParticipatenum() {
		return participatenum;
	}
	public void setParticipatenum(int participatenum) {
		this.participatenum = participatenum;
	}
	public String getStatus() {
		return status;
	}
	public void setStatus(String status) {
		this.status = status;
	}
	public String getSubject() {
		return subject;
	}
	public void setSubject(String subject) {
		this.subject = subject;
	}
	public String getTags() {
		return tags;
	}
	public void setTags(String tags) {
		this.tags = tags;
	}
	public String getAuditstatus() {
		return auditstatus;
	}
	public void setAuditstatus(String auditstatus) {
		this.auditstatus = auditstatus;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	public List<QuestionVo> getQuestionVoList() {
		return questionVoList;
	}
	public void setQuestionVoList(List<QuestionVo> questionVoList) {
		this.questionVoList = questionVoList;
	}

	public String getEnddescription() {
		return enddescription;
	}

	public void setEnddescription(String enddescription) {
		this.enddescription = enddescription;
	}

	public String getIsShow() {
		return isShow;
	}

	public void setIsShow(String isShow) {
		this.isShow = isShow;
	}

	public Integer getRelationObjectNum() {
		return relationObjectNum;
	}

	public void setRelationObjectNum(Integer relationObjectNum) {
		this.relationObjectNum = relationObjectNum;
	}

	public String getStatusName() {
		return statusName;
	}

	public void setStatusName(String statusName) {
		this.statusName = statusName;
	}

	public String getIntegralStr() {
		return integralStr;
	}

	public void setIntegralStr(String integralStr) {
		this.integralStr = integralStr;
	}
	
}
第2级：VoteAndOptionBean.java
package com.guangfan.zxt.surveymanage.model;

import com.guangfan.zxt.surveymanage.entity.Option;

public class VoteAndOptionBean {
	
	private Long option1id;
	private Long option2id;
	private String option1Text;
	private String option2Text;
	private String answercontent;
	private Option option;
	private String requireinput;
	
	
	public Option getOption() {
		return option;
	}

	public void setOption(Option option) {
		this.option = option;
	}
	
	
	public Long getOption1id() {
		return option1id;
	}
	public void setOption1id(Long option1id) {
		this.option1id = option1id;
	}
	public Long getOption2id() {
		return option2id;
	}
	public void setOption2id(Long option2id) {
		this.option2id = option2id;
	}
	public String getAnswercontent() {
		return answercontent;
	}
	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}

	public String getOption1Text() {
		return option1Text;
	}

	public void setOption1Text(String option1Text) {
		this.option1Text = option1Text;
	}

	public String getOption2Text() {
		return option2Text;
	}

	public void setOption2Text(String option2Text) {
		this.option2Text = option2Text;
	}

	public String getRequireinput() {
		return requireinput;
	}

	public void setRequireinput(String requireinput) {
		this.requireinput = requireinput;
	}
	
	

}
第2级：VoteRecordBean.java
package com.guangfan.zxt.surveymanage.model;

import com.guangfan.zxt.surveymanage.entity.VoteRecord;

public class VoteRecordBean extends VoteRecord {
	
	private String subject;
	private String userName;//用户名
	private String entityName;//实体名称
	private String phone;
	private String icCard;
	public String getSubject() {
		return subject;
	}

	public void setSubject(String subject) {
		this.subject = subject;
	}

	public String getUserName() {
		return userName;
	}

	public void setUserName(String userName) {
		this.userName = userName;
	}

	public String getEntityName() {
		return entityName;
	}

	public void setEntityName(String entityName) {
		this.entityName = entityName;
	}

	public String getPhone() {
		return phone;
	}

	public void setPhone(String phone) {
		this.phone = phone;
	}

	public String getIcCard() {
		return icCard;
	}

	public void setIcCard(String icCard) {
		this.icCard = icCard;
	}
	
	
	

}
第2级：VoteRecordDetailBean.java
package com.guangfan.zxt.surveymanage.model;

import java.util.ArrayList;
import java.util.List;

public class VoteRecordDetailBean {
	private List<QuestionBean> questionVoList = new ArrayList<QuestionBean>(); // 问题列表
	
	public void add(QuestionBean questionVo){
		questionVoList.add(questionVo);
	}
	
	public List<QuestionBean> getQuestionVoList() {
		return questionVoList;
	}

	public void setQuestionVoList(List<QuestionBean> questionVoList) {
		this.questionVoList = questionVoList;
	}
	
	
	

}
第2级：VoteRecordReportVo.java
package com.guangfan.zxt.surveymanage.model;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

/**
 * @description 
 * @author 燕珂
 * @createtime 2014-4-16 下午06:24:52
 */
public class VoteRecordReportVo {

	private Long id;
	private Long surveyid;
	private String surveyname;
	private Long questionid;
	private String questionname;
	private String questiontype;
	private Long option1id;
	private String option1name;
	private Long option2id;
	private String option2name;
	private Long votenum;
	private Double votepercent;
	private Long optionValue;
	
	private String s_votePercent; // 为了显示两位小数的百分比

	public Long getId() {
		return id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getOption1id() {
		return option1id;
	}

	public void setOption1id(Long option1id) {
		this.option1id = option1id;
	}

	public String getOption1name() {
		return option1name;
	}

	public void setOption1name(String option1name) {
		this.option1name = option1name;
	}

	public Long getOption2id() {
		return option2id;
	}

	public void setOption2id(Long option2id) {
		this.option2id = option2id;
	}

	public String getOption2name() {
		return option2name;
	}

	public void setOption2name(String option2name) {
		this.option2name = option2name;
	}

	public Long getOptionValue() {
		return optionValue;
	}

	public void setOptionValue(Long optionValue) {
		this.optionValue = optionValue;
	}

	public Long getQuestionid() {
		return questionid;
	}

	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}

	public String getQuestionname() {
		return questionname;
	}

	public void setQuestionname(String questionname) {
		this.questionname = questionname;
	}

	public String getQuestiontype() {
		return questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	public Long getSurveyid() {
		return surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	public String getSurveyname() {
		return surveyname;
	}

	public void setSurveyname(String surveyname) {
		this.surveyname = surveyname;
	}

	public Long getVotenum() {
		return votenum;
	}

	public void setVotenum(Long votenum) {
		this.votenum = votenum;
	}

	public Double getVotepercent() {
		return votepercent;
	}

	public void setVotepercent(Double votepercent) {
		DecimalFormat df = new DecimalFormat("0.00"); // 先保留两位小数（不够补0）
		this.s_votePercent = df.format(votepercent * 100) + ""; // 数据库中该字段值为 0.333333 这种，前台要的结果是33.33%，所以此处要乘个100
	}

	public String getS_votePercent() {
		return s_votePercent;
	}

	public void setS_votePercent(String percent) {
		s_votePercent = percent;
	}
}
第2级：VoteRecordVo.java
package com.guangfan.zxt.surveymanage.model;

import java.util.Date;



public class VoteRecordVo{

	// Fields

	private Long id;
	private Long surveyid;
	private Long questionid;
	private String questiontype;
	private Long option1id;
	private Long option2id;
	private String answercontent;
	private Long userid;
	private Date votetime;
	private String ipaddress;
	private String batchNumber;

	private String relationObjectType; // 当前问卷针对主体类型（第一次改版：支撑查看针对某一个企业的统计结果）
	private Long relationObjectId; // 当前问卷针对主体 id
	
	private Long cObjectId; // 存放 C_OBJECT表的 id（第二次改版：支撑实体信息存在外部系统）
	// Constructors
	private Long surveyPartakeUserId; //评论用户列表Id
	
	
	private String answerText;

	/** default constructor */
	public VoteRecordVo() {
	}

	/** minimal constructor */
	public VoteRecordVo(Long id, Long surveyid,
			Long questionid, String questiontype, Long option1id,
			Date votetime) {
		this.id = id;
		this.surveyid = surveyid;
		this.questionid = questionid;
		this.questiontype = questiontype;
		this.option1id = option1id;
		this.votetime = votetime;
	}

	/** full constructor */
	public VoteRecordVo(Long id, Long surveyid,
			Long questionid, String questiontype, Long option1id,
			Long option2id, String answercontent, Long userid,
			Date votetime) {
		this.id = id;
		this.surveyid = surveyid;
		this.questionid = questionid;
		this.questiontype = questiontype;
		this.option1id = option1id;
		this.option2id = option2id;
		this.answercontent = answercontent;
		this.userid = userid;
		this.votetime = votetime;
	}

	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	public Long getSurveyid() {
		return this.surveyid;
	}

	public void setSurveyid(Long surveyid) {
		this.surveyid = surveyid;
	}

	public Long getQuestionid() {
		return this.questionid;
	}

	public void setQuestionid(Long questionid) {
		this.questionid = questionid;
	}

	public String getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(String questiontype) {
		this.questiontype = questiontype;
	}

	public Long getOption1id() {
		return this.option1id;
	}

	public void setOption1id(Long option1id) {
		this.option1id = option1id;
	}

	public Long getOption2id() {
		return this.option2id;
	}

	public void setOption2id(Long option2id) {
		this.option2id = option2id;
	}

	public String getAnswercontent() {
		return this.answercontent;
	}

	public void setAnswercontent(String answercontent) {
		this.answercontent = answercontent;
	}
	
	public String getRelationObjectType() {
		return this.relationObjectType;
	}

	public void setRelationObjectType(String relationObjectType) {
		this.relationObjectType = relationObjectType;
	}
	
	public Long getRelationObjectId() {
		return this.relationObjectId;
	}

	public void setRelationObjectId(Long relationObjectId) {
		this.relationObjectId = relationObjectId;
	}

	public Long getUserid() {
		return this.userid;
	}

	public void setUserid(Long userid) {
		this.userid = userid;
	}
	public Date getVotetime() {
		return this.votetime;
	}

	public void setVotetime(Date votetime) {
		this.votetime = votetime;
	}
	public String getIpaddress() {
		return ipaddress;
	}

	public void setIpaddress(String ipaddress) {
		this.ipaddress = ipaddress;
	}
	public String getBatchNumber() {
		return batchNumber;
	}

	public void setBatchNumber(String batchNumber) {
		this.batchNumber = batchNumber;
	}
	public Long getcObjectId() {
		return cObjectId;
	}

	public void setcObjectId(Long cObjectId) {
		this.cObjectId = cObjectId;
	}
	public Long getSurveyPartakeUserId() {
		return surveyPartakeUserId;
	}

	public void setSurveyPartakeUserId(Long surveyPartakeUserId) {
		this.surveyPartakeUserId = surveyPartakeUserId;
	}

	public String getAnswerText() {
		return answerText;
	}

	public void setAnswerText(String answerText) {
		this.answerText = answerText;
	}
	
}
第1级：service
第2级：EntityCategoryService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.EntityCategory;
import com.guangfan.zxt.util.DataUtil;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class EntityCategoryService extends BaseService<EntityCategory> {

	@Resource
	private BaseDao<EntityCategory> entityCategoryDao;

	@Override
	protected BaseDao<EntityCategory> getDao() {
		return entityCategoryDao;
	}
	
	public List<EntityCategory> allentityCategory() {
		return getDao().find(
				" from " + getEntityName() + " where valid = " + SystemCommon_Constant.VALID_STATUS_1 + " order by sort asc");
	}
	
	public DataGrid datagrid(RequestPage page)
	{
		String hql = (new StringBuilder("from ")).append(getEntityName()).toString();
		if (!StringUtils.isEmpty(page.getSort()))
			hql = (new StringBuilder(String.valueOf(hql))).append(" order by ").append(page.getSort()).append(" ").append(page.getOrder()).toString();
		String counthql = (new StringBuilder("select count(*) from ")).append(getEntityName()).toString();
		long count = getDao().count(counthql, new Object[0]).longValue();
		java.util.List rolelist = getDao().find(page.getPage(), page.getRows(), hql, new Object[0]);
		return new DataGrid(count, rolelist);
	}
	
	/**
	 * 逻辑删除
	 */
	public void delete_logic(Long id) {
		entityCategoryDao.execute("UPDATE " + getEntityName() + " SET valid = ? WHERE id=? ", new Object[]{SystemCommon_Constant.VALID_STATUS_0,id});
	}

	public boolean checkChild(Long id) {
		String hql =" from "+getEntityName()+" where pid=? and valid=? ";
		List list = getDao().find(hql, new Object[]{id,SystemCommon_Constant.VALID_STATUS_1});
		if(DataUtil.listIsNotNull(list)){
			return false;
		}else{
			return true;
		}
	}

	/**
	 * 
	 * @Description:只查询父级的行业类别
	 * @author YangHui 
	 * @Created 2014-10-23
	 * @return
	 */
	public List getParentIndustryList() {
		String hql =" from "+getEntityName()+" where pid=(select id from "+getEntityName()+" where pid='0') and valid='1' ";
		return getDao().find(hql, new Object[0]);
	}
	/**
	  * 方法名称：getNamebyId
	  * 功能描述：根据ID获取名称
	  * 创建时间:2015年12月21日下午5:31:56
	  * 创建人: pengfei Zhao
	  * @param @param id
	  * @param @return 
	  * @return String
	 */
	public String getNamebyId(String id) {
		EntityCategory survey=this.getDao().get(" from "+getEntityName()+" where id=? and valid='1'", Long.valueOf(id));
		if(survey==null){
			return "类别不存在";
		}
		return survey.getText();
	}
	
}
第2级：EvaluationService.java
package com.guangfan.zxt.surveymanage.service;



import javax.annotation.Resource;

import org.hibernate.SessionFactory;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.SurveyEvaluation;


import dk.dao.BaseDao;
import dk.service.BaseService;

@Service
public class EvaluationService extends BaseService<SurveyEvaluation> {

	@Resource
	private BaseDao<SurveyEvaluation> surveyEvaluationDao;
	@Resource
	private SessionFactory sessionFactory;
	@Override
	protected BaseDao<SurveyEvaluation> getDao() {
		return surveyEvaluationDao;
	}

}
第2级：IndustryEntityService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.common.entity.CObject;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;
import com.guangfan.zxt.util.DataUtil;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class IndustryEntityService extends BaseService<IndustryEntity> {

	@Resource
	private BaseDao<IndustryEntity> industryEntityDao;
	@Resource
	private SurveyIndustryService surveyIndustryService;
	@Override
	protected BaseDao<IndustryEntity> getDao() {
		return industryEntityDao;
	}
	
	public List<IndustryEntity> allSurveyIndustry() {
		return getDao().find(
				" from " + getEntityName() + " where valid = " + SystemCommon_Constant.VALID_STATUS_1 + " order by sort asc");
	}
	
	/**
	 * 逻辑删除
	 */
	public void delete_logic(Long id) {
		industryEntityDao.execute("UPDATE " + getEntityName() + " SET valid = ? WHERE id=? ", new Object[]{SystemCommon_Constant.VALID_STATUS_0,id});
	}
	/**
	 * 逻辑删除实体信息
	 */
    public void delEntInfo(IndustryEntity induEntity)
    {
	 induEntity.setValid("0");
     getDao().update(induEntity);
    }
    
    /**
	 * 实体审核操作
	 * @param ids
	 * @param status
	 */
	public void checkEntity(String ids,String status){
		String[] idArray = ids.split(",");
		for(String id : idArray){
			IndustryEntity induEntity = this.get(Long.valueOf(id));
			induEntity.setCauditstatus(status);
			if(induEntity!=null){
				this.update(induEntity);
			}
		}
	}
    
	public boolean checkChild(Long id) {
		String hql =" from "+getEntityName()+" where pid=? and valid=? ";
		List list = getDao().find(hql, new Object[]{id,SystemCommon_Constant.VALID_STATUS_1});
		if(DataUtil.listIsNotNull(list)){
			return false;
		}else{
			return true;
		}
	}

	/**
	 * 
	 * @Description:只查询父级的行业类别
	 * @author YangHui 
	 * @Created 2014-10-23
	 * @return
	 */
	public List getParentIndustryList() {
		String hql =" from "+getEntityName()+" where pid=(select id from "+getEntityName()+" where pid='0') and valid='1' ";
		return getDao().find(hql, new Object[0]);
	}
	/**
	  * 方法名称：checkEntity
	  * 功能描述：判断是否存在第三方（如加油站）问卷评价的实体信息
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public boolean checkEntity(String objectId) {
		String hql =" from "+getEntityName()+" where objectId=? and valid=? ";
		List list = getDao().find(hql, new Object[]{objectId,SystemCommon_Constant.VALID_STATUS_1});
		if(DataUtil.listIsNotNull(list)){
			return true;
		}else{
			return false;
		}
	}
	
	/**
	  * 方法名称：saveOrGetEntity
	  * 功能描述：判断是否存在第三方（如加油站）问卷评价的实体信息不存在就创建
	  * 创建时间:2016年2月18日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public IndustryEntity saveOrGetEntity(IndustryEntity induEntity) {
		String hql =" from "+getEntityName()+" where objectId=? and valid=? ";
		List<IndustryEntity> list = getDao().find(hql, new Object[]{induEntity.getObjectId(),SystemCommon_Constant.VALID_STATUS_1});
		if (list != null && list.size() > 0)
			return list.get(0);
		else {
			getDao().save(induEntity);
			return induEntity;
		}
	}
	
	/**
	  * 功能描述：根据ObjectId获取实体名字
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public String getEntityName(Long objectId) {
		String hql =" from "+getEntityName()+" where objectId=? and valid=? ";
		if(objectId!=null){
		    IndustryEntity induEntity = getDao().get(hql, new Object[]{objectId.toString(),SystemCommon_Constant.VALID_STATUS_1});
			return induEntity.getEntityName();
		}else{
			return "未得到实体名称";
		}
	}
	/**
	  * 功能描述：根据ObjectId获取实体
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public IndustryEntity getEntityByobjectId(String objectId) {
		String hql =" from "+getEntityName()+" where objectId=? and valid=? ";
		IndustryEntity induEntity = getDao().get(hql, new Object[]{objectId.toString(),SystemCommon_Constant.VALID_STATUS_1});
	    return induEntity;
	}
	/**
	 * 根据外系统id获取本系统行业实体信息
	 * yyf 20160617 add
	 * @param objectId
	 * @return
	 */
	public IndustryEntity findIndustryEntityIdByObjectId(String objectId) {
		List<IndustryEntity> list = getDao().find("select ie from " + getEntityName() + " ie,CObject co  where co.id =ie.objectId and co.objectId = '" + objectId + "' ");
		if(list.size()>0){
			return list.get(0);
		}else{
			return null;
		}
	}
	public IndustryEntity getIndustryEntityForOther(String otherId) {
		String hql =" from "+getEntityName()+" where valid='1' and otherId = '"+otherId+"'";
		List<IndustryEntity> list = getDao().find(hql, new Object[0]);
		if(list.size()>0){
			return list.get(0);
		}else{
			return new IndustryEntity();
		}
	}
}
第2级：IndustryEntitySurveyService.java
package com.guangfan.zxt.surveymanage.service;

import java.text.SimpleDateFormat;
import java.util.List;

import javax.annotation.Resource;

import org.apache.log4j.Logger;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.IndustryEntitySurvey;
import com.guangfan.zxt.tagManage.entity.SNBase;
import com.guangfan.zxt.tagManage.entity.SNBatchSurvey;

import dk.dao.BaseDao;
import dk.service.BaseService;

/**
 * yf 20160303 add
 * @author Administrator
 *
 */
@Service
public class IndustryEntitySurveyService extends BaseService<IndustryEntitySurvey> {
	
	private Logger logger = Logger.getLogger(IndustryEntitySurveyService.class);
	
	private SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

	@Resource
	private BaseDao<IndustryEntitySurvey> industryEntitySurveyDao;
	
	@Override
	protected BaseDao<IndustryEntitySurvey> getDao() {
		return this.industryEntitySurveyDao;
	}
	
	
	@Resource
	private IndustryEntitySurveyService industryEntitySurveyService;
	
	
    /**
      * 方法名称：getSurveyByIndustryEntityId
      * 功能描述：根据实体ID 获取绑定的问卷信息
      * 创建时间:2016年6月6日下午2:39:57
      * 创建人: pengfei Zhao
      * @return List<IndustryEntitySurvey>
     */
	public List<IndustryEntitySurvey> getSurveyByIndustryEntityId(String industryEntityId) {
		StringBuffer sb = new StringBuffer();
		sb.append(" from IndustryEntitySurvey where 1=1 and industryEntityId = '"+industryEntityId+"' order by createTime asc");
		List<IndustryEntitySurvey> list = getDao().find(sb.toString());
		return list;
	}

	/**
	 * 根据行业实体id和问卷id获取行业实体问卷的信息
	 * @param objectId
	 * @param surveyId
	 * @return
	 */
	public IndustryEntitySurvey getLinkIdByParam(Long objectId, Long surveyId) {
		StringBuffer sb = new StringBuffer();
		sb.append(" from IndustryEntitySurvey where surveyId='"+surveyId+"' and industryEntityId = '"+objectId+"' order by createTime asc");
		List<IndustryEntitySurvey> list = getDao().find(sb.toString());
		if(list.size()==1){
			return list.get(0);
		}else{
			return null;
		}
	} 
	
	
}
第2级：OptionService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.Option;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.service.BaseService;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Ryu Zheng
 * <p/>创建日期：2013-11-11
 * <p/>创建时间：下午3:26:25
 * <p/>功能描述：问卷选项表Service
 * <p/>===========================================================
 */
@Service
public class OptionService extends BaseService<Option>{

	@Resource
	private BaseDao<Option> optionDao;
	
	@Override
	protected BaseDao<Option> getDao() {
		return optionDao;
	}

	/**
	 * 功能描述：根据某问题记录ID获取其问卷选项列表
	 * 创建时间:2013-11-11下午3:27:59
	 * 创建人: Ryu Zheng
	 * 
	 * @param questionId
	 * @return
	 */
	public DataGrid datagrid(Long questionId){
		StringBuilder hql = new StringBuilder();
		hql.append("FROM ").append(getEntityName()).append(" WHERE 1 = 1")
				.append(" AND questionid = ").append(questionId);
		hql.append(" ORDER BY sort ASC ");
		
		List<Option> optionList = getDao().find(hql.toString());
		return new DataGrid(optionList.size(), optionList);
	}
	
	/**
	 * 功能描述：获取某个问题的选项列表
	 * 创建时间:2013-11-11下午3:29:39
	 * 创建人: Ryu Zheng
	 * 
	 * @param questionId 问题Id
	 * @return
	 */
	public List<Option> listOption(Long questionId){
		List<Option> list =  getDao().find("from "+getEntityName()+" where questionid = ? order by sort", questionId);
		return list;
	}
	
	//根据已知条件修改数据
	public void updateWhere(String str){
		getDao().execute("update "+getEntityName()+" set num=num+1 where "+str);
	}

	/**
	 * 
	 * @Description:
	 * @author yanghui 
	 * @Created 2014-4-28
	 * @param string
	 * @return
	 */
	public List<Option> getOptionByIds(String string) {
		String hql = " from "+getEntityName()+" where id in ("+string+")";
		List<Option> list = getDao().find(hql, new Object[0]);
		return list;
	}
	public void deleteOldRoleOptionByQuestionId(long questionid) {
		optionDao.execute("DELETE FROM " + getEntityName() + " WHERE questionid = " + questionid); // 先删除旧的 再保存新的
	}
	
	public List<Option> listOptionByType(Long questionId, String type){
		String hql = "";
		if (!SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT.equals(type))
			hql = "from " + getEntityName() + " where questionID = " + questionId + " AND (optiontype IS NULL OR optiontype != '" + SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT + "')";
		else
			hql = "from " + getEntityName() + " where questionID = " + questionId + " and optiontype = '" + SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT + "'";
		List<Option> list =  getDao().find(hql);
		return list;
	}
	
}
第2级：ParticipantService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.ParticipantFilter;

import dk.dao.BaseDao;
import dk.service.BaseService;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Ryu Zheng
 * <p/>创建日期：2013-11-12
 * <p/>创建时间：上午11:24:09
 * <p/>功能描述：投票过滤表Service
 * <p/>===========================================================
 */
@Service
public class ParticipantService extends BaseService<ParticipantFilter>{

	@Resource
	private BaseDao<ParticipantFilter> participantDao;
	
	@Override
	protected BaseDao<ParticipantFilter> getDao() {
		return participantDao;
	}

	
	/**
	 * 功能描述：根据Cookie值进行查询
	 * 创建时间:2013-11-12上午11:29:25
	 * 创建人: Ryu Zheng
	 * 
	 * @param cookieVal
	 * @param questionnaireId
	 * @return
	 */
	public int findByCookie(String cookieVal,Long questionnaireId){
		return participantDao.find("from "+getEntityName()+" where votedCookie=? and questionnaireId=?", cookieVal, questionnaireId).size();
	}
	
	/**
	 * 功能描述：根据IP地址进行查询
	 * 创建时间:2013-11-12上午11:29:43
	 * 创建人: Ryu Zheng
	 * 
	 * @param ip
	 * @return
	 */
	public int findByIp(String ip){
		return participantDao.find("from "+getEntityName()+" where votedIp=?", ip).size();
	}
	
	/**
	 * 功能描述：获取根据IP查询的结果列表
	 * 创建时间:2013-11-12上午11:30:40
	 * 创建人: Ryu Zheng
	 * 
	 * @param ip
	 * @param id
	 * @return
	 */
	public List<ParticipantFilter> findListByIp(String ip, Long id){
		return participantDao.find("from "+getEntityName()+" where votedIp=? and id=? order by createTime desc", ip, id);
	}
	
	/**
	 * 功能描述：根据用户名查询
	 * 创建时间:2013-11-12上午11:28:41
	 * 创建人: Ryu Zheng
	 * 
	 * @param userName
	 * @return
	 */
	public int findByUserName(String userName){
		return participantDao.find("from "+getEntityName()+" where userName=?", userName).size();
	}
	
}
第2级：QuestionService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.List;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.Question;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.service.BaseService;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Ryu Zheng
 * <p/>创建日期：2013-11-7
 * <p/>创建时间：下午5:20:00
 * <p/>功能描述：问卷题目表Service
 * <p/>===========================================================
 */
@Service
public class QuestionService extends BaseService<Question>{

	@Resource
	private BaseDao<Question> questionDao;
	
	@Override
	protected BaseDao<Question> getDao() {
		return questionDao;
	}

	/**
	 * 功能描述：根据某投票问卷记录ID获取其问卷题目列表
	 * 创建时间:2013-11-7下午5:54:50
	 * 创建人: Ryu Zheng
	 * 
	 * @param surveyId
	 * @return
	 */
	public DataGrid datagrid(String surveyid){
		StringBuilder hql = new StringBuilder();
		hql.append("FROM ").append(getEntityName()).append(" WHERE valid = ")
				.append(SystemCommon_Constant.VALID_STATUS_1)
				.append(" AND surveyid = ").append(surveyid);
		
		List<Question> questionList = getDao().find(hql.toString());
		return new DataGrid(questionList.size(), questionList);
	}
	
	/**
	 * 功能描述：获取某个问卷的问题列表
	 * 创建时间:2013-11-11上午10:51:34
	 * 创建人: Ryu Zheng
	 * 
	 * @param surveyId 问卷Id
	 * @return
	 */
	public List<Question> listQuestion(Long surveyid){
		List<Question> list =  getDao().find("from "+getEntityName()+" where surveyid = ? order by sort asc, id asc", surveyid); // 排序值越大越靠后，比如排序值为1的就放在第一位，排序值为2的放第二位, surveyid);
		return list;
	}
	
	/**
	 * 功能描述：投票时更新问题的累计答题次数
	 * 创建时间:2013-11-13下午3:10:05
	 * 创建人: Ryu Zheng
	 * 
	 * @param questionId
	 * @param num
	 */
	public void updateQuestionNum(Long questionId,int num){
		getDao().execute("update "+getEntityName()+" set num=num+? where id=?", num, questionId);
	}
	
}
第2级：SurveyCategoryService.java
package com.guangfan.zxt.surveymanage.service;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.SurveyCategory;


import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

/**
 * @description 
 * @author 燕珂
 * @createtime 2014-3-10 下午04:47:36
 */
@Service
public class SurveyCategoryService extends BaseService<SurveyCategory> {
	@Resource
	private BaseDao<SurveyCategory> actionDao;

	@Override
	protected BaseDao<SurveyCategory> getDao() {
		return actionDao;
	}
	
	public DataGrid datagrid(RequestPage page)
	{
		String hql = (new StringBuilder("from ")).append(getEntityName()).toString();
		if (!StringUtils.isEmpty(page.getSort()))
			hql = (new StringBuilder(String.valueOf(hql))).append(" order by ").append(page.getSort()).append(" ").append(page.getOrder()).toString();
		String counthql = (new StringBuilder("select count(*) from ")).append(getEntityName()).toString();
		long count = getDao().count(counthql, new Object[0]).longValue();
		java.util.List rolelist = getDao().find(page.getPage(), page.getRows(), hql, new Object[0]);
		return new DataGrid(count, rolelist);
	}
}
第2级：SurveyChartsForSurveyEntityService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.SurveyChartsForSurveyEntity;

import dk.dao.BaseDao;
import dk.service.BaseService;

@Service
public class SurveyChartsForSurveyEntityService extends BaseService<SurveyChartsForSurveyEntity>{
	@Resource
	private BaseDao<SurveyChartsForSurveyEntity> voterecordChartDao;
	@Resource
	private SessionFactory sessionFactory;
	
	private Session getSession(){
		return sessionFactory.getCurrentSession();
	}
	@Override
	protected BaseDao<SurveyChartsForSurveyEntity> getDao() {
		return voterecordChartDao;
	}
	
	public void SurveyChartsave(SurveyChartsForSurveyEntity vrc){
		voterecordChartDao.save(vrc);
	}
	public void DeleteTable(){
		StringBuilder hql = new StringBuilder();
		hql.append("delete from ").append(getEntityName());
		getDao().execute(hql.toString());
	}
	public void DeleteTableForTime(String beginTime,String endTime){
		StringBuilder hql = new StringBuilder();
		hql.append("delete from ").append(getEntityName());
		hql.append(" where 1=1 ");
		if(!beginTime.equals("")){
			hql.append(" and countTime >= '" + beginTime+"'");
		}
		if(!endTime.equals("")){
			hql.append(" and countTime <= '" + endTime+"'");
		}
		getDao().execute(hql.toString());
	}
	public List[] getSurveyCountList(List listDate,String entityId,Long surveyId){
		List[] l=new ArrayList[4];
		List<String> listTime=new ArrayList<String>();
		List<Integer> listtNum=new ArrayList<Integer>();
		List<Integer> listmNum=new ArrayList<Integer>();
		List<Integer> listnNum=new ArrayList<Integer>();
		for(int i=0;i<listDate.size();i++){
			String vote_Time=(String) listDate.get(i);
			StringBuilder hql = new StringBuilder();
			hql.append("select countTime,sum(todayMnum),sum(todayNnum),sum(todayTnum) from ").append("S_SURVEYCHARTSFORSURVEYENTITY");
			hql.append(" where countTime ='"+ vote_Time +"'" );
			if(entityId!=null&&!entityId.equals("null")&&!entityId.equals("")){
				hql.append(" and  industryEntityId in ("+entityId+")" );
			}
			if(surveyId!=null&&!surveyId.equals("null")){
				hql.append(" and  surveyId="+surveyId );
			}
			hql.append(" GROUP BY COUNTTIME");
			List list = getSession().createSQLQuery(hql.toString()).list();
//			List<SurveyChartsForSurveyEntity> listsuvch= getDao().find(hql.toString());
			if(list.size()==0){
				listTime.add(vote_Time);
				listtNum.add(0);
				listmNum.add(0);
				listnNum.add(0);
			}else{
				 Object[] obj =(Object[]) list.get(0);
				 String countTime =obj[0].toString();
		         String todayMnum =obj[1].toString();
		         String todayNnum =obj[2].toString();
		         String todayTnum =obj[3].toString();
		     	listTime.add(countTime);
				listtNum.add(Integer.valueOf(todayTnum));
				listmNum.add(Integer.valueOf(todayMnum));
				listnNum.add(Integer.valueOf(todayNnum));
			}
			}
		l[0]=listTime;
		l[1]=listtNum;
		l[2]=listmNum;
		l[3]=listnNum;
		return l;
	}
	public List<SurveyChartsForSurveyEntity> getSurveyList(int pageNumber, int pageSize,String search,String entityId,Long surveyId,String beginTime,String endTime){
		StringBuilder hql = new StringBuilder();
		hql.append("select countTime,sum(todayMnum),sum(todayNnum),sum(todayTnum) from ").append(getEntityName());
		hql.append(" where 1=1 ");
		if(!search.equals("null")&&search!=null&&!search.equals("")){
			hql.append(" and concat(todayTnum, todayMnum,todayNnum,countTime) like '%"+search+"%'");
		}
		if(entityId!=null&&!entityId.equals("null")&&!entityId.equals("")){
			hql.append(" and  industryEntityId in ("+entityId+")" );
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and  surveyId="+surveyId );
		}
		if(!beginTime.equals("")){
			hql.append(" and countTime >= '" + beginTime+"'");
		}
		if(!endTime.equals("")){
			hql.append(" and countTime <= '" + endTime+"'");
		}
		hql.append(" GROUP BY countTime");
		hql.append(" order by countTime desc");
		List<SurveyChartsForSurveyEntity> listsuvch= getDao().find(pageNumber,pageSize,hql.toString());
		return listsuvch;
	}
	public int getSurveyCount(String search,String entityId,Long surveyId,String beginTime,String endTime){
		StringBuilder hql = new StringBuilder();
		hql.append("select count(DISTINCT COUNTTIME) from ").append(getEntityName());
		hql.append(" where 1=1 ");
		if(!search.equals("null")&&search!=null){
			hql.append(" and concat(todayTnum, todayMnum,todayNnum,countTime) like '%"+search+"%'");
		}
		if(entityId!=null&&!entityId.equals("null")&&!entityId.equals("")){
			hql.append(" and  industryEntityId in ("+entityId+")" );
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and  surveyId="+surveyId );
		}
		if(!beginTime.equals("")){
			hql.append(" and countTime >= '" + beginTime+"'");
		}
		if(!endTime.equals("")){
			hql.append(" and countTime <= '" + endTime+"'");
		}
	    int  listCount= getDao().count(hql.toString()).intValue();
		return listCount;
	}
	/**
	  * 方法名称：getVoteTotalNum
	  * 功能描述：获取某个实体参与评价的总人数
	  * 创建时间:2016年5月26日上午10:03:11
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteTotalNumForEntity(String entityIds,Long surveyId,boolean isMember,boolean anonymous,String beginTime,String endTime) {
		int count = 0;
		StringBuilder hql = new StringBuilder();
		String sql="select IFNULL(SUM(TODAYTNUM),0)  from ";
		if(isMember==true){
			sql="select IFNULL(SUM(TODAYMNUM),0) from ";
		}
		if(anonymous==true){
			sql="select IFNULL(SUM(TODAYNNUM),0) from ";
		}
		hql.append(sql).append("s_surveychartsforsurveyentity").append(" where 1=1");
		if(entityIds!=null&&!entityIds.equals("null")&&!entityIds.equals("")){
			hql.append(" and industryEntityId in (" + entityIds+")");
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyId = '" + surveyId+"'");
		}
		if(!beginTime.equals("")){
			hql.append(" and countTime >= '" + beginTime+"'");
		}
		if(!endTime.equals("")){
			hql.append(" and countTime <= '" + endTime+"'");
		}
		count= Integer.valueOf(getSession().createSQLQuery(hql.toString()).uniqueResult().toString());
		return count;
	}
}
第2级：SurveyChartsService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.apache.pdfbox.util.StringUtil;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.contentmanage.entity.FNavmenu;
import com.guangfan.zxt.surveymanage.entity.SurveyCharts;

import dk.dao.BaseDao;
import dk.service.BaseService;

@Service
public class SurveyChartsService extends BaseService<SurveyCharts>{
	@Resource
	private BaseDao<SurveyCharts> voterecordChartDao;
	
	@Override
	protected BaseDao<SurveyCharts> getDao() {
		return voterecordChartDao;
	}
	
	public void saveSurveyCharts(SurveyCharts vrc){
		getDao().save(vrc);
	}
	public void DeleteTable(){
		StringBuilder hql = new StringBuilder();
		hql.append("delete from ").append(getEntityName());
		getDao().execute(hql.toString());
	}
	public List[] getSurveyCountList(String dBegin, String dEnd){
		StringBuilder hql = new StringBuilder();
		hql.append("from ").append(getEntityName());
		hql.append(" where countTime >='"+ dBegin +"' and countTime <= '"+dEnd+"'" );
		List<SurveyCharts> listsuvch= getDao().find(hql.toString());
		List[] l=new ArrayList[4];
		List<String> listTime=new ArrayList<String>();
		List<Integer> listtNum=new ArrayList<Integer>();
		List<Integer> listmNum=new ArrayList<Integer>();
		List<Integer> listnNum=new ArrayList<Integer>();
		for(SurveyCharts sch:listsuvch){
			listTime.add(sch.getCountTime().toString());
			listtNum.add(sch.getTodayTnum().intValue());
			listmNum.add(sch.getTodayMnum().intValue());
			listnNum.add(sch.getTodayNnum().intValue());
		}
		l[0]=listTime;
		l[1]=listtNum;
		l[2]=listmNum;
		l[3]=listnNum;
		return l;
	}
	public List<SurveyCharts> getSurveyList(int pageNumber, int pageSize,String search){
		StringBuilder hql = new StringBuilder();
		hql.append("from ").append(getEntityName());
		if(!search.equals("null")&&search!=null){
			hql.append(" where concat(todayTnum, todayMnum,todayNnum,countTime) like '%"+search+"%'");
		}
		hql.append(" order by countTime desc");
		List<SurveyCharts> listsuvch= getDao().find(pageNumber,pageSize,hql.toString());
		return listsuvch;
	}
	public int getSurveyCount(String search){
		StringBuilder hql = new StringBuilder();
		hql.append("select count(*) from ").append(getEntityName());
		if(!search.equals("null")&&search!=null){
			hql.append(" where concat(todayTnum, todayMnum,todayNnum,countTime) like '%"+search+"%'");
		}
		hql.append(" order by countTime desc");
	    int  listCount= getDao().count(hql.toString()).intValue();
		return listCount;
	}
	
}
第2级：SurveyIndustryService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class SurveyIndustryService extends BaseService<SurveyIndustry> {

	@Resource
	private BaseDao<SurveyIndustry> surveyIndustryDao;

	@Override
	protected BaseDao<SurveyIndustry> getDao() {
		return surveyIndustryDao;
	}
	
	public List<SurveyIndustry> allSurveyIndustry() {
		return getDao().find(
				" from " + getEntityName() + " where valid = " + SystemCommon_Constant.VALID_STATUS_1 + " order by sort asc");
	}
	
	public DataGrid datagrid(RequestPage page)
	{
		String hql = (new StringBuilder("from ")).append(getEntityName()).toString();
		if (!StringUtils.isEmpty(page.getSort()))
			hql = (new StringBuilder(String.valueOf(hql))).append(" order by ").append(page.getSort()).append(" ").append(page.getOrder()).toString();
		String counthql = (new StringBuilder("select count(*) from ")).append(getEntityName()).toString();
		long count = getDao().count(counthql, new Object[0]).longValue();
		java.util.List rolelist = getDao().find(page.getPage(), page.getRows(), hql, new Object[0]);
		return new DataGrid(count, rolelist);
	}
	
	/**
	 * 逻辑删除
	 */
	public void logicDelete(String ids) {
		for (int i = 0; i < ids.split(",").length; i++) {
			surveyIndustryDao.execute("UPDATE " + getEntityName() + " SET valid = ? WHERE id IN (" + ids + ")", SystemCommon_Constant.VALID_STATUS_0);
		}
	}

	public List<SurveyIndustry> getSurveyIndustry(String parentCode){
		StringBuffer sb = new StringBuffer(" FROM " + getEntityName());
	    sb.append(" WHERE 1=1 AND valid = '").append("1").append("'");

	    if (StringUtils.isNotBlank(parentCode))
	      sb.append(" AND pid = ").append(parentCode);
	    else {
	      sb.append(" AND pid = 0");
	    }
	    sb.append(" ORDER BY sort ASC ");
	    List<SurveyIndustry> list = this.surveyIndustryDao.find(sb.toString(), new Object[0]);
	    return list;
	}
	/**
	 * 根据code获取到行业分类信息
	 * @param code
	 * @return
	 */
	public SurveyIndustry getSurveyIndustryByCode(String code){
		StringBuffer sb = new StringBuffer(" FROM " + getEntityName());
	      sb.append(" WHERE 1=1 AND valid = '").append("1").append("'");
	      sb.append(" AND id = "+code+"");
	      
	    List<SurveyIndustry> list = this.surveyIndustryDao.find(sb.toString());
	    if(list.size()>0){
	    	return list.get(0);
	    }else{
	    	return null;
	    }
	}
	
	/**
	 * 根据objectType获取到行业分类信息
	 * @param code
	 * @return
	 */
	public SurveyIndustry getSurveyIndustryByType(String objectType){
		StringBuffer sb = new StringBuffer(" FROM " + getEntityName());
	      sb.append(" WHERE 1=1 AND valid = '").append("1").append("'");
	      sb.append(" AND objectType = '"+objectType+"'");
	      
	    List<SurveyIndustry> list = this.surveyIndustryDao.find(sb.toString());
	    if(list.size()>0){
	    	return list.get(0);
	    }else{
	    	return null;
	    }
	}
	
	
	
}
第2级：SurveyMerchantService.java
/**
 * 
 */
package com.guangfan.zxt.surveymanage.service;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.SurveyMerchant;

import dk.dao.BaseDao;
import dk.service.BaseService;

/**  
 * Filename: SurveyMerchantService.java  
 * Description:
 * Copyright:Copyright (c)2014
 * Company:  GuangFan 
 * @author:  YangHui
 * @version: 1.0  
 * @Create:  2014-10-11  
 * Modification History:  
 * Date								Author			Version
 * ------------------------------------------------------------------  
 * 2014-10-11 上午9:43:10				YangHui 	1.0
 */
@Service
public class SurveyMerchantService extends BaseService<SurveyMerchant> {

	
	@Resource
	private BaseDao<SurveyMerchant> surveyMerchantDao;
	@Override
	protected BaseDao<SurveyMerchant> getDao() {
		return surveyMerchantDao;
	}

}
第2级：SurveyPartakeUserService.java
package com.guangfan.zxt.surveymanage.service;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.SurveyIndustry;
import com.guangfan.zxt.surveymanage.entity.SurveyPartakeUser;
import com.guangfan.zxt.util.DataUtil;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class SurveyPartakeUserService extends BaseService<SurveyPartakeUser> {

	@Resource
	private BaseDao<SurveyPartakeUser> surveyPartakeDao;
	@Resource
	private SurveyIndustryService surveyIndustryService;
	@Override
	protected BaseDao<SurveyPartakeUser> getDao() {
		return surveyPartakeDao;
	}
	/**
	  * 功能描述：判断此发票信息是否已作废（已经参与过）
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public boolean checkOilCardNo(String oilcardNo) {
		String hql =" from "+getEntityName()+" where oilcardNo=? and valid=? ";
		List list = getDao().find(hql, new Object[]{oilcardNo,SystemCommon_Constant.VALID_STATUS_1});
		if(DataUtil.listIsNotNull(list)){
			return true;
		}else{
			return false;
		}
	}
	
	
	/**
	  * 方法名称：checkEntity
	  * 功能描述：判断是否存在第三方（如加油站）问卷评价的实体信息
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public boolean checkEntity(String objectId) {
		String hql =" from "+getEntityName()+" where objectId=? and valid=? ";
		List list = getDao().find(hql, new Object[]{objectId,SystemCommon_Constant.VALID_STATUS_1});
		if(DataUtil.listIsNotNull(list)){
			return true;
		}else{
			return false;
		}
	}

	/**
	  * 功能描述：根据实体ID获取姓名
	  * 创建时间:2015年12月23日上午11:57:05
	  * 创建人: pengfei Zhao
	  * @param @param objectId
	  * @param @return 
	  * @return boolean
	 */
	public SurveyPartakeUser getNameById(Long Id) {
		String hql =" from "+getEntityName()+" where id=? and valid=? ";
		SurveyPartakeUser surveyPu  = getDao().get(hql, new Object[]{Id,SystemCommon_Constant.VALID_STATUS_1});
		return surveyPu;
	}
	
	
}
第2级：SurveyService.java
package com.guangfan.zxt.surveymanage.service;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.transform.Transformers;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.enterprisemanage.model.SurveySearchBean;
import com.guangfan.zxt.integralmanage.entity.Integral;
import com.guangfan.zxt.integralmanage.entity.IntegralOil;
import com.guangfan.zxt.integralmanage.entity.IntegralOilSub;
import com.guangfan.zxt.integralmanage.entity.IntegralSub;
import com.guangfan.zxt.integralmanage.service.IntegralOilService;
import com.guangfan.zxt.integralmanage.service.IntegralOilSubService;
import com.guangfan.zxt.integralmanage.service.IntegralService;
import com.guangfan.zxt.integralmanage.service.IntegralSubService;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.membermanage.service.MembermanageService;
import com.guangfan.zxt.surveymanage.entity.IndustryEntity;
import com.guangfan.zxt.surveymanage.entity.Survey;
import com.guangfan.zxt.surveymanage.model.RelationObjectCountVo;
import com.guangfan.zxt.surveymanage.model.SurveyVo;
import com.guangfan.zxt.systemconfig.entity.SystemConfig;
import com.guangfan.zxt.systemconfig.service.MemberGradeService;
import com.guangfan.zxt.util.DataUtil;
import com.guangfan.zxt.util.DateUtil;
import com.guangfan.zxt.util.HtmlUtil;
import com.guangfan.zxt.util.MyPaginationResult;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

/**
 * <p/>河南广帆信息技术有限公司版权所有
 * <p/>创 建 人：Ryu Zheng
 * <p/>创建日期：2013-11-14
 * <p/>创建时间：下午3:07:56
 * <p/>功能描述：问卷基本信息表Service
 * <p/>===========================================================
 */
@Service
public class SurveyService extends BaseService<Survey>{
	private Logger logger = Logger.getLogger(SurveyService.class);
	@Resource
	private BaseDao<Survey> surveyDao;
	@Resource
	private MembermanageService membermanageService;
	@Resource
	private MemberGradeService memberGradeService;
	@Resource
	private IntegralSubService integralSubService;
	@Resource
	private IntegralOilSubService integralOilSubService;
	@Resource
	private IntegralService integralService;
	@Resource
	private IntegralOilService integralOilService;
	@Resource
	private SurveyIndustryService surveyIndustryService;
	@Resource
	private SurveyCategoryService surveyCategoryService;
	@Resource
	private SessionFactory sessionFactory;
	
	
	@Override
	protected BaseDao<Survey> getDao() {
		return surveyDao;
	}

	/**
	 * 功能描述：获取问卷调查列表
	 * 创建时间:2013-11-18下午4:40:28
	 * 创建人: Ryu Zheng
	 * 
	 * @param page
	 * @param isShow 1：需要过滤被屏蔽公示的问卷 0：不过滤
	 * @return
	 */
	public MyPaginationResult datagrid(RequestPage page, Long industryId, String isShow){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
				.append(" WHERE valid = '" + SystemCommon_Constant.VALID_STATUS_1 + "'")
				.append(" and auditstatus = '" + SystemCommon_Constant.AUDIT_STATUS_1 + "'")
				.append(" and status = '" + SystemCommon_Constant.SURVEY_STATUS_ON + "'")
				.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') <= '" + DateUtil.dateToString(new Date()) + "'")
				.append(" and STR_TO_DATE(endtime,'%Y-%m-%d') >= '" + DateUtil.dateToString(new Date()) + "'")
				.append((industryId != null && industryId > 0) ? (" and industryid = " + industryId) : "")
				.append(("1".equals(isShow)) ? (" and isShow = " + SystemCommon_Constant.SIGN_YES_1) : "")
				.append(" ORDER BY createtime DESC, participatenum desc ");
		
		totalRecordHql.append("select count(*) FROM ").append(getEntityName())
				.append(" WHERE valid = '" + SystemCommon_Constant.VALID_STATUS_1 + "'")
				.append(" and auditstatus = '" + SystemCommon_Constant.AUDIT_STATUS_1 + "'")
				.append(" and status = '" + SystemCommon_Constant.SURVEY_STATUS_ON + "'")
				.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') <= '" + DateUtil.dateToString(new Date()) + "'")
				.append(" and STR_TO_DATE(endtime,'%Y-%m-%d') >= '" + DateUtil.dateToString(new Date()) + "'")
				.append((industryId != null && industryId > 0) ? (" and industryid = " + industryId) : "")
				.append(("1".equals(isShow)) ? (" and isShow = " + SystemCommon_Constant.SIGN_YES_1) : "");
		
		// 获取总数据条数
		int totalRecord=getDao().count(totalRecordHql.toString()).intValue();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		List<Survey> surveyList = getDao().find(currentPage, pageSize, hql.toString());
		
		List<SurveyVo> surveyVoList = new ArrayList<SurveyVo>(); 
		for (Iterator iterator1 = surveyList.iterator(); iterator1.hasNext();) {
			Survey survey = (Survey)iterator1.next();
			SurveyVo surveyVo = new SurveyVo();
			try {
				PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (survey.getIndustryid() > 0) 
				surveyVo.setIndustryName(surveyIndustryService.get(survey.getIndustryid()) != null ? surveyIndustryService.get(survey.getIndustryid()).getText() : "");
			if (survey.getCategoryid() > 0) 
				surveyVo.setCategoryName(surveyCategoryService.get(survey.getCategoryid()) != null ? surveyCategoryService.get(survey.getCategoryid()).getCategoryname() : "");
			if(StringUtils.isNotBlank(survey.getStatus())){
				if(survey.getStatus().equals("1")){
					surveyVo.setStatusName("投票进行中");
				}else if(survey.getStatus().equals("2")){
					surveyVo.setStatusName("已关闭");
				}else{
					surveyVo.setStatusName("其他");
				}
			}else{
				surveyVo.setStatusName("未审核");
			}
			if(survey.getIntegral()!=null){
				surveyVo.setIntegralStr(survey.getIntegral().toString());
			}else{
				surveyVo.setIntegralStr("空");
			}
			surveyVoList.add(surveyVo);
		}
		
		return new MyPaginationResult(pageCount, currentPage, totalRecord, surveyVoList);
	}
	
	/**
	 * 功能描述：获取热门问卷
	 * 创建时间:2015-9-9下午4:40:28
	 * 创建人: Ryu Zheng
	 * 
	 * @param page
	 * @return
	 */
	public List<Survey> getHotSurveyList(){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
		.append(" WHERE valid = '" + SystemCommon_Constant.VALID_STATUS_1 + "'")
		.append(" and auditstatus = '" + SystemCommon_Constant.AUDIT_STATUS_1 + "'")
		.append(" and status = '" + SystemCommon_Constant.SURVEY_STATUS_ON + "'")
		.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') <= '" + DateUtil.dateToString(new Date()) + "'")
		.append(" and STR_TO_DATE(endtime,'%Y-%m-%d') >= '" + DateUtil.dateToString(new Date()) + "'")
		.append(" ORDER by participatenum desc ");
		
		totalRecordHql.append("select count(*) FROM ").append(getEntityName())
		.append(" WHERE valid = '" + SystemCommon_Constant.VALID_STATUS_1 + "'")
		.append(" and auditstatus = '" + SystemCommon_Constant.AUDIT_STATUS_1 + "'")
		.append(" and status = '" + SystemCommon_Constant.SURVEY_STATUS_ON + "'")
		.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') <= '" + DateUtil.dateToString(new Date()) + "'")
		.append(" and STR_TO_DATE(endtime,'%Y-%m-%d') >= '" + DateUtil.dateToString(new Date()) + "'");
		
		List<Survey> surveyList = getDao().find(1, 7, hql.toString());
		
		return surveyList;
	}
	
	/**
	 * 功能描述：获取某个问卷在投票时是否需要登录
	 * 创建时间:2013-11-13上午11:29:14
	 * 创建人: Ryu Zheng
	 * 
	 * @param questionnaireId
	 * @return 0:需要登录   1:不需要登录
	 */
	public String voteNeedLogin(Long questionnaireId){
		List<Survey> questionnaireList = getDao().find("from "+getEntityName()+" where id=?", questionnaireId);
		String isAnony = SystemCommon_Constant.VOTE_NOLOGIN;
		if(questionnaireList.size()>0){
			//isAnony = questionnaireList.get(0).getNoLogin();
		}
		return isAnony;
	}
	
	/**
	 * 功能描述：获取某个问卷"查看投票结果"的设置
	 * 创建时间:2013-11-14上午11:56:48
	 * 创建人: Ryu Zheng
	 * 
	 * @param questionnaireId
	 * @return 0:不允许   1:投票后允许   2:允许
	 */
	public String findShowResultOf(Long questionnaireId){
		List<Survey> questionnaireList = getDao().find("from "+getEntityName()+" where id=?", questionnaireId);
		String isShowResult = "1";
		if(questionnaireList != null && questionnaireList.size()>0){
			//isShowResult = questionnaireList.get(0).getShowResult();
		}
		return isShowResult;
	}
	
	/**
	 * 功能描述：获取最新的一条投票问卷数据
	 * 创建时间:2013-11-21下午2:23:04
	 * 创建人: Ryu Zheng
	 * 
	 * @return
	 */
	public Survey getLatestSurvey(){
		Survey questionnaire = null;
		
		StringBuilder hql = new StringBuilder();
		hql.append("FROM ").append(getEntityName()).append(" WHERE valid = '")
		.append(SystemCommon_Constant.VALID_STATUS_1).append("' ")
		.append(" ORDER BY createtime DESC ");
		
		List<Survey> questionnaireList = getDao().find(hql.toString());
		if(questionnaireList != null && questionnaireList.size() > 0){
			questionnaire = questionnaireList.get(0);
		}
		
		return questionnaire;
	}

	/**
	 * 
	 * @Description: 网站首页问卷调查列表显示
	 * @author yanghui 
	 * @Created 2014-4-12
	 * @param page
	 * @return
	 */
	public DataGrid surverListDataGrid(RequestPage page) {
		StringBuilder hql = new StringBuilder();
		hql.append("FROM ").append(getEntityName()).append(" WHERE valid = '")
		.append(SystemCommon_Constant.VALID_STATUS_1).append("' and auditstatus='").append(SystemCommon_Constant.AUDIT_STATUS_1).append("' ")
		.append(" ORDER BY createtime DESC ");
		List<Survey> list = getDao().find(page.getPage(), page.getRows(), hql.toString(), new Object[0]);
		//以下的循环方法是为了去除问卷描述中的CSS样式
		List<Survey> slist = new ArrayList<Survey>();
		for(int i=0;i<list.size();i++){
			Survey s = list.get(i);
			String description = s.getDescription();
			description = HtmlUtil.getText(description);
			s.setDescription(description);
			slist.add(s);
		}
		StringBuilder counthql = new StringBuilder();
		counthql.append(" SELECT COUNT(*) FROM ").append(getEntityName()).append(" WHERE valid = '")
		.append(SystemCommon_Constant.VALID_STATUS_1).append("' and auditstatus='").append(SystemCommon_Constant.AUDIT_STATUS_1).append("' ")
		.append(" ORDER BY createtime DESC ");
		Long total = getDao().count(counthql.toString(), new Object[0]).longValue();
		return new DataGrid(total, slist);
	}
	/**
	 * 
	 * @Description:  修改用户积分的公共方法（新闻评论、分享获得积分；投票获得积分等）
	 * @author yanghui 
	 * @Created 2014-4-1
	 * @param bean
	 * @param integralCategory  积分类别ID值
	 * @return
	 */
	public Integral updateUserIntegral(Long userId,Long titleId,Long inte,String sourceTitle, String integralCategory) {
		//处理该用户获得的评论积分
		  //1.操作积分子表
		IntegralSub intergalSub = new IntegralSub();
		intergalSub.setUserId(userId); //客户端用户
		intergalSub.setIntegralSource(titleId); //积分来源  即 新闻资讯的ID
		intergalSub.setInteCateId(Long.valueOf(integralCategory)); //积分类别Id
		Long basicVlaue = new Long(0); //基本积分
		Long rewardValue = new Long(0); //奖励积分（基本积分乘以奖励倍数）
		//根据参数代码得到评论的积分配置
		SystemConfig  config = new SystemConfig();
		basicVlaue = inte;
	//	config.setParameDefaultValue(inte);
		/*if(config!=null){
			if(!DataUtil.isNull(config.getParameCurrentValue())){
				//当前值不为空，则基本积分等于当前值
				basicVlaue = config.getParameCurrentValue();
			}else basicVlaue = config.getParameDefaultValue();
		}*/
		//客户端用户
		MMember cuser = membermanageService.get(userId);
		String level = cuser.getCmemberlevel(); //用户的级别
		//通过用户的级别从会员等级表中查询到该用户所能够用户的奖励倍数（此时的用户级别即为基本表的ID值）
		String times = memberGradeService.get(Long.valueOf(level)) != null ? memberGradeService.get(Long.valueOf(level)).getRewardMultiple() : "";
		if(!DataUtil.isEmpty(times)){
			BigDecimal b = new BigDecimal(basicVlaue);
			BigDecimal t = new BigDecimal(times);
			rewardValue = b.multiply(t).longValue();
		}
		intergalSub.setBasicValue(basicVlaue); 
		intergalSub.setRewardValue(rewardValue); 
		intergalSub.setValid(SystemCommon_Constant.VALID_STATUS_1); //默认有效
		intergalSub.setTotalValue(basicVlaue+rewardValue); //本次获得的总积分
		intergalSub.setGainDate(DateUtil.getTimestamp());//积分获得日期
		intergalSub.setSourceTitle(sourceTitle);
		integralSubService.save(intergalSub);
		
		
		 //2.操作用户的积分总表
		Integral integral =integralService.getIntegralByUserId(userId);
		Integral in = new Integral();
		if(integral==null){ //说明该用户还没有存在积分信息
			in.setCurrentValue(intergalSub.getTotalValue());
			in.setUsedValue(new Long(0));
			in.setUserId(userId);
			integralService.save(in);
			return in;
		}else{
		//	integral = new Integral();
			integral.setCurrentValue(integral.getCurrentValue()+ intergalSub.getTotalValue());
			integralService.update(integral);
			return integral;
		}
		
	}
	
	
	/**
	 * 
	 * @Description:  修改用户问卷积分的公共方法（投票获得积分）针对加油站的积分管理
	 * @author zhaopf  
	 * @Created 2016-02-14
	 * @param bean
	 * @param integralCategory  积分类别ID值
	 * @return
	 */
	public IntegralOil updateUserSurveyIntegral(Long userId,Long titleId,Long inte,String sourceTitle, String integralCategory,IndustryEntity induEntity) {
		//处理该用户获得的评论积分
		  //1.操作积分子表
		IntegralOilSub intergalSub = new IntegralOilSub();
		intergalSub.setUserId(userId); //客户端用户
		intergalSub.setIntegralSource(titleId); //积分来源  即 新闻资讯的ID
		intergalSub.setInteCateId(Long.valueOf(integralCategory)); //积分类别Id(加油站投票)
		Long basicVlaue = new Long(0); //基本积分
		//根据参数代码得到评论的积分配置
		SystemConfig  config = new SystemConfig();
		basicVlaue = inte;
	//	config.setParameDefaultValue(inte);
		/*if(config!=null){
			if(!DataUtil.isNull(config.getParameCurrentValue())){
				//当前值不为空，则基本积分等于当前值
				basicVlaue = config.getParameCurrentValue();
			}else basicVlaue = config.getParameDefaultValue();
		}*/
		//客户端用户
		MMember cuser = membermanageService.get(userId);
		intergalSub.setBasicValue(basicVlaue); 
		intergalSub.setValid(SystemCommon_Constant.VALID_STATUS_1); //默认有效
		intergalSub.setGainDate(DateUtil.getTimestamp());//积分获得日期
		intergalSub.setSourceTitle(sourceTitle);
		intergalSub.setEntityCategory(Long.valueOf(induEntity.getEntityCategory()));
		intergalSub.setIndustryEntity(induEntity.getId());
		integralOilSubService.save(intergalSub);
		
		
		 //2.操作用户的积分总表
		IntegralOil integral =integralOilService.getIntegralOilByUserId(userId);
		if(integral==null){ //说明该用户还没有存在积分信息
			IntegralOil in = new IntegralOil();
			in.setCurrentValue(intergalSub.getBasicValue());
			in.setUsedValue(new Long(0));
			in.setUserId(userId);
			integralOilService.save(in);
			return in;
		}else{
		//	integral = new Integral();
			integral.setCurrentValue(integral.getCurrentValue()+ intergalSub.getBasicValue());
			integralOilService.update(integral);
			return integral;
		}
		
	}
	
	
	/**
	 * 功能描述：获取问卷基本信息列表
	 * 创建时间:2013-11-26上午10:02:56
	 * 创建人: Ryu Zheng
	 * 
	 * @param page
	 * @return
	 */
	public DataGrid datagrid(RequestPage page, SurveySearchBean searchBean,Long entId){
		StringBuffer hql = new StringBuffer(); // 分页查询语句
		StringBuffer counthql = new StringBuffer(); // 记录总条数语句
		StringBuffer sb = new StringBuffer(); // 查询条件
		
		hql.append(" from " + getEntityName() + " where 1=1 and id in (select surveyId from EnterpriseSurveyLink where enterpriseId='"+entId+"')");
		counthql.append(" select count(*) from " + getEntityName() + " where 1=1 and id in (select surveyId from EnterpriseSurveyLink where enterpriseId='"+entId+"') " );
		if(!DataUtil.isEmpty(searchBean.getSubject())){
			sb.append(" and subject like '%" + searchBean.getSubject() + "%'");
		}
		String auditstatus = searchBean.getAuditstatus();
		if(!DataUtil.isEmpty(auditstatus)){
			if (SystemCommon_Constant.SURVEY_STATUS_CLOSE.equals(auditstatus))
				sb.append(" and status = '" + auditstatus + "'");
			else
				sb.append(" and auditstatus = '" + auditstatus + "'");
		}
	/*	if(!DataUtil.isNull(searchBean.getCreateName())){
			String sql = "select t.nuserid from p_user t WHERE t.cfullname like '%" + searchBean.getCreateName() + "%'";
			String createIds = this.getIdsStringBySql(sql);
			if (DataUtil.isEmpty(createIds))
				createIds = "''";
			sb.append(" and createid in (" + createIds + ")");
		}*/
		if(!DataUtil.isNull(searchBean.getBegintime())){
			sb.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') >= '" + DateUtil.dateToString(searchBean.getBegintime()) + "'");
		}
		if(!DataUtil.isNull(searchBean.getEndtime())){
			sb.append(" and STR_TO_DATE(begintime,'%Y-%m-%d') <= '" + DateUtil.dateToString(searchBean.getEndtime()) + "'");
		}
		sb.append(" and valid ='"+SystemCommon_Constant.VALID_STATUS_1+"'");
		sb.append(" order by createtime desc ");
		
		List<Survey> surveyList = getDao().find(page.getPage(), page.getRows(), hql.append(sb).toString());
		
		List<SurveyVo> surveyVoList = new ArrayList<SurveyVo>(); 
		for (Iterator iterator1 = surveyList.iterator(); iterator1.hasNext();) {
			Survey survey = (Survey)iterator1.next();
			SurveyVo surveyVo = new SurveyVo();
			try {
				PropertyUtils.copyProperties(surveyVo, survey); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			if (survey.getIndustryid() > 0) 
				surveyVo.setIndustryName(surveyIndustryService.get(survey.getIndustryid()).getText());
			if (survey.getCategoryid() > 0) 
				surveyVo.setCategoryName(surveyCategoryService.get(survey.getCategoryid()).getCategoryname());
			if (survey.getCreateid() > 0)
				//surveyVo.setCreateName(userService.get(survey.getCreateid()).getFullname());
			surveyVoList.add(surveyVo);
		}
		
		Long count = getDao().count(counthql.append(sb).toString());
		
		return new DataGrid(count, surveyVoList);
	}
	/**
	 * 通过一条 sql 得到数据库的一列，然后转成一个字符串
	 * @param sql
	 * @return
	 */
	public String getIdsStringBySql(String sql) {
		String idsStr = "";
		List list = null;  // 查询结果只有一列，放到一个 list 里（无需泛型）
		Session session = sessionFactory.getCurrentSession();
		try {
			list = session.createSQLQuery(sql).list();
		} catch (Exception e) {
		//	logger.error("getIdsStringBySql ERROR!", e);
		} finally {
			//this.releaseSession(session);
		}
		if (list != null && list.size() > 0) {
			idsStr = list.toString();  // 形如：[000010000500001, 00001000050000100004, 00001000050000100002, 00001000050000100003]     
			idsStr = idsStr.replace("[", "");  // 把前后的中括号去掉
			idsStr = idsStr.replace("]", "");
			idsStr = idsStr.replaceAll(" ", "");  // 把中间的空格去掉
		}
		return idsStr;
	}
	public void updateSurvey(Survey survey){
		Session session = sessionFactory.getCurrentSession();
		Object obj=session.merge(survey);
		session.update(obj);
	}
	//发布问卷
	public void updateAuditSurvey(String ids, Long auditId, String auditstatus, String auditopinion){
		String hql="UPDATE " + getEntityName() + " SET auditid=?,audittime=?,auditstatus=?,auditopinion=?, status=? WHERE id in ("+ids+")"; // 审核通过后即把问卷状态改为“投票进行中”
		this.getDao().execute(hql, auditId, new Date(), auditstatus, auditopinion, SystemCommon_Constant.SURVEY_STATUS_ON);
	}
	//匿名登录时，获取最小用户ID
	public Long getMinSurveyId(){
		Session session = sessionFactory.getCurrentSession();
		String sql="select -(count(1))-1 as numId  from s_voterecord  vote where  vote.userid<0";
		Long num = Long.parseLong(session.createSQLQuery(sql).uniqueResult().toString());
 		return num;
	}
	
	public Integer getRelationObjectNum(Long surveyId) {
		Session session = sessionFactory.getCurrentSession();
		// 原始 sql 形如：
		/**
		 SELECT COUNT(DISTINCT(t.enterprisename)) FROM 
		 (
			SELECT IFNULL(e.centerprisename, '其他') enterprisename FROM s_voterecord v
			LEFT JOIN e_enterpriseinfo e ON v.relationobjectid = e.nenterpriseid
			WHERE v.surveyid = 302
			GROUP BY v.relationobjectid, e.centerprisename
			ORDER BY v.relationobjectid
		 ) t; 
		*/
		String sql = "SELECT COUNT(DISTINCT(t.enterprisename)) FROM" +
					 "(" +
					 "		SELECT IFNULL(e.centerprisename, '其他') enterprisename FROM s_voterecord v" +
					 "		LEFT JOIN e_enterpriseinfo e ON v.relationobjectid = e.nenterpriseid" +
					 "		WHERE v.surveyid = " + surveyId +
					 "		GROUP BY v.relationobjectid, e.centerprisename" +
					 "		ORDER BY v.relationobjectid" +
					 ") t;";
		Integer num = Integer.parseInt(session.createSQLQuery(sql).uniqueResult().toString());
		return num;
	}
	
	/**
	 * 功能描述：获取主体对象问卷数量列表
	 * 原始 sql 形如：
	   SELECT v.relationobjectid, IFNULL(e.centerprisename, '其他') enterprisename, COUNT(DISTINCT(v.batchnumber)) num FROM s_voterecord v
	   LEFT JOIN e_enterpriseinfo e ON v.relationobjectid = e.nenterpriseid
	   WHERE v.surveyid = 302
	   GROUP BY e.centerprisename -- 没有保存调查对象 id 或者根据保存的调查对象 id 去公司表查不到数据的都算作“其他”
	   -- GROUP BY v.relationobjectid, e.centerprisename -- 以上两种情况分开
	   ORDER BY v.relationobjectid;
	 */
	// 由于后续判断较为麻烦（VoteRecordService.getVoteNum()），所以直接在前面保存投票记录时如果调查对象查不到就直接不存 relationobjectid 了
	public MyPaginationResult getRelationObjectCountList(RequestPage page, Long surveyId, Long relationObjectId, String relationObjectName){
		List<RelationObjectCountVo> relationObjectCountVoList = new ArrayList<RelationObjectCountVo>();
		String sql = "SELECT IF(e.centerprisename IS NULL, 0, v.relationobjectid) RELATIONOBJECTID, IFNULL(e.centerprisename, '其他') ENTERPRISENAME, COUNT(distinct(v.batchnumber)) NUM from s_voterecord v" +
				" LEFT JOIN e_enterpriseinfo e ON v.relationobjectid = e.nenterpriseid" +
				" WHERE v.surveyid = " + surveyId +
				((relationObjectId != null && relationObjectId > 0) ? (" and v.relationobjectid = " + relationObjectId) : "")  +
				(StringUtils.isNotBlank(relationObjectName) ? (" and e.centerprisename LIKE '%" + relationObjectName + "%'") : "")  +
				" GROUP BY e.centerprisename" +
				" ORDER BY v.relationobjectid desc"; 
		Session session = sessionFactory.getCurrentSession();
		try {
			relationObjectCountVoList = (List<RelationObjectCountVo>) session.createSQLQuery(sql).
			   setResultTransformer(Transformers.aliasToBean(RelationObjectCountVo.class))
			   .list();
		} catch (Exception e) {
			logger.error("getIdsStringBySql ERROR!", e);
		} finally {
			//this.releaseSession(session);
		}
		
		// 获取总数据条数
		int totalRecord = relationObjectCountVoList.size();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		return new MyPaginationResult(pageCount, relationObjectCountVoList);
	}
}
第2级：VoteRecordPhoneService.java
package com.guangfan.zxt.surveymanage.service;

import javax.annotation.Resource;

import org.springframework.stereotype.Service;

import com.guangfan.zxt.surveymanage.entity.VoteRecordPhone;

import dk.dao.BaseDao;
import dk.service.BaseService;
@Service
public class VoteRecordPhoneService extends BaseService<VoteRecordPhone> {

	@Resource
	private BaseDao<VoteRecordPhone> voteRecordPhoneDao;
	@Override
	protected BaseDao<VoteRecordPhone> getDao() {
		return voteRecordPhoneDao;
	}

	
	
}
第2级：VoteRecordReportService.java
package com.guangfan.zxt.surveymanage.service;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.apache.commons.lang3.StringUtils;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.surveymanage.entity.Option;
import com.guangfan.zxt.surveymanage.entity.Question;
import com.guangfan.zxt.surveymanage.entity.Survey;
import com.guangfan.zxt.surveymanage.entity.VoteRecordReport;
import com.guangfan.zxt.util.MyPaginationResult;

import dk.dao.BaseDao;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class VoteRecordReportService extends BaseService<VoteRecordReport>{
	@Resource
	private BaseDao<VoteRecordReport> voteRecordReportDao;
	
	@Override
	protected BaseDao<VoteRecordReport> getDao() {
		return voteRecordReportDao;
	}
	
	@Resource
	private SessionFactory sessionFactory;
	
	@Resource
	private SurveyService surveyService;
	
	@Resource
	private QuestionService questionService;
	
	@Resource
	private OptionService optionService;
	
	@Resource
	private VoteRecordService voteRecordService;
	
	public List<VoteRecordReport> getReportList(Long surveyId){
		List<VoteRecordReport> reportList = getDao().find("from "+getEntityName()+" where surveyid = ? order by id", surveyId);
		return reportList;
	}
	
	/**
	 * 获取选项被选择次数及百分比
	 * @param option1id
	 * @param surveyId
	 * @return
	 */
	public List<VoteRecordReport> getReportListByOptionIdAndSurveyId(Long option1id, Long surveyId){
		List<VoteRecordReport> reportList = getDao().find("from "+getEntityName()+" where option1id = ? and surveyid = ? order by id", option1id, surveyId);
		return reportList;
	}
	
	/**
	 * 获取打分题总分及平均分
	 * @param questionId
	 * @param surveyId
	 * @return
	 */
	public List<VoteRecordReport> getReportListByQuestionIdAndSurveyId(Long questionId, Long surveyId){
		List<VoteRecordReport> reportList = getDao().find("from "+getEntityName()+" where questionId = ? and surveyid = ? order by id", questionId, surveyId);
		return reportList;
	}
	public void deleteOldReportList(Long surveyId) {
		getDao().execute("DELETE FROM " + getEntityName() + " WHERE surveyid = " + surveyId);
	}
	
	/**
	 * 获取问题参与人数
	 * @param questionId
	 * @param surveyId
	 * @return
	 */
	public int getAnswerNumForQuestion(Long questionId, Long surveyId, Long relationObjectId) {
		Session session = sessionFactory.getCurrentSession();
		// 用于获取数据条数的HQL
		//String countSql = "SELECT count(DISTINCT(a.userid)) FROM s_voterecord a WHERE a.questionid = " + questionId + " AND a.surveyid = " + surveyId; zhaopf 因为统计页面显示数量不对
		String countSql = "SELECT count(*) FROM s_voterecord a WHERE a.questionid = " + questionId + " AND a.surveyid = " + surveyId;
		if (relationObjectId != null) {
			if (relationObjectId > 0)
				countSql = countSql + " AND a.relationobjectid = " + relationObjectId;
			else if (relationObjectId == 0)
				countSql = countSql + " AND a.relationobjectid IS NULL ";
		}
		
		// 获取总数据条数
		int num = Integer.valueOf(session.createSQLQuery(countSql).uniqueResult().toString());
		return num;
	}
	/**
	 * 获取某个实体问题参与人数
	 * @param questionId
	 * @param surveyId
	 * @return
	 */
	public int getAnswerNumForQueEntity(Long questionId, Long surveyId, Long relationObjectId,String objectId,String beginTime,String endTime) {
		Session session = sessionFactory.getCurrentSession();
		// 用于获取数据条数的HQL
//		String countSql = "SELECT count(DISTINCT(a.userid)) FROM s_voterecord a WHERE a.questionid = " + questionId + " AND a.surveyid = " + surveyId;//20160727 yyf add 跟getAnswerNumForQuestion方法保持一致
		String countSql = "SELECT count(*) FROM s_voterecord a WHERE a.questionid = " + questionId + " AND a.surveyid = " + surveyId;
		if(objectId!=null&&!objectId.equals("")){
			countSql+=" and cObjectId="+Long.valueOf(objectId);
		}
		if(StringUtils.isNotBlank(beginTime)){
			countSql = countSql +" and votetime >='"+beginTime+" 00:00:00'";
		}
		if(StringUtils.isNotBlank(endTime)){
			countSql = countSql +" and votetime <='"+endTime+" 23:59:59'";
		}
		if (relationObjectId != null) {
			if (relationObjectId > 0)
				countSql = countSql + " AND a.relationobjectid = " + relationObjectId;
			else if (relationObjectId == 0)
				countSql = countSql + " AND a.relationobjectid IS NULL ";
		}
		
		// 获取总数据条数
		int num = Integer.valueOf(session.createSQLQuery(countSql).uniqueResult().toString());
		return num;
	}
	public int addTempData(Long surveyId, Long relationObjectId, Integer relationObjectNum) {
		int result = 0;
		
		Long v_questionID;
		String v_questionType;
		Long v_optionID;
		Long v_optionID_2; // 组合选择题的选项
		Long v_votenum; // 选项被选中次数；
		Long v_votenum_all; // 针对排序题，单个选项被选择的总测试
		int v_score;
		int v_option_checkednum; // 问题被选择的总次数
		int v_option_num; // 针对某一个问题的选项个数
		Double v_option_per; // 选项百分比
		int tmp_p; // 临时变量
		String v_surveyName; // 问卷名称
		String v_questionName; // 问题名称
		String v_option1Name; // 选项名称-单选
		String v_option2Name; // 选项名称-组合
		int v_PARTICIPATENUM; // 问卷参与人数
		
		Survey survey = surveyService.get(surveyId);
		v_surveyName = survey.getSubject();
		v_PARTICIPATENUM = (relationObjectId != null) ? relationObjectNum : survey.getParticipatenum();
		if (survey != null) {
			List<Question> questionList = questionService.listQuestion(surveyId);
			List<Option> optionList1 = new ArrayList<Option>();
			List<Option> optionList2 = new ArrayList<Option>();
			//List<Question> optionList2 = optionService.listOptionByType(questionId, type);
			for (int i = 0; i < questionList.size(); i++) {
				Question question = questionList.get(i);
				v_questionID = question.getId();
				v_questionName = question.getQuestion();
				v_questionType = question.getQuestiontype();
				if ("11".equals(v_questionType) || "12".equals(v_questionType) || "3".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					for (int j = 0; j < optionList1.size(); j++) {
						Option option = optionList1.get(j);
						v_optionID = option.getId();
						v_option1Name = option.getOptionText();
						v_option_checkednum = v_PARTICIPATENUM;
						
						v_votenum = voteRecordService.getVoteNum(surveyId, relationObjectId, v_questionID, v_optionID, null);
						if (v_option_checkednum != 0) {
							v_option_per = (double)v_votenum / (double)v_option_checkednum;
						} else {
							v_option_per = 0.00;
						}
						
						VoteRecordReport voteRecordReport = new VoteRecordReport();
						voteRecordReport.setSurveyid(surveyId);
						voteRecordReport.setSurveyname(v_surveyName);
						voteRecordReport.setQuestionid(v_questionID);
						voteRecordReport.setQuestionname(v_questionName);
						voteRecordReport.setQuestiontype(v_questionType);
						voteRecordReport.setOption1id(v_optionID);
						voteRecordReport.setOption1name(v_option1Name);
						voteRecordReport.setOption2id(null);
						voteRecordReport.setOption2name("");
						voteRecordReport.setVotenum(v_votenum);
						voteRecordReport.setVotepercent(v_option_per);
						voteRecordReport.setOptionValue(null);
						getDao().save(voteRecordReport);
					}
				} else if ("21".equals(v_questionType) || "22".equals(v_questionType) || "4".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					optionList2 = optionService.listOptionByType(question.getId(), SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT);
					for (int j = 0; j < optionList1.size(); j++) {
						Option option1 = optionList1.get(j);
						v_optionID = option1.getId();
						v_option1Name = option1.getOptionText();
						for (int k = 0; k < optionList2.size(); k++) {
							Option option2 = optionList2.get(k);
							v_optionID_2 = option2.getId();
							v_option2Name = option2.getOptionText();
							v_option_checkednum = v_PARTICIPATENUM;
							
							v_votenum = voteRecordService.getVoteNum(surveyId, relationObjectId, v_questionID, v_optionID, v_optionID_2);
							if (v_option_checkednum != 0) {
								v_option_per = (double)v_votenum / (double)v_option_checkednum;
							} else {
								v_option_per = 0.00;
							}
							
							VoteRecordReport voteRecordReport = new VoteRecordReport();
							voteRecordReport.setSurveyid(surveyId);
							voteRecordReport.setSurveyname(v_surveyName);
							voteRecordReport.setQuestionid(v_questionID);
							voteRecordReport.setQuestionname(v_questionName);
							voteRecordReport.setQuestiontype(v_questionType);
							voteRecordReport.setOption1id(v_optionID);
							voteRecordReport.setOption1name(v_option1Name);
							voteRecordReport.setOption2id(v_optionID_2);
							voteRecordReport.setOption2name(v_option2Name);
							voteRecordReport.setVotenum(v_votenum);
							voteRecordReport.setVotepercent(v_option_per);
							voteRecordReport.setOptionValue(null);
							getDao().save(voteRecordReport);
						}
					}
				} else if ("5".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					v_option_num = optionList1.size();
					for (int j = 0; j < optionList1.size(); j++) {
						Option option = optionList1.get(j);
						v_optionID = option.getId();
						v_option1Name = option.getOptionText();
						v_votenum_all = voteRecordService.getVoteNum(surveyId, relationObjectId, v_questionID, v_optionID, null);
						for (int k = 1; k <= v_option_num; k++) {
							v_votenum = voteRecordService.getVoteNum2(surveyId, relationObjectId, v_questionID, v_optionID, Long.parseLong(k + ""));
							if (v_votenum_all != 0) {
								v_option_per = (double)v_votenum / (double)v_votenum_all;
							} else {
								v_option_per = 0.00;
							}
							
							VoteRecordReport voteRecordReport = new VoteRecordReport();
							voteRecordReport.setSurveyid(surveyId);
							voteRecordReport.setSurveyname(v_surveyName);
							voteRecordReport.setQuestionid(v_questionID);
							voteRecordReport.setQuestionname(v_questionName);
							voteRecordReport.setQuestiontype(v_questionType);
							voteRecordReport.setOption1id(v_optionID);
							voteRecordReport.setOption1name(v_option1Name);
							voteRecordReport.setOption2id(null);
							voteRecordReport.setOption2name(null);
							voteRecordReport.setVotenum(v_votenum);
							voteRecordReport.setVotepercent(v_option_per);
							voteRecordReport.setOptionValue(null);
							getDao().save(voteRecordReport);
						}
					}
				}
			}
		} else {
			result = -1;
		}
		
		return result;
	};
	/**
	  * 方法名称：addTempData1
	  * 功能描述：获取某个实体下得评论结果模型
	  * 创建时间:2015年12月28日下午6:32:06
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int addTempData1(Long surveyId, Long relationObjectId, Integer relationObjectNum,String objectId,String beginTime,String endTime) {
		int result = 0;
		
		Long v_questionID;
		String v_questionType;
		Long v_optionID;
		Long v_optionID_2; // 组合选择题的选项
		Long v_votenum; // 选项被选中次数；
		Long v_votenum_all; // 针对排序题，单个选项被选择的总测试
		int v_score;
		int v_option_checkednum; // 问题被选择的总次数
		int v_option_num; // 针对某一个问题的选项个数
		Double v_option_per; // 选项百分比
		int tmp_p; // 临时变量
		String v_surveyName; // 问卷名称
		String v_questionName; // 问题名称
		String v_option1Name; // 选项名称-单选
		String v_option2Name; // 选项名称-组合
		int v_PARTICIPATENUM; // 问卷参与人数
		
		Survey survey = surveyService.get(surveyId);
		v_surveyName = survey.getSubject();
		v_PARTICIPATENUM=voteRecordService.getEntityVoteNum(surveyId, objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
		if (survey != null) {
			List<Question> questionList = questionService.listQuestion(surveyId);
			List<Option> optionList1 = new ArrayList<Option>();
			List<Option> optionList2 = new ArrayList<Option>();
			//List<Question> optionList2 = optionService.listOptionByType(questionId, type);
			for (int i = 0; i < questionList.size(); i++) {
				Question question = questionList.get(i);
				v_questionID = question.getId();
				v_questionName = question.getQuestion();
				v_questionType = question.getQuestiontype();
				if ("11".equals(v_questionType) || "12".equals(v_questionType) || "3".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					for (int j = 0; j < optionList1.size(); j++) {
						Option option = optionList1.get(j);
						v_optionID = option.getId();
						v_option1Name = option.getOptionText();
						v_option_checkednum = v_PARTICIPATENUM;
						
						v_votenum = voteRecordService.getVoteNumEntity(surveyId,  v_questionID, v_optionID, objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
						if (v_option_checkednum != 0) {
							v_option_per = (double)v_votenum / (double)v_option_checkednum;
						} else {
							v_option_per = 0.00;
						}
						
						VoteRecordReport voteRecordReport = new VoteRecordReport();
						voteRecordReport.setSurveyid(surveyId);
						voteRecordReport.setSurveyname(v_surveyName);
						voteRecordReport.setQuestionid(v_questionID);
						voteRecordReport.setQuestionname(v_questionName);
						voteRecordReport.setQuestiontype(v_questionType);
						voteRecordReport.setOption1id(v_optionID);
						voteRecordReport.setOption1name(v_option1Name);
						voteRecordReport.setOption2id(null);
						voteRecordReport.setOption2name("");
						voteRecordReport.setVotenum(v_votenum);
						voteRecordReport.setVotepercent(v_option_per);
						voteRecordReport.setOptionValue(null);
						getDao().save(voteRecordReport);
					}
				} else if ("21".equals(v_questionType) || "22".equals(v_questionType) || "4".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					optionList2 = optionService.listOptionByType(question.getId(), SystemCommon_Constant.SURVEY_QUESTION_TYPE_COMBINATIONSELECT);
					for (int j = 0; j < optionList1.size(); j++) {
						Option option1 = optionList1.get(j);
						v_optionID = option1.getId();
						v_option1Name = option1.getOptionText();
						for (int k = 0; k < optionList2.size(); k++) {
							Option option2 = optionList2.get(k);
							v_optionID_2 = option2.getId();
							v_option2Name = option2.getOptionText();
							v_option_checkednum = v_PARTICIPATENUM;
							
							v_votenum = voteRecordService.getVoteNumEntity(surveyId,  v_questionID, v_optionID, objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
							if (v_option_checkednum != 0) {
								v_option_per = (double)v_votenum / (double)v_option_checkednum;
							} else {
								v_option_per = 0.00;
							}
							
							VoteRecordReport voteRecordReport = new VoteRecordReport();
							voteRecordReport.setSurveyid(surveyId);
							voteRecordReport.setSurveyname(v_surveyName);
							voteRecordReport.setQuestionid(v_questionID);
							voteRecordReport.setQuestionname(v_questionName);
							voteRecordReport.setQuestiontype(v_questionType);
							voteRecordReport.setOption1id(v_optionID);
							voteRecordReport.setOption1name(v_option1Name);
							voteRecordReport.setOption2id(v_optionID_2);
							voteRecordReport.setOption2name(v_option2Name);
							voteRecordReport.setVotenum(v_votenum);
							voteRecordReport.setVotepercent(v_option_per);
							voteRecordReport.setOptionValue(null);
							getDao().save(voteRecordReport);
						}
					}
				} else if ("5".equals(v_questionType)) {
					optionList1 = optionService.listOptionByType(question.getId(), null);
					v_option_num = optionList1.size();
					for (int j = 0; j < optionList1.size(); j++) {
						Option option = optionList1.get(j);
						v_optionID = option.getId();
						v_option1Name = option.getOptionText();
						v_votenum_all = voteRecordService.getVoteNumEntity(surveyId,  v_questionID, v_optionID, objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
						for (int k = 1; k <= v_option_num; k++) {
							v_votenum = voteRecordService.getVoteNum2Entity(surveyId, v_questionID, v_optionID, Long.parseLong(k + ""),objectId, beginTime, endTime);//TODO   yyf add  此处需加上时间段参数
							if (v_votenum_all != 0) {
								v_option_per = (double)v_votenum / (double)v_votenum_all;
							} else {
								v_option_per = 0.00;
							}
							
							VoteRecordReport voteRecordReport = new VoteRecordReport();
							voteRecordReport.setSurveyid(surveyId);
							voteRecordReport.setSurveyname(v_surveyName);
							voteRecordReport.setQuestionid(v_questionID);
							voteRecordReport.setQuestionname(v_questionName);
							voteRecordReport.setQuestiontype(v_questionType);
							voteRecordReport.setOption1id(v_optionID);
							voteRecordReport.setOption1name(v_option1Name);
							voteRecordReport.setOption2id(null);
							voteRecordReport.setOption2name(null);
							voteRecordReport.setVotenum(v_votenum);
							voteRecordReport.setVotepercent(v_option_per);
							voteRecordReport.setOptionValue(null);
							getDao().save(voteRecordReport);
						}
					}
				}
			}
		} else {
			result = -1;
		}
		
		return result;
	};
}
第2级：VoteRecordService.java
package com.guangfan.zxt.surveymanage.service;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.commons.lang3.StringUtils;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.stereotype.Service;

import com.guangfan.zxt.common.SystemCommon_Constant;
import com.guangfan.zxt.discloseInfo.entity.DiscloseInfoReply;
import com.guangfan.zxt.membermanage.entity.MMember;
import com.guangfan.zxt.membermanage.service.MembermanageService;
import com.guangfan.zxt.surveymanage.entity.Question;
import com.guangfan.zxt.surveymanage.entity.Survey;
import com.guangfan.zxt.surveymanage.entity.SurveyChartsForSurveyEntity;
import com.guangfan.zxt.surveymanage.entity.SurveyPartakeUser;
import com.guangfan.zxt.surveymanage.entity.VoteRecord;
import com.guangfan.zxt.surveymanage.entity.SurveyCharts;
import com.guangfan.zxt.surveymanage.model.QuestionBean;
import com.guangfan.zxt.surveymanage.model.VoteAndOptionBean;
import com.guangfan.zxt.surveymanage.model.VoteRecordBean;
import com.guangfan.zxt.util.MyPaginationResult;

import dk.dao.BaseDao;
import dk.model.DataGrid;
import dk.model.RequestPage;
import dk.service.BaseService;

@Service
public class VoteRecordService extends BaseService<VoteRecord>{
	@Resource
	private BaseDao<VoteRecord> voteRecordDao;
	
	@Override
	protected BaseDao<VoteRecord> getDao() {
		return voteRecordDao;
	}
	@Resource
	private IndustryEntityService industryEntityService;
	@Resource
	private OptionService optionService;
	@Resource
	private MembermanageService membermanageService;
	@Resource
	private SurveyPartakeUserService sueryPartakeService;
	@Resource
	private SurveyService surveyService;
	@Resource   
	private SurveyChartsForSurveyEntityService surveyChartsForSurveyEntityService;
	@Resource   
	private SurveyChartsService surveyChartsService;
	@Resource
	private SessionFactory sessionFactory;
	
	private Session getSession(){
		return sessionFactory.getCurrentSession();
	}
	/**
	 * 功能描述：获取问卷调查列表
	 * 创建时间:2014-4-19下午4:40:28
	 * 创建人: 燕珂
	 * 
	 * @param page
	 * @return
	 */
	public MyPaginationResult datagrid(RequestPage page, Long questionId, Long relationObjectId){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
				.append(" WHERE questionid = '" + questionId + "'")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
				.append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
				.append(" and answercontent != null")
				.append(" ORDER BY id DESC ");
		
		totalRecordHql.append("select count(*) FROM ").append(getEntityName())
				.append(" WHERE questionid = '" + questionId + "'")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
				.append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
				.append(" and answercontent != null")
				.append(" ORDER BY id DESC ");
		
		// 获取总数据条数
		int totalRecord=getDao().count(totalRecordHql.toString()).intValue();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		List<VoteRecord> voteRecordList = getDao().find(currentPage, pageSize, hql.toString());
		return new MyPaginationResult(pageCount, voteRecordList);
	}
	/**
	  * 方法名称：datagrid1
	  * 功能描述：获取评论列表也就是输入框里面的内容列表
	  * 创建时间:2015年12月29日上午10:40:26
	  * 创建人: pengfei Zhao
	  * @param @param page
	  * @return MyPaginationResult
	 */
	public MyPaginationResult datagrid1(RequestPage page, Long questionId, Long relationObjectId, Long objectId,String beginTime,String endTime){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
				.append(" WHERE questionid = '" + questionId + "'")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
				.append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
			    .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
			    .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
				.append(objectId != null ? " and cobjectID = " + objectId:"")
				.append(" and answercontent != null")
				.append(" ORDER BY id DESC ");
		
		totalRecordHql.append("select count(*) FROM ").append(getEntityName())
				.append(" WHERE questionid = '" + questionId + "'")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
				.append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
			    .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
			    .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
				.append(objectId != null ? " and cobjectID = " + objectId:"")
				.append(" and answercontent != null")
				.append(" ORDER BY id DESC ");
		
		// 获取总数据条数
		int totalRecord=getDao().count(totalRecordHql.toString()).intValue();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		List<VoteRecord> voteRecordList = getDao().find(currentPage, pageSize, hql.toString());
		List<VoteRecord> voteRecordList1=new ArrayList<VoteRecord>();
		for(VoteRecord vr:voteRecordList){
			VoteRecordBean vrb = new VoteRecordBean();
			try {
				PropertyUtils.copyProperties(vrb, vr); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			Long userId=vrb.getUserid();
			MMember menber = membermanageService.get(userId);
			if(menber!=null){
				vrb.setUserName(menber.getChinesename());
			}else{
				SurveyPartakeUser surveyPu =sueryPartakeService.getNameById(vrb.getSurveyPartakeUserId());
				if(surveyPu!=null){
					vrb.setUserName(surveyPu.getUsername());
				}else{
					vrb.setUserName("匿名");
				}
			}
			voteRecordList1.add(vrb);
		}
		return new MyPaginationResult(pageCount, voteRecordList1);
	}
	
	/**
	 * 功能描述：质讯通后台问卷列表直接查看输入答案列表数据页面
	 * pengfei zhao
	 * @param page
	 * @return
	 */
	public MyPaginationResult datagridAnswer(RequestPage page, Long surveyid){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
				.append(" WHERE surveyid = '" + surveyid + "'")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
//				.append(" and answercontent != null")
				.append(" group by userId ");
		
		totalRecordHql.append("select count(distinct userId) FROM ").append(getEntityName())
				.append(" WHERE surveyid = '" + surveyid + "'");
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
//				.append(" and answercontent != null");
		
		// 获取总数据条数
		int totalRecord=getDao().count(totalRecordHql.toString()).intValue();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		List<VoteRecord> voteRecordList = getDao().find(currentPage, pageSize, hql.toString());
		List<VoteRecord> voteRecordList1=new ArrayList<VoteRecord>();
		for(VoteRecord vr:voteRecordList){
			VoteRecordBean vrb = new VoteRecordBean();
			try {
				PropertyUtils.copyProperties(vrb, vr); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			Long userId=vrb.getUserid();
			MMember menber = membermanageService.get(userId);
			if(menber!=null){
				vrb.setUserName(menber.getChinesename());
			}else{
				SurveyPartakeUser surveyPu =sueryPartakeService.getNameById(vrb.getSurveyPartakeUserId());
				if(surveyPu!=null){
					vrb.setUserName(surveyPu.getUsername());
				}else{
					vrb.setUserName("匿名");
				}
			}
			String entityName=industryEntityService.getEntityName(vrb.getcObjectId());
			vrb.setEntityName(entityName);
			voteRecordList1.add(vrb);
		}
		return new MyPaginationResult(pageCount, voteRecordList1);
	}
	
	/**
	 * 功能描述：质讯通后台获取参与评价列表
	 * pengfei zhao
	 * @param page
	 * @return
	 */
	public MyPaginationResult datagridUserAnswer(RequestPage page, Long surveyid,Long objectId,String beginTime,String endTime){
		// 用于获取数据列表的HQL
		StringBuilder hql = new StringBuilder();
		// 用于获取数据条数的HQL
		StringBuilder totalRecordHql = new StringBuilder();
		
		hql.append("FROM ").append(getEntityName())
				.append(" WHERE ")
				.append(surveyid != null ? (" surveyid = '" + surveyid + "'") : "1=1")
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
			    .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
			    .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
				.append(" and cObjectId = "+objectId)
				.append(" group by userId ");
		
		totalRecordHql.append("select count(distinct userId) FROM ").append(getEntityName())
				.append(" WHERE ")
				.append(surveyid != null ? (" surveyid = '" + surveyid + "'") : "1=1")
			    .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
			    .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
				.append(" and cObjectId = "+objectId);
				//.append((relationObjectId != null && relationObjectId > 0) ? (" and relationObjectId = " + relationObjectId) : "")
				//.append(" and answercontent != null")
		
		// 获取总数据条数
		int totalRecord=getDao().count(totalRecordHql.toString()).intValue();
		
		// 获取当前页码和页码数量
		int currentPage = page.getPage();
		int pageSize = page.getRows();
		// 然后算出总页数
		int pageCount = (totalRecord + pageSize - 1) / pageSize;
		
		List<VoteRecord> voteRecordList = getDao().find(currentPage, pageSize, hql.toString());
		List<VoteRecord> voteRecordList1=new ArrayList<VoteRecord>();
		for(VoteRecord vr:voteRecordList){
			VoteRecordBean vrb = new VoteRecordBean();
			try {
				PropertyUtils.copyProperties(vrb, vr); // 后者相同属性值会覆盖前者
			} catch (Exception e) {
				e.printStackTrace();
			}
			Long userId=vrb.getUserid();
			MMember menber = membermanageService.get(userId);
			/*if(menber!=null){
				vrb.setUserName(menber.getChinesename());
				vrb.setPhone(menber.getCmobilephone());
				vrb.setIcCard(menber.getCardno());
			}else{*/
				SurveyPartakeUser surveyPu =sueryPartakeService.getNameById(vrb.getSurveyPartakeUserId());
				if(surveyPu!=null){
					vrb.setUserName(surveyPu.getUsername());
					vrb.setPhone(surveyPu.getPhone());
					vrb.setIcCard(surveyPu.getIDCard());
				}else{
					vrb.setUserName("匿名");
				}
//			}
			vrb.setSubject(surveyService.get(vrb.getSurveyid()).getSubject());
			voteRecordList1.add(vrb);
		}
		return new MyPaginationResult(pageCount, voteRecordList1);
	}
	/*
	 * 计算同一IP评论数
	 */
	public int getVoteRecordCountByIpAddress(String surveyId,String ipAddress){
		int count=0;
		StringBuilder hql=new StringBuilder();
		hql.append("select count(*) from ").append(getEntityName())
		   .append(" where surveyId="+surveyId)
		   .append(" and ipAddress='"+ipAddress+"'");
		count=getDao().count(hql.toString()).intValue();
		return count;
	}
	/*
	 * 计算同一用户评论数
	 */
	public int getVoteRecordCountByUserId(String surveyId,String userId){
		int count=0;
		StringBuilder hql=new StringBuilder();
		hql.append("select count(*) from ").append(getEntityName())
		   .append(" where surveyid="+surveyId)
		   .append(" and userid='"+userId+"'");
		count=getDao().count(hql.toString()).intValue();
		return count;
	}

	/**
	 * 
	 * @Description:  门户网站前端我的质讯通模块--我参与的投票----列表信息
	 * @author yanghui 
	 * @Created 2014-4-26
	 * @param page
	 * @param userId
	 * @return
	 */
	public DataGrid getVoteList(RequestPage page, Long userId) {
		StringBuffer hql = new StringBuffer(" select  distinct a.surveyid,a.votetime,a.batchNumber,a.userid,b.subject ");
		hql.append(" from VoteRecord a ,Survey b where a.surveyid = b.id and a.userid =? ");
		hql.append(" order by votetime desc ");
		
		List list = getDao().find(hql.toString(), userId);
		List<VoteRecordBean> beanList = new ArrayList<VoteRecordBean>();
		for(Iterator it = list.iterator();it.hasNext();){
			Object[] obj = (Object[]) it.next();
			VoteRecordBean bean = new VoteRecordBean();
			bean.setSurveyid((Long) obj[0]);
			bean.setVotetime((Date) obj[1]);
			bean.setBatchNumber((String) obj[2]);
			bean.setUserid((Long) obj[3]);
			bean.setSubject((String) obj[4]);
			beanList.add(bean);
		}
		
		int pageNo = page.getPage();
		int pageSize = page.getRows();
		int begin = (pageNo-1)*pageSize;
		int end = (pageNo*pageSize>=beanList.size()?beanList.size():pageNo*pageSize);
		List  childList = beanList.subList(begin, end);
		return new DataGrid(beanList.size(), childList);
	}
	
	/**
	 * 
	 * 与我相关的投票（企业版用户）
	 * @author 燕珂 
	 */
	public DataGrid getRelationMeVoteList(RequestPage page, Long enterpriseId) {
		/**
		 * 原始 sql 形如：
		 *  SELECT DISTINCT(s.ID) surveyId, s.subject surveyName, s.PARTICIPATENUM num, s.CREATETIME createTime
			FROM s_voterecord v, s_survey s 
			WHERE v.surveyid = s.id AND v.RELATIONOBJECTID = 1
			GROUP BY s.ID
			ORDER BY s.CREATETIME desc
		 */
		StringBuffer hql = new StringBuffer("SELECT DISTINCT(s.id), s.subject, s.participatenum, s.createtime");
		hql.append(" FROM VoteRecord v, Survey s");
		hql.append(" WHERE v.surveyid = s.id AND v.relationObjectId = ?");
		hql.append(" GROUP BY s.id");
		hql.append(" ORDER BY s.createtime desc");
		
		List list = getDao().find(hql.toString(), enterpriseId);
		List<Survey> surveyList = new ArrayList<Survey>();
		for(Iterator it = list.iterator();it.hasNext();){
			Object[] obj = (Object[]) it.next();
			Survey survey = new Survey();
			survey.setId((Long) obj[0]);
			survey.setSubject((String) obj[1]);
			survey.setParticipatenum((Integer) obj[2]);
			survey.setCreatetime((Date) obj[3]);
			surveyList.add(survey);
		}
		
		int pageNo = page.getPage();
		int pageSize = page.getRows();
		int begin = (pageNo-1)*pageSize;
		int end = (pageNo*pageSize>=surveyList.size()?surveyList.size():pageNo*pageSize);
		List  childList = surveyList.subList(begin, end);
		return new DataGrid(surveyList.size(), childList);
	}
	
	/**
	 * 
	 * @Description:  用户查看自己的投票明细
	 * @author yanghui 
	 * @Created 2014-4-26
	 * @param surveyId
	 * @param userId
	 * @param batchNumber
	 * @return
	 */
	public List<VoteRecord> getVoteDetail(Long surveyId, Long userId,
			String batchNumber) {
		
		StringBuffer hql = new StringBuffer("select  distinct a.questionid ,b.question,b.description");
		hql.append(" from  where  a.questionid = b.id ");
		hql.append(" and surveyid=? and userid=? and batchNumber=? ");
		hql.append(" order by questionid asc ");
		List list = getDao().find(hql.toString(), new Object[]{surveyId,userId,batchNumber});
		List<VoteRecordBean> beanList = new ArrayList<VoteRecordBean>();
		
		for(Iterator it = list.iterator();it.hasNext();){
			Object[] obj = (Object[]) it.next();
			VoteRecord  vr = (VoteRecord) obj[0];
			String question = (String) obj[1];
			String description = (String) obj[2];
			String optionText = "";
			if(vr.getOption1id()!=null){ //说明该问题下有选项存在，取得选项的内容
				optionText = optionService.get(vr.getOption1id()).getOptionText();
			}
			
			
			
			
		}
		
		
		
		return list;
	}
	
	/**
	 * 
	 * @Description:  会员投票问卷的问题列表
	 * @author yanghui 
	 * @Created 2014-4-26
	 * @param surveyId
	 * @param userId
	 * @param batchNumber
	 * @return
	 */
	public List<Question> getDistinctQuestionList(Long surveyId, Long userId,
			String batchNumber) {
		StringBuffer hql = new StringBuffer("select  distinct a.questionid ,b");
		hql.append(" from VoteRecord a,Question b where  a.questionid = b.id ");
		hql.append(" and a.surveyid=? and a.userid=? and a.batchNumber=? ");
		hql.append(" order by a.questionid asc ");
		List list = getDao().find(hql.toString(), new Object[]{surveyId,userId,batchNumber});
		List<Question> qlist = new ArrayList<Question>();
		for(Iterator it = list.iterator();it.hasNext();){
			Object[] obj = (Object[]) it.next();
			Question question = (Question) obj[1];
			qlist.add(question);
		}
		return qlist;
	}
	
	/**
	 * 
	 * @Description:  会员提交的问卷    每个问题回答的选项
	 * @author yanghui 
	 * @Created 2014-4-28
	 * @param questionId
	 * @param surveyId
	 * @param userId
	 * @param batchNumber
	 * @return
	 */
	public QuestionBean optionList(QuestionBean bean,Long questionId, Long surveyId, Long userId,
			String batchNumber) {
		StringBuffer hql = new StringBuffer(" select a.option1id,a.option2id,a.answercontent,b.requireinput ");
		hql.append(" from VoteRecord a ,Option b where ");
		hql.append(" a.questionid=?  and a.surveyid=? and a.userid=? and a.batchNumber=? and a.option1id = b.id ");
		hql.append(" order by a.option1id asc ");
		List list = getDao().find(hql.toString(), new Object[]{questionId,surveyId,userId,batchNumber});
		if(list!=null && list.size()>0){
			for(Iterator it = list.iterator();it.hasNext();){
				Object[] obj = (Object[]) it.next();
				Long op1 = obj[0]==null?null:(Long)obj[0];
				Long op2 = obj[1]==null?null:(Long)obj[1];
				String answer = (String) obj[2];
				String requireinput = (String) obj[3];
				VoteAndOptionBean vaoBean = new VoteAndOptionBean();
				vaoBean.setRequireinput(requireinput);
				if(op1!=null && op2==null){
					//说明是选择题
					vaoBean.setOption1id(op1);
					vaoBean.setOption1Text(optionService.get(op1).getOptionText());
					vaoBean.setAnswercontent(answer);
					bean.add(vaoBean);
				}else if(op1!=null && op2!=null){
					//说明是组合题目
					if(SystemCommon_Constant.SURVEY_QUESTION_TYPE_SORT.equals(bean.getQuestiontype())){
						//排序题目
						vaoBean.setOption1id(op1);
						vaoBean.setOption1Text(optionService.get(op1).getOptionText());
						//第二个选项的内容为排序题目选中的值
						vaoBean.setOption2id(op2);
						bean.add(vaoBean);
					}else{
						vaoBean.setOption1id(op1);
						vaoBean.setOption1Text(optionService.get(op1).getOptionText());
						vaoBean.setOption2id(op2);
						vaoBean.setOption2Text(optionService.get(op2).getOptionText());
						bean.add(vaoBean);
					}
				}
			}
		}else{
			//说明是开放题
			bean.setAnswercontent(getVoteRecord(questionId, surveyId, userId, batchNumber));
		}
		return bean;
	}
	
	/**
	 * 
	 * @Description: 开放题目时，直接取得开放题目的内容返回
	 * @author yanghui 
	 * @Created 2014-4-28
	 * @param questionId
	 * @param surveyId
	 * @param userId
	 * @param batchNumber
	 * @return
	 */
	public String getVoteRecord(Long questionId, Long surveyId, Long userId,
			String batchNumber) {
		StringBuffer hql = new StringBuffer();
		hql.append(" from VoteRecord a where ");
		hql.append(" a.questionid=?  and a.surveyid=? and a.userid=? and a.batchNumber=? ");
		hql.append(" order by a.option1id asc ");
		List<VoteRecord> list = getDao().find(hql.toString(), new Object[]{questionId,surveyId,userId,batchNumber});
		String answer = "";
		if(list!=null && list.size()>0){
			VoteRecord r = list.get(0);
			answer = r.getAnswercontent();
		}
		return answer;
	}
	
	
	public List<VoteRecord> getVoteRecordList(Long questionId, Long surveyId,
			Long userId, String batchNumber) {StringBuffer hql = new StringBuffer();
			hql.append(" from VoteRecord a where ");
			hql.append(" a.questionid=?  and a.surveyid=? and a.userid=? and a.batchNumber=? ");
			hql.append(" order by a.option1id asc ");
			List<VoteRecord> list = getDao().find(hql.toString(), new Object[]{questionId,surveyId,userId,batchNumber});
			return list;
	}
	
	public Long getVoteNum(Long surveyId, Long relationObjectId, Long questionId, Long option1Id, Long option2Id) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(id) from ").append(getEntityName())
		   .append(" where surveyid = " + surveyId)
		   .append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
		   .append(" and questionid = " + questionId)
		   .append(" and option1id = " + option1Id)
		   .append(option2Id != null ? (" and option2id = " + option2Id) : "");
		count = getDao().count(hql.toString()).longValue();
		return count;
	}
	
	/**
	  * 方法名称：getVoteNumEntity
	  * 功能描述：实体信息下得问题数量
	  * 创建时间:2015年12月28日下午6:15:56
	  * 创建人: pengfei Zhao
	  * @param @return 
	  * @return Long
	 */
	public Long getVoteNumEntity(Long surveyId, Long questionId, Long option1Id, String objectID,String beginTime,String endTime) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(id) from ").append(getEntityName())
		   .append(" where surveyid = " + surveyId)
		   .append(" and questionid = " + questionId)
		   .append(" and option1id = " + option1Id)
		   .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
		   .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
		   .append(objectID != null ? (" and cObjectId = " + Long.valueOf(objectID)) : "");
		count = getDao().count(hql.toString()).longValue();
		return count;
	}
	public Long getVoteNum2(Long surveyId, Long relationObjectId, Long questionId, Long option1Id, Long option2Id) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(id) from ").append(getEntityName())
		.append(" where surveyid = " + surveyId)
		.append(relationObjectId != null ? (relationObjectId > 0 ? (" and relationObjectId = " + relationObjectId) : " and relationObjectId IS NULL") : "") // relationObjectId 不为空有两种情况：1、统计特定对象 2、统计“其他”
		.append(" and questionid = " + questionId)
		.append(" and option1id = " + option1Id)
		.append(" and option2id = " + option2Id);
		count = getDao().count(hql.toString()).longValue();
		return count;
	}
	
	/**
	  * 方法名称：getVoteNum2Entity
	  * 功能描述：获取某个实体下得问卷题目答案
	  * 创建时间:2015年12月28日下午6:29:48
	  * 创建人: pengfei Zhao
	  * @param @return 
	  * @return Long
	 */
	public Long getVoteNum2Entity(Long surveyId,  Long questionId, Long option1Id, Long option2Id,String objectId,String beginTime,String endTime) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(id) from ").append(getEntityName())
		.append(" where surveyid = " + surveyId)
		.append(" and questionid = " + questionId)
		.append(" and option1id = " + option1Id)
		.append(" and option2id = " + option2Id)
	    .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
	    .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
		.append(objectId != null ? (" and cObjectId = " + Long.valueOf(objectId)) : "");
		count = getDao().count(hql.toString()).longValue();
		return count;
	}
	
	
	
	
	/**
	  * 方法名称：getEntityVoteNum
	  * 功能描述：获取某个行业实体参与评价的总人数
	  * 创建时间:2015年12月28日下午5:58:02
	  * 创建人: pengfei Zhao
	  * @param @return 
	  * @return Long
	 */
	public int getEntityVoteNum(Long surveyId,String objectId,String beginTime,String endTime) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName())
		   .append(" where surveyid = " + surveyId)
		   .append(StringUtils.isNotBlank(beginTime)?" and votetime >='"+beginTime+" 00:00:00'":"")
		   .append(StringUtils.isNotBlank(endTime)?" and votetime <='"+endTime+" 23:59:59'":"")
		   .append((objectId != null && !objectId.equals("")) ? (" and cObjectId = " + Long.valueOf(objectId)) : "") ;
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/**
	 * 20160119 yyf add 获取某个问题中选项的答案数据
	 * @param id
	 * @param surveyId
	 * @param l
	 * @param id2
	 * @return
	 */
	public List<VoteRecord> getVoteRecordListByOptionId(Long questionid, Long surveyId,
			long surveyPartakeUserId, String optionIdStr) {
		StringBuffer hql = new StringBuffer();
		hql.append(" from VoteRecord a where ");
		hql.append(" a.questionid=?  and a.surveyid=? and a.surveyPartakeUserId=? and "+optionIdStr);
		hql.append(" order by a.option1id asc ");
		List<VoteRecord> list = getDao().find(hql.toString(), new Object[]{questionid,surveyId,surveyPartakeUserId});
		return list;
	}
	
	
	/**
	  * 方法名称：getVoteTotalNum
	  * 功能描述：获取某个问卷参与评价的总人数
	  * 创建时间:2016年5月26日上午10:03:11
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteTotalNum(Long surveyId,boolean isMember,boolean anonymous) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName()).append(" where 1=1");
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyid = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/*select * from s_voterecord where date(VOTETIME) = curdate();
	SELECT * FROM s_voterecord WHERE YEARWEEK(date_format(VOTETIME,'%Y-%m-%d')) = YEARWEEK(now())-1;
	SELECT * FROM s_voterecord WHERE date_sub(curdate(), INTERVAL 7 DAY) <= date(VOTETIME)
	SELECT * FROM s_voterecord where VOTETIME > date_add(now(),interval -14 day)
	select * from s_voterecord where date_format(VOTETIME,'%Y-%m')=date_format(now(),'%Y-%m')	
	*/
	
	/**
	  * 方法名称：getVoteNumForToday
	  * 功能描述：获取某个问卷当天的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForToday(Long surveyId,boolean isMember,boolean anonymous) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where date(VOTETIME) = curdate()-1" );
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyid = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/**
	  * 方法名称：getVoteNumForWeek
	  * 功能描述：获取某个问卷7天的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForWeek(Long surveyId,boolean isMember,boolean anonymous) {
		SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");		
		Date beginDate = new Date();	
		Date endDate = null ;
		Calendar date = Calendar.getInstance();		
		date.setTime(beginDate);		
		date.set(Calendar.DATE, date.get(Calendar.DATE) - 7);		
		try {
			 endDate = dft.parse(dft.format(date.getTime()));//获取七天之前的日期
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where VOTETIME > '" + dft.format(endDate) +"' and VOTETIME <='" + dft.format(beginDate)+"'" );
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyid = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/**
	  * 方法名称：getVoteNumForMonth
	  * 功能描述：获取某个问卷一个月的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForMonth(Long surveyId,boolean isMember,boolean anonymous) {
		SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");		
		Date beginDate = new Date();	
		Date endDate = null ;
		Calendar date = Calendar.getInstance();		
		date.setTime(beginDate);		
		date.set(Calendar.DATE, date.get(Calendar.DATE) - 30);		
		try {
			 endDate = dft.parse(dft.format(date.getTime()));//获取七天之前的日期
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where VOTETIME > '" + dft.format(endDate) +"' and VOTETIME <='" + dft.format(beginDate)+"'" );
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyid = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	
	
	
	
	/**
	  * 方法名称：getVoteNumForToday
	  * 功能描述：获取某个实体当天的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForTodayForEntity(String objectId,Long surveyId,boolean isMember,boolean anonymous) {
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where date(VOTETIME) = curdate()-1" );
		if(objectId!=null&&!objectId.equals("null")&&!objectId.equals("")){
			hql.append(" and cObjectId in (" + objectId+")");
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyId = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/**
	  * 方法名称：getVoteNumForWeek
	  * 功能描述：获取某个实体7天的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForWeekForEntity(String objectId,Long surveyId,boolean isMember,boolean anonymous) {
		SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");		
		Date beginDate = new Date();	
		Date endDate = null ;
		Calendar date = Calendar.getInstance();		
		date.setTime(beginDate);		
		date.set(Calendar.DATE, date.get(Calendar.DATE) - 7);		
		try {
			 endDate = dft.parse(dft.format(date.getTime()));//获取七天之前的日期
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where VOTETIME > '" + dft.format(endDate) +"' and VOTETIME <='" + dft.format(beginDate)+"'" );
		if(objectId!=null&&!objectId.equals("null")&&!objectId.equals("")){
			hql.append(" and cObjectId in (" + objectId+")");
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyId = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	/**
	  * 方法名称：getVoteNumForMonth
	  * 功能描述：获取某个实体一个月的数据数量
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public int getVoteNumForMonthForEntity(String objectId,Long surveyId,boolean isMember,boolean anonymous) {
		SimpleDateFormat dft = new SimpleDateFormat("yyyy-MM-dd");		
		Date beginDate = new Date();	
		Date endDate = null ;
		Calendar date = Calendar.getInstance();		
		date.setTime(beginDate);		
		date.set(Calendar.DATE, date.get(Calendar.DATE) - 30);		
		try {
			 endDate = dft.parse(dft.format(date.getTime()));//获取七天之前的日期
		} catch (ParseException e) {
			e.printStackTrace();
		}
		
		Long count = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select count(distinct batchNumber) from ").append(getEntityName());
		hql.append(" where VOTETIME > '" + dft.format(endDate) +"' and VOTETIME <='" + dft.format(beginDate)+"'" );
		if(objectId!=null&&!objectId.equals("null")&&!objectId.equals("")){
			hql.append(" and cObjectId in (" + objectId+")");
		}
		if(surveyId!=null&&!surveyId.equals("null")){
			hql.append(" and surveyId = " + surveyId);
		}
		if(isMember==true){
			hql.append(" and userid >0 ");
		}
		if(anonymous==true){
			hql.append(" and userid <0 ");
		}
		count = getDao().count(hql.toString()).longValue();
		return count.intValue();
	}
	
	
	
	
	/**
	  * 方法名称：VotechartNumAndSave
	  * 功能描述：获取当天数据数量然后存储到记录表中
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public void VotechartNumAndSave() {
		Long count = 0L;
		Long Mcount = 0L;
		Long anonycount = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select COUNT(se.INDUSTRYENTITYID) from ").append("s_SurveyEvaluation  se ");
		hql.append(" where date(se.CREATETIME) = curdate() " );
		StringBuilder hql1 = new StringBuilder();
		hql1.append("select COUNT(se.INDUSTRYENTITYID) from ").append("s_SurveyEvaluation  se ,s_SurveyPartakeUser sp");
		hql1.append(" where  sp.id=se.SURVEYPARTAKEUSERID and date(se.CREATETIME) = curdate() and  sp.username <> '匿名'" );
		count = Long.parseLong(getSession().createSQLQuery(hql.toString()).uniqueResult().toString());
		Mcount = Long.parseLong(getSession().createSQLQuery(hql1.toString()).uniqueResult().toString());
		if(count>0){
			anonycount=count-Mcount;
		}
		SurveyCharts vrc=new SurveyCharts();
		vrc.setTodayTnum(count);
		vrc.setTodayMnum(Mcount);
		vrc.setTodayNnum(anonycount);
		vrc.setCountTime(new Date());
		surveyChartsService.saveSurveyCharts(vrc);
	}
	
	/**
	  * 方法名称：VoteNumForsurveysave
	  * 功能描述：获取当天实体评价数据然后存储到记录表中
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public void saveVoteNumForSurveyAndEntity() {
		Long anonycount = 0L;
		StringBuilder hql = new StringBuilder();
		hql.append("select se.INDUSTRYENTITYID,COUNT(se.INDUSTRYENTITYID),se.SURVEYID from ").append("s_SurveyEvaluation  se");
		hql.append(" where  date(se.CREATETIME) = curdate() GROUP BY se.INDUSTRYENTITYID,se.SURVEYID" );
		StringBuilder hql1 = new StringBuilder();
		hql1.append("select se.INDUSTRYENTITYID,COUNT(se.INDUSTRYENTITYID),se.SURVEYID from  ").append("s_SurveyEvaluation  se ,s_SurveyPartakeUser sp");
		hql1.append(" where sp.id=se.SURVEYPARTAKEUSERID and date(se.CREATETIME) = curdate() and sp.username <> '匿名' GROUP BY se.INDUSTRYENTITYID,se.SURVEYID" );
		List list = getSession().createSQLQuery(hql.toString()).list();
		List list1= getSession().createSQLQuery(hql1.toString()).list();
		Map<String, String> map = new HashMap<String, String>();
	    for (Iterator it = list1.iterator(); it.hasNext(); ) {
	         Object[] obj = (Object[])it.next();
	         String entityId =obj[0].toString();
	         String mcount =obj[1].toString();
	         String surveyId =obj[2].toString();
	         map.put(entityId+surveyId, mcount);
	    }
	    for(int a=0;a<list.size();a++){
			SurveyChartsForSurveyEntity scfe=new SurveyChartsForSurveyEntity();
			Object[] obj = (Object[]) list.get(a);
			String entityId =obj[0].toString();
			String tcount =obj[1].toString();
			String surveyId =obj[2].toString();
			String mcount="";
			if(map.containsKey(entityId+surveyId)){
				 mcount=map.get(entityId+surveyId);
				anonycount=Integer.valueOf(tcount)-Integer.valueOf(mcount).longValue();
			}else{
				anonycount=Long.parseLong(tcount);
				mcount="0";
			}
			scfe.setTodayTnum(Long.valueOf(tcount));
			scfe.setTodayMnum(Long.valueOf(mcount));
			scfe.setTodayNnum(anonycount);
			scfe.setCountTime(new Date());
			scfe.setIndustryEntityId(entityId);
			scfe.setSurveyId(surveyId);
			surveyChartsForSurveyEntityService.SurveyChartsave(scfe);
		}
		
	}
   /*************************把现网历史数据转储，一次性使用后可以作废 add 20160620 zpf**********************/
	/**
	  * 方法名称：VoteNumForsurveysave
	  * 功能描述：获取历史行业实体评价数据然后存储到记录表中
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public void dumpHistoryforSurveyEntity(String startDate,Date endDate) {
	try {
		Long anonycount = 0L;
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		List lDate = findDates(sdf.parse(startDate), endDate);
		for(int i=0;i<lDate.size();i++){
			String vote_Time=(String) lDate.get(i);
			StringBuilder hql = new StringBuilder();
			hql.append("select se.INDUSTRYENTITYID,COUNT(se.INDUSTRYENTITYID),se.SURVEYID from ").append("s_SurveyEvaluation  se");
			hql.append(" where  date(se.CREATETIME) = '"+vote_Time+"' GROUP BY se.INDUSTRYENTITYID,se.SURVEYID" );
			StringBuilder hql1 = new StringBuilder();
			hql1.append("select se.INDUSTRYENTITYID,COUNT(se.INDUSTRYENTITYID),se.SURVEYID from ").append("s_SurveyEvaluation  se ,s_SurveyPartakeUser sp");
			hql1.append(" where sp.id=se.SURVEYPARTAKEUSERID and date(se.CREATETIME) = '"+vote_Time+"' and sp.username <> '匿名' GROUP BY se.INDUSTRYENTITYID,se.SURVEYID" );
			List list = getSession().createSQLQuery(hql.toString()).list();
			List list1= getSession().createSQLQuery(hql1.toString()).list();
			Map<String, String> map = new HashMap<String, String>();
		    for (Iterator it = list1.iterator(); it.hasNext(); ) {
		         Object[] obj = (Object[])it.next();
		         String entityId =obj[0].toString();
		         String mcount =obj[1].toString();
		         String surveyId =obj[2].toString();
		         map.put(entityId+surveyId, mcount);
		    }
		    for(int a=0;a<list.size();a++){
				SurveyChartsForSurveyEntity scfe=new SurveyChartsForSurveyEntity();
				Object[] obj = (Object[]) list.get(a);
				String entityId =obj[0].toString();
				String tcount =obj[1].toString();
				String surveyId =obj[2].toString();
				String mcount="";
				if(map.containsKey(entityId+surveyId)){
					 mcount=map.get(entityId+surveyId);
					anonycount=Integer.valueOf(tcount)-Integer.valueOf(mcount).longValue();
				}else{
					anonycount=Long.parseLong(tcount);
					mcount="0";
				}
				scfe.setTodayTnum(Long.valueOf(tcount));
				scfe.setTodayMnum(Long.valueOf(mcount));
				scfe.setTodayNnum(anonycount);
				scfe.setCountTime(sdf.parse(vote_Time));
				scfe.setIndustryEntityId(entityId);
				scfe.setSurveyId(surveyId);
				surveyChartsForSurveyEntityService.SurveyChartsave(scfe);
			}
		}
	} catch (Exception e) {
		e.printStackTrace();
	}
	}
	
	/**
	  * 方法名称：dumpHistoryforAllSurvey
	  * 功能描述：获取历史问卷数据然后存储到记录表中
	  * 创建时间:2016年5月26日上午10:32:42
	  * 创建人: pengfei Zhao
	  * @return int
	 */
	public void dumpHistoryforAllSurvey(String startDate,Date endDate) {
	try {
		Long count = 0L;
		Long Mcount = 0L;
		Long anonycount = 0L;
   	    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
		List lDate = findDates(sdf.parse(startDate), endDate);
		for(int i=0;i<lDate.size();i++){
			String vote_Time=(String) lDate.get(i);
			StringBuilder hql = new StringBuilder();
			hql.append("select COUNT(se.INDUSTRYENTITYID) from ").append("s_SurveyEvaluation  se ");
			hql.append(" where date(se.CREATETIME) ='"+vote_Time+"' " );
			StringBuilder hql1 = new StringBuilder();
			hql1.append("select COUNT(se.INDUSTRYENTITYID) from ").append("s_SurveyEvaluation  se ,s_SurveyPartakeUser sp");
			hql1.append(" where  sp.id=se.SURVEYPARTAKEUSERID and date(se.CREATETIME) = '"+vote_Time+"' and  sp.username <> '匿名'" );
			count = Long.parseLong(getSession().createSQLQuery(hql.toString()).uniqueResult().toString());
			Mcount = Long.parseLong(getSession().createSQLQuery(hql1.toString()).uniqueResult().toString());
			if(count>0){
				anonycount=count-Mcount;
			}
			SurveyCharts vrc=new SurveyCharts();
			vrc.setTodayTnum(count);
			vrc.setTodayMnum(Mcount);
			vrc.setTodayNnum(anonycount);
			vrc.setCountTime(sdf.parse(vote_Time));
			surveyChartsService.saveSurveyCharts(vrc);
			}
	} catch (Exception e) {
		e.printStackTrace();
	}
	}
	public List<String> findDates(Date dBegin, Date dEnd) {  
    	SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
        List lDate = new ArrayList();  
        lDate.add(sdf.format(dBegin));  
        Calendar calBegin = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calBegin.setTime(dBegin);  
        Calendar calEnd = Calendar.getInstance();  
        // 使用给定的 Date 设置此 Calendar 的时间    
        calEnd.setTime(dEnd);  
        // 测试此日期是否在指定日期之后    
        while (dEnd.after(calBegin.getTime())) {  
            // 根据日历的规则，为给定的日历字段添加或减去指定的时间量    
            calBegin.add(Calendar.DAY_OF_MONTH, 1);  
            lDate.add(sdf.format(calBegin.getTime()));  
        }  
        return lDate;  
    }  
/*************************把现网历史数据转储，一次性使用后可以作废 add 20160620 zpf  end**********************/
}
